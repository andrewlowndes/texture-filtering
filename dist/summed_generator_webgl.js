"use strict";(self.webpackChunksampling_coverage=self.webpackChunksampling_coverage||[]).push([[634],{7158:function(e,n,t){var i=this&&this.__awaiter||function(e,n,t,i){return new(t||(t=Promise))((function(a,r){function o(e){try{s(i.next(e))}catch(e){r(e)}}function l(e){try{s(i.throw(e))}catch(e){r(e)}}function s(e){var n;e.done?a(e.value):(n=e.value,n instanceof t?n:new t((function(e){e(n)}))).then(o,l)}s((i=i.apply(e,n||[])).next())}))};Object.defineProperty(n,"__esModule",{value:!0});const a=t(8372),r=t(9864),o=t(8691),l=document.getElementById("game"),s=document.getElementById("image_preview"),p=document.getElementById("chooseimage"),u=document.getElementById("resolution"),d=document.getElementById("timetaken"),g=l.getContext("webgl2",{antialias:!1,premultipliedAlpha:!1});if(!g)throw new Error("No WebGL :(");if(null===g.getExtension("EXT_color_buffer_float"))throw new Error("No render to Float32 support :(");const c=()=>i(void 0,void 0,void 0,(function*(){const e=new Image,n=()=>{s.src=p.value;const n=parseInt(u.value,10);((e,n)=>{const t=Math.pow(n,2);g.canvas.width=t,g.canvas.height=t,g.clearColor(0,0,0,0),g.viewport(0,0,g.canvas.width,g.canvas.height);const i=(0,r.createProgramFromShader)(g,o.summedGenerator);g.useProgram(i);const a=g.createTexture();g.activeTexture(g.TEXTURE0),g.bindTexture(g.TEXTURE_2D,a),g.pixelStorei(g.UNPACK_FLIP_Y_WEBGL,!1),g.texImage2D(g.TEXTURE_2D,0,g.RGBA,g.RGBA,g.UNSIGNED_BYTE,e),g.texParameteri(g.TEXTURE_2D,g.TEXTURE_MAG_FILTER,g.NEAREST),g.texParameteri(g.TEXTURE_2D,g.TEXTURE_MIN_FILTER,g.NEAREST);const l=g.getUniformLocation(i,"uSampler");g.uniform1i(l,0);const s=g.getUniformLocation(i,"uResolution");g.uniform1ui(s,n);const p=g.getUniformLocation(i,"uSize");g.uniform1ui(p,t);const u=g.getUniformLocation(i,"uStep");g.uniform2fv(u,[e.width/n,e.height/n])})((0,a.getImageData)(e),n),(()=>{const e=Date.now();g.clear(g.COLOR_BUFFER_BIT),g.drawArrays(g.TRIANGLES,0,3),g.readPixels(0,0,1,1,g.RGBA,g.UNSIGNED_BYTE,new Uint8Array(4)),d.innerText=Date.now()-e+" ms"})()};u.onchange=n,e.onload=n,e.src=p.value}));p.onchange=c,c()},3094:(e,n,t)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.intersectLineSquare=void 0;const i=t(8049),a=t(4673);n.intersectLineSquare={dependencies:[i.Aabb,a.inverseLerp],text:"\n        vec4 intersectLineSquare(vec2 pos, vec2 dir, Aabb bounds) {\n            return vec4(\n                inverseLerp(pos.x, dir.x, bounds.minPos.x),\n                inverseLerp(pos.x, dir.x, bounds.maxPos.x),\n                inverseLerp(pos.y, dir.y, bounds.minPos.y),\n                inverseLerp(pos.y, dir.y, bounds.maxPos.y)\n            );\n        }\n    "}},2699:(e,n,t)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.intersectTriangleSquare=void 0;const i=t(8049),a=t(1858),r=t(136),o=t(3094);n.intersectTriangleSquare={dependencies:[a.Triangle,i.Aabb,r.sort,o.intersectLineSquare],text:"\n        vec2[12] intersectTriangleSquare(Triangle triangle, Triangle edges, Aabb bounds) {\n            vec4 t1s = sort(intersectLineSquare(triangle.p1, edges.p1, bounds));\n            vec4 t2s = sort(intersectLineSquare(triangle.p2, edges.p2, bounds));\n            vec4 t3s = sort(intersectLineSquare(triangle.p3, edges.p3, bounds));\n            \n            return vec2[12](\n                clamp(triangle.p1 + edges.p1 * t1s.x, bounds.minPos, bounds.maxPos),\n                clamp(triangle.p1 + edges.p1 * t1s.y, bounds.minPos, bounds.maxPos),\n                clamp(triangle.p1 + edges.p1 * t1s.z, bounds.minPos, bounds.maxPos),\n                clamp(triangle.p1 + edges.p1 * t1s.w, bounds.minPos, bounds.maxPos),\n\n                clamp(triangle.p2 + edges.p2 * t2s.x, bounds.minPos, bounds.maxPos),\n                clamp(triangle.p2 + edges.p2 * t2s.y, bounds.minPos, bounds.maxPos),\n                clamp(triangle.p2 + edges.p2 * t2s.z, bounds.minPos, bounds.maxPos),\n                clamp(triangle.p2 + edges.p2 * t2s.w, bounds.minPos, bounds.maxPos),\n                \n                clamp(triangle.p3 + edges.p3 * t3s.x, bounds.minPos, bounds.maxPos),\n                clamp(triangle.p3 + edges.p3 * t3s.y, bounds.minPos, bounds.maxPos),\n                clamp(triangle.p3 + edges.p3 * t3s.z, bounds.minPos, bounds.maxPos),\n                clamp(triangle.p3 + edges.p3 * t3s.w, bounds.minPos, bounds.maxPos)\n            );\n        }\n    "}},7637:(e,n,t)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.getLineEquation=void 0;const i=t(4821),a=t(641);n.getLineEquation={dependencies:[i.Line,a.LineEquation],text:"\n        LineEquation getLineEquation(Line line) {\n            vec2 direction = line.p2 - line.p1;\n\n            float gradient = direction.y / direction.x;\n            float intersect = line.p1.y - line.p1.x * gradient;\n\n            return LineEquation(gradient, intersect);\n        }\n    "}},1233:(e,n,t)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.getLineRange=void 0;const i=t(4821),a=t(4923),r=t(7637);n.getLineRange={dependencies:[i.Line,a.LineRange,r.getLineEquation],text:"\n        LineRange getLineRange(Line line) {\n            vec2 pStart;\n            vec2 pEnd;\n            \n            //TODO: make a branchless version\n            if (line.p1.y < line.p2.y) {\n                pStart = line.p1;\n                pEnd = line.p2;\n            } else if (line.p1.y > line.p2.y) {\n                pStart = line.p2;\n                pEnd = line.p1;\n            } else if (line.p1.x < line.p2.x) {\n                pStart = line.p1;\n                pEnd = line.p2;\n            } else {\n                pStart = line.p2;\n                pEnd = line.p1;\n            }\n\n            return LineRange(\n                pStart,\n                pEnd,\n                vec2(min(line.p1.x, line.p2.x), max(line.p1.x, line.p2.x)),\n                getLineEquation(line)\n            );\n        }\n    "}},6729:(e,n,t)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.solveLineX=void 0;const i=t(1648),a=t(4821),r=t(641);n.solveLineX={dependencies:[a.Line,r.LineEquation,i.epsilon],text:"\n        float solveLineX(LineEquation equation, float y) {\n            if (abs(equation.gradient) > epsilon) {\n                return (y - equation.intersect) / equation.gradient;\n            } else {\n                return -1.0;\n            }\n        }\n    "}},1648:(e,n)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.epsilon=void 0,n.epsilon={text:"\n        const float epsilon = 0.00001;\n    "}},4673:(e,n)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.inverseLerp=void 0,n.inverseLerp={text:"\n        float inverseLerp(float a, float diff, float val) {\n            return clamp((val - a) / diff, 0.0, 1.0);\n        }\n    "}},136:(e,n)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.sort=void 0,n.sort={text:"\n        vec4 sort(vec4 nums) {\n            float a = min(nums.x, nums.y);\n            float b = max(nums.x, nums.y);\n            float c = min(nums.z, nums.w);\n            float d = max(nums.z, nums.w);\n            float e = min(b, c);\n            float f = max(b, c);\n            float h = max(a, e);\n            float i = min(f, d);\n\n            return vec4(min(a, e), min(h, i), max(h, i), max(f, d));\n        }\n    "}},4814:(e,n)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.vec2Determinant=void 0,n.vec2Determinant={text:"\n        float vec2Determinant(vec2 p1, vec2 p2) {\n            return (p1.x * p2.y) - (p1.y * p2.x);\n        }\n    "}},5190:(e,n,t)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.rasterise=void 0;const i=t(6531),a=t(1233),r=t(6729),o=t(4821),l=t(4923),s=t(1858),p=t(9142),u=t(4321);n.rasterise={dependencies:[u.triangleMin,p.triangleMax,o.Line,l.LineRange,a.getLineRange,s.Triangle,r.solveLineX],params:[{qualifier:"in",type:"Triangle",name:"triangle"}],text:e=>`\n        vec2 minPos = triangleMin(triangle);\n        vec2 maxPos = triangleMax(triangle);\n\n        Line[3] lines = Line[3](\n            Line(triangle.p1, triangle.p2),\n            Line(triangle.p2, triangle.p3),\n            Line(triangle.p3, triangle.p1)\n        );\n\n        LineRange[3] lineRanges = LineRange[3](\n            getLineRange(lines[0]),\n            getLineRange(lines[1]), \n            getLineRange(lines[2])\n        );\n        \n        int maxY = int(ceil(maxPos.y));\n        int prevY = int(minPos.y);\n        \n        if (maxY - prevY < 1) {\n            ${(0,i.callShaderSnippet)(e,["uvec3(minPos.x, maxPos.x, prevY)","false"])}\n            return;\n        }\n\n        for (int y=prevY+1; y<=maxY; y++) {\n            //we just need to get four numbers, the outer min and max and inner min and max values\n            ivec4 range = ivec4(-1);\n\n            for (int i=0; i<3; i++) {\n                LineRange line = lineRanges[i];\n\n                if (line.pEnd.y >= float(prevY) && line.pStart.y < float(y)) {\n                    float fromX = solveLineX(line.equation, float(prevY));\n\n                    if (fromX > -1.0) {\n                        fromX = clamp(fromX, line.xRange.x, line.xRange.y);\n                    } else {\n                        fromX = line.pStart.x;\n                    }\n\n                    float toX = solveLineX(line.equation, float(y));\n\n                    if (toX > -1.0) {\n                        toX = clamp(toX, line.xRange.x, line.xRange.y);\n                    } else {\n                        toX = line.pEnd.x;\n                    }\n\n                    ivec2 xRange = ivec2(min(fromX, toX), max(fromX, toX));\n\n                    if (range.x < 0) {\n                        //first entry\n                        range.xy = xRange;\n                    } else if ((xRange.x <= range.y + 1 && xRange.x >= range.x - 1) || (xRange.y <= range.y + 1 && xRange.y >= range.x - 1)) {\n                        //extends the first entry\n                        range.xy = ivec2(min(range.x, xRange.x), max(range.y, xRange.y));\n                    } else if (range.z < 0) {\n                        //must be a new second range, determine if we need to swap or not to keep them ordered\n                        if (xRange.x > range.y) {\n                            range.zw = xRange;\n                        } else {\n                            range = ivec4(xRange, range.xy);\n                        } \n                    } else {\n                        //extends the second range\n                        range.zw = ivec2(min(range.z, xRange.x), max(range.w, xRange.y));\n                    }\n                }\n            }\n\n            //we have an inside\n            if (range.z > range.y) {\n                ${(0,i.callShaderSnippet)(e,["uvec3(range.x, range.y, prevY)","false"])}\n                ${(0,i.callShaderSnippet)(e,["uvec3(range.y + 1, range.z - 1, prevY)","true"])}\n                ${(0,i.callShaderSnippet)(e,["uvec3(range.z, range.w, prevY)","false"])}\n            } else {\n                ${(0,i.callShaderSnippet)(e,["uvec3(range.x, max(range.y, range.w), prevY)","false"])}\n            }\n\n            prevY = y;\n        }\n    `}},861:(e,n,t)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.triangleCoverage=void 0;const i=t(6531),a=t(5285),r=t(2072),o=t(2699),l=t(4814),s=t(8049),p=t(1858),u=t(5047),d=t(5190),g=[{qualifier:"inout",type:"vec4",name:"colour"},{qualifier:"inout",type:"int",name:"numPixels"},{qualifier:"in",type:"sampler2D",name:"texture"},{qualifier:"in",type:"Triangle",name:"triangle"},{qualifier:"in",type:"Triangle",name:"edges"}],c=[{qualifier:"in",type:"uvec3",name:"range"},{qualifier:"in",type:"bool",name:"isInside"}],m=(0,a.createShaderSnippetInstance)({snippet:d.rasterise,resultObjs:g,params:[(0,a.createShaderSnippetInstance)({resultObjs:g,snippet:{params:c,text:()=>`\n                    for (uint x=range.x; x<=range.y; x++) {\n                        ${r.snippetResult}colour += texelFetch(${r.snippetResult}texture, ivec2(x, range.z), 0);\n                        ${r.snippetResult}numPixels += 1;\n                    }\n                `}})]}),v=(0,a.createShaderSnippetInstance)({dependencies:[o.intersectTriangleSquare,l.vec2Determinant,s.Aabb],snippet:d.rasterise,resultObjs:g,params:[(0,a.createShaderSnippetInstance)({resultObjs:g,snippet:{params:c,text:()=>`\n                    if (isInside) {\n                        for (uint x=range.x; x<=range.y; x++) {\n                            ${r.snippetResult}colour += texelFetch(${r.snippetResult}texture, ivec2(x, range.z), 0);\n                        }\n                    } else {\n                        //process each outer pixel separately so we have per-pixel shading\n                        uint yMax = range.z + uint(1);\n\n                        for (uint x=range.x; x<=range.y; x++) {\n                            Aabb bounds = Aabb(vec2(x, range.z), vec2(x + uint(1), yMax));\n\n                            //as a test, determine the coverage of the triangle in outside cells and use as antialiasing\n                            vec2[12] polygon = intersectTriangleSquare(${r.snippetResult}triangle, ${r.snippetResult}edges, bounds);\n                            \n                            float percentCoverage = clamp(abs((\n                                vec2Determinant(polygon[0], polygon[1]) +\n                                vec2Determinant(polygon[1], polygon[2]) +\n                                vec2Determinant(polygon[2], polygon[3]) +\n                                vec2Determinant(polygon[3], polygon[4]) +\n                                vec2Determinant(polygon[4], polygon[5]) +\n                                vec2Determinant(polygon[5], polygon[6]) +\n                                vec2Determinant(polygon[6], polygon[7]) +\n                                vec2Determinant(polygon[7], polygon[8]) +\n                                vec2Determinant(polygon[8], polygon[9]) +\n                                vec2Determinant(polygon[9], polygon[10]) +\n                                vec2Determinant(polygon[10], polygon[11]) +\n                                vec2Determinant(polygon[11], polygon[0])\n                            ) / 2.0), 0.0, 1.0);\n\n                            ${r.snippetResult}colour += texelFetch(${r.snippetResult}texture, ivec2(x, range.z), 0) * percentCoverage;\n                        }\n                    }\n                `}})]});n.triangleCoverage={dependencies:[p.Triangle,u.triangleArea,m,v],text:`\n         vec4 triangleCoverage(in Triangle triangle, in sampler2D texture) {\n            float area = triangleArea(triangle);\n\n            Triangle edges = Triangle(triangle.p2 - triangle.p1, triangle.p3 - triangle.p2, triangle.p1 - triangle.p3);\n\n            vec4 colour = vec4(0.0);\n            int numPixels = 0;\n            \n            //if the triangle is degenerate and has no area then we just average the colours the lines cover\n            if (area < 1.0) {\n                ${(0,i.callShaderSnippet)(m,["triangle"],["colour","numPixels","texture","triangle","edges"])}\n                return colour / float(numPixels);\n            }\n            \n            ${(0,i.callShaderSnippet)(v,["triangle"],["colour","numPixels","texture","triangle","edges"])}\n            return colour / area;\n        }\n    `}},8049:(e,n)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.Aabb=void 0,n.Aabb={text:"\n        struct Aabb {\n            vec2 minPos;\n            vec2 maxPos;\n        };\n    "}},4821:(e,n)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.Line=void 0,n.Line={text:"\n        struct Line {\n            vec2 p1;\n            vec2 p2;\n        };\n    "}},641:(e,n)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.LineEquation=void 0,n.LineEquation={text:"\n        struct LineEquation {\n            float gradient;\n            float intersect;\n        };\n    "}},4923:(e,n)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.LineRange=void 0,n.LineRange={text:"\n        struct LineRange {\n            vec2 pStart;\n            vec2 pEnd;\n            vec2 xRange;\n            LineEquation equation;\n        };\n    "}},1858:(e,n)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.Triangle=void 0,n.Triangle={text:"\n        struct Triangle {\n            vec2 p1;\n            vec2 p2;\n            vec2 p3;\n        };\n    "}},8691:(e,n,t)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.summedGenerator=void 0;const i=t(861),a=t(1858);n.summedGenerator={version:"300 es",vertex:{head:"\n            const vec2[3] coords = vec2[3](\n                vec2(-1.0, 1.0),\n                vec2(3.0, 1.0),\n                vec2(-1.0, -3.0)\n            );\n        ",main:"\n            gl_Position = vec4(coords[gl_VertexID], 0.0, 1.0);\n        "},fragment:{dependencies:[a.Triangle,i.triangleCoverage],head:"\n            precision mediump float;\n\n            uniform vec2 uStep;\n            uniform uint uResolution;\n            uniform uint uSize;\n            uniform sampler2D uSampler;\n\n            out highp vec4 outColor;\n        ",main:"\n            //start from the top left corner like the other solutions\n            uvec2 pixelIndex = uvec2(gl_FragCoord.x, uSize - uint(gl_FragCoord.y));\n            uint flatPixelIndex = pixelIndex.y * uSize + pixelIndex.x;\n\n            //deconstruct the 2d coord into the 2 2d line coords\n            uint inverseIndex = flatPixelIndex;\n            uint p2y = inverseIndex % uResolution;\n            inverseIndex /= uResolution;\n            uint p2x = inverseIndex % uResolution;\n            inverseIndex /= uResolution;\n            uint p1y = inverseIndex % uResolution;\n            inverseIndex /= uResolution;\n            uint p1x = inverseIndex;\n\n            Triangle triangle = Triangle(\n                vec2(p1x, p1y) * uStep,\n                vec2(p2x, p2y) * uStep,\n                vec2(0.0)\n            );\n\n            //summed triangle coverage\n            //if we divide by the area here, we can normalise all of the colours to 0-1 but need to multiply by the areas later\n            outColor = triangleCoverage(triangle, uSampler);\n        "}}},5047:(e,n,t)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.triangleArea=void 0;const i=t(1858),a=t(4814);n.triangleArea={dependencies:[i.Triangle,a.vec2Determinant],text:"\n        float triangleArea(Triangle triangle) {\n            return abs((\n                vec2Determinant(triangle.p1, triangle.p2) +\n                vec2Determinant(triangle.p2, triangle.p3) +\n                vec2Determinant(triangle.p3, triangle.p1)\n            ) / 2.0);\n        }\n    "}},9142:(e,n,t)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.triangleMax=void 0;const i=t(1858);n.triangleMax={dependencies:[i.Triangle],text:"\n        vec2 triangleMax(Triangle triangle) {\n            return max(max(triangle.p1, triangle.p2), triangle.p3);\n        }\n    "}},4321:(e,n,t)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.triangleMin=void 0;const i=t(1858);n.triangleMin={dependencies:[i.Triangle],text:"\n        vec2 triangleMin(Triangle triangle) {\n            return min(min(triangle.p1, triangle.p2), triangle.p3);\n        }\n    "}},8372:(e,n)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.getImageData=void 0,n.getImageData=e=>{const n=document.createElement("canvas");n.width=e.width,n.height=e.height;const t=n.getContext("2d");if(!t)throw new Error("Could not create canvas to extract image data");return t.clearRect(0,0,n.width,n.height),t.drawImage(e,0,0),t.getImageData(0,0,n.width,n.height)}},5498:(e,n,t)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.buildShaderStage=void 0;const i=t(5941);n.buildShaderStage=(e,n)=>{var t;let a=new Set(e.dependencies||[]);const r=new Set(a);let o;const l=e=>{if(e)for(const n of e)r.has(n)?r.delete(n):o.add(n),r.add(n)};for(;a.size;){o=new Set;for(const e of a){if("snippet"in e){const n=e;l(n.snippet.dependencies),l(n.params)}l(e.dependencies)}a=o}const s=Array.from(r.values()).reverse();return`#version ${n}\n\n        ${null!==(t=e.head)&&void 0!==t?t:""}\n\n        ${s.map((e=>{const n=e;return"snippet"in n?(0,i.defineShaderSnippet)(n):n.text})).join("\n")}\n    \n        void main(void) {\n            ${e.main}\n        }\n    `}},6531:(e,n,t)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.callShaderSnippet=void 0;const i=t(2072);n.callShaderSnippet=(e,n,t)=>{if(e.snippet.params.length!==n.length)throw new Error(`Missing params in ${e.name} call, expecting params: ${e.snippet.params.map((e=>e.name)).join(", ")}`);if(t){if(t.length!==e.resultObjs.length)throw new Error(`Missing result object in ${e.name} call, expecting results: ${e.resultObjs.map((e=>e.name)).join(", ")}`)}else t=e.resultObjs.map((e=>`${i.snippetResult}${e.name}`));return`${e.name}(${n.join(", ")}, ${t.join(", ")});`}},3795:(e,n)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.createProgram=void 0,n.createProgram=(e,n,t)=>{const i=e.createProgram();if(null===i)throw new Error("Could not create program");if(e.attachShader(i,n),e.attachShader(i,t),e.linkProgram(i),!e.getProgramParameter(i,e.LINK_STATUS)){const n=e.getProgramInfoLog(i);throw e.deleteProgram(i),new Error(`Error linking program : ${n}`)}return i}},9864:(e,n,t)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.createProgramFromShader=void 0;const i=t(5498),a=t(3795),r=t(5549);n.createProgramFromShader=(e,n)=>{const t=(0,i.buildShaderStage)(n.vertex,n.version),o=(0,i.buildShaderStage)(n.fragment,n.version),l=(0,r.loadShader)(e,t,e.VERTEX_SHADER),s=(0,r.loadShader)(e,o,e.FRAGMENT_SHADER);return(0,a.createProgram)(e,l,s)}},5285:(e,n)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.createShaderSnippetInstance=void 0;let t=0;n.createShaderSnippetInstance=e=>Object.assign(Object.assign({},e),{name:"_snippet_"+t++})},5941:(e,n,t)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.defineShaderSnippet=void 0;const i=t(2072);n.defineShaderSnippet=e=>{var n,t;const a=[...e.snippet.params,...e.resultObjs.map((e=>Object.assign(Object.assign({},e),{name:`${i.snippetResult}${e.name}`})))].map((e=>`${e.qualifier} ${e.type} ${e.name}`));return`${null!==(n=e.snippet.returnType)&&void 0!==n?n:"void"} ${e.name}(${a.join(",")}) {\n        ${e.snippet.text(...null!==(t=e.params)&&void 0!==t?t:[])}\n    }`}},5549:(e,n)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.loadShader=void 0,n.loadShader=(e,n,t)=>{const i=e.createShader(t);if(null===i)throw new Error("Could not create shader");if(e.shaderSource(i,n),e.compileShader(i),!e.getShaderParameter(i,e.COMPILE_STATUS)){const t=e.getShaderInfoLog(i);throw e.deleteShader(i),new Error(`Error compiling shader: ${t}\n${n.split("\n").map(((e,n)=>`${n+1}:${e}`)).join("\n")}`)}return i}},2072:(e,n)=>{Object.defineProperty(n,"__esModule",{value:!0}),n.snippetResult=void 0,n.snippetResult="_result_"}},e=>{e(e.s=7158)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,