(()=>{"use strict";var e={673:function(e,t,a){var n=this&&this.__awaiter||function(e,t,a,n){return new(a||(a=Promise))((function(o,r){function l(e){try{c(n.next(e))}catch(e){r(e)}}function i(e){try{c(n.throw(e))}catch(e){r(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof a?t:new a((function(e){e(t)}))).then(l,i)}c((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0});const o=a(787),r=a(345),l=a(372),i=a(586),c=a(792),d=document.getElementById("game"),y=document.getElementById("resolution"),s=document.getElementById("cache"),u=document.getElementById("timetaken"),x=d.getContext("2d"),h={x:160,y:160},p={x:250,y:130},m={x:150,y:270},g={p1:h,p2:p,p3:m,points:[h,p,m],e1:r.sub(p,h),e2:r.sub(m,p),e3:r.sub(h,m)};let f,M,v;g.center=r.avg(g.points);const b=2*Math.PI,w=Math.cos(.01),P=Math.sin(.01),I=o.createRenderer((()=>{g.points.forEach((e=>{const t=e.x-g.center.x,a=e.y-g.center.y;e.x=g.center.x+t*w-a*P,e.y=g.center.y+t*P+a*w})),g.e1=r.sub(g.p2,g.p1),g.e2=r.sub(g.p3,g.p2),g.e3=r.sub(g.p1,g.p3),M&&v&&(()=>{x.clearRect(0,0,d.width,d.height);const e=(M.width-1)/(f-1),t=(M.height-1)/(f-1),a=Date.now(),n=f-1,o=i.clamp(Math.round(g.p1.x/e),0,n),r=i.clamp(Math.round(g.p1.y/t),0,n),l=i.clamp(Math.round(g.p2.x/e),0,n),c=i.clamp(Math.round(g.p2.y/t),0,n),y=i.clamp(Math.round(g.p3.x/e),0,n),s=i.clamp(Math.round(g.p3.y/t),0,n),h=s+f*(y+f*(c+f*(l+f*(r+f*o)))),p=v.data.slice(4*h,4*(h+1));u.innerText=Date.now()-a+" ms",x.putImageData(M,0,0);for(let a=0;a<M.width;a+=e)for(let e=0;e<M.height;e+=t)x.fillStyle="yellow",x.beginPath(),x.arc(a,e,4,0,b),x.fill();x.lineWidth=1,x.strokeStyle="red",x.beginPath(),x.moveTo(o*e,r*t),x.lineTo(l*e,c*t),x.lineTo(y*e,s*t),x.closePath(),x.stroke(),x.lineWidth=1,x.strokeStyle="black",x.fillStyle=`rgba(${Math.floor(p[0])}, ${Math.floor(p[1])}, ${Math.floor(p[2])}, ${Math.floor(p[3])})`,x.beginPath(),x.moveTo(g.p1.x,g.p1.y),x.lineTo(g.p2.x,g.p2.y),x.lineTo(g.p3.x,g.p3.y),x.closePath(),x.fill(),x.stroke()})()}),(()=>I()));d.onwheel=function(e){const t=.1*Math.sign(e.deltaY);return r.addMutate(g.p1,r.scale(r.sub(g.p1,g.center),t)),r.addMutate(g.p2,r.scale(r.sub(g.p2,g.center),t)),r.addMutate(g.p3,r.scale(r.sub(g.p3,g.center),t)),!1},d.onmousemove=e=>{const t=d.getBoundingClientRect(),a={x:e.pageX-t.left-document.documentElement.scrollLeft,y:e.pageY-t.top-document.documentElement.scrollTop},n=r.sub(a,g.center);r.addMutate(g.p1,n),r.addMutate(g.p2,n),r.addMutate(g.p3,n),g.center=a,I()};const _=()=>n(void 0,void 0,void 0,(function*(){f=parseInt(y.value,10);const e=`media/cache/photo_${f}.png`,[t,a]=yield Promise.all([c.loadImage("media/photo.png"),c.loadImage(e)]);s.src=e,M=l.getImageData(t),v=l.getImageData(a),I()}));_(),y.onchange=_},787:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.createRenderer=void 0,t.createRenderer=(e,t)=>{let a=!1;return()=>{a||(a=!0,requestAnimationFrame((()=>{e(),a=!1,null==t||t()})))}}},345:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.inRange=t.avg=t.max2=t.min2=t.toPrecision2=t.addMutate=t.lerp2=t.lerp=t.normalize=t.length=t.equal=t.dot=t.sign=t.abs=t.ceil=t.floor=t.sub=t.adds=t.add=t.divide=t.multiply=t.scale=t.equals=t.determinant2=t.timeAtPos=t.clamp2=t.clamp=void 0,t.clamp=(e,t,a)=>Math.max(Math.min(e,a),t),t.clamp2=(e,a,n)=>({x:t.clamp(e.x,a.x,n.x),y:t.clamp(e.y,a.y,n.y)}),t.timeAtPos=(e,a,n)=>a?t.clamp((n-e)/a,0,1):0,t.determinant2=(e,t)=>e.x*t.y-e.y*t.x,t.equals=(e,t)=>e.x===t.x&&e.y===t.y,t.scale=(e,t)=>({x:t*e.x,y:t*e.y}),t.multiply=(e,t)=>({x:t.x*e.x,y:t.y*e.y}),t.divide=(e,t)=>({x:e.x/t.x,y:e.y/t.y}),t.add=(e,t)=>({x:e.x+t.x,y:e.y+t.y}),t.adds=(e,t)=>({x:e.x+t,y:e.y+t}),t.sub=(e,t)=>({x:e.x-t.x,y:e.y-t.y}),t.floor=e=>({x:Math.floor(e.x),y:Math.floor(e.y)}),t.ceil=e=>({x:Math.ceil(e.x),y:Math.ceil(e.y)}),t.abs=e=>({x:Math.abs(e.x),y:Math.abs(e.y)}),t.sign=e=>({x:Math.sign(e.x),y:Math.sign(e.y)}),t.dot=(e,t)=>e.x*t.x+e.y*t.y,t.equal=(e,t)=>e.x==t.x&&e.y==t.y,t.length=e=>Math.sqrt(e.x*e.x+e.y*e.y),t.normalize=e=>t.scale(e,1/t.length(e)),t.lerp=(e,t,a)=>e*(1-a)+t*a,t.lerp2=(e,a,n)=>({x:t.lerp(e.x,a.x,n),y:t.lerp(e.y,a.y,n)}),t.addMutate=(e,t)=>{e.x+=t.x,e.y+=t.y},t.toPrecision2=(e,t)=>(e.x=parseFloat(e.x.toPrecision(t)),e.y=parseFloat(e.y.toPrecision(t)),e),t.min2=(e,...t)=>{const a={x:e.x,y:e.y};return t.forEach((e=>{a.x=Math.min(a.x,e.x),a.y=Math.min(a.y,e.y)})),a},t.max2=(e,...t)=>{const a={x:e.x,y:e.y};return t.forEach((e=>{a.x=Math.max(a.x,e.x),a.y=Math.max(a.y,e.y)})),a},t.avg=e=>{const t=e.reduce(((e,t)=>(e.x+=t.x,e.y+=t.y,e)),{x:0,y:0});return t.x/=e.length,t.y/=e.length,t},t.inRange=(e,t,a)=>!(e.x>a.x||e.x<t.x||e.y>a.y||e.y<t.y)},586:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.clamp=void 0,t.clamp=(e,t,a)=>Math.max(Math.min(e,a),t)},372:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.getImageData=void 0,t.getImageData=e=>{const t=document.createElement("canvas");t.width=e.width,t.height=e.height;const a=t.getContext("2d");if(!a)throw new Error("Could not create canvas to extract image data");return a.clearRect(0,0,t.width,t.height),a.drawImage(e,0,0),a.getImageData(0,0,t.width,t.height)}},792:function(e,t){var a=this&&this.__awaiter||function(e,t,a,n){return new(a||(a=Promise))((function(o,r){function l(e){try{c(n.next(e))}catch(e){r(e)}}function i(e){try{c(n.throw(e))}catch(e){r(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof a?t:new a((function(e){e(t)}))).then(l,i)}c((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.loadImage=void 0,t.loadImage=e=>a(void 0,void 0,void 0,(function*(){const t=new Image;return new Promise(((a,n)=>{t.onload=()=>{a(t)},t.onerror=e=>{n(e)},t.src=e}))}))}},t={};!function a(n){var o=t[n];if(void 0!==o)return o.exports;var r=t[n]={exports:{}};return e[n].call(r.exports,r,r.exports,a),r.exports}(673)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,