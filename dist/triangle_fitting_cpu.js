"use strict";(self.webpackChunksampling_coverage=self.webpackChunksampling_coverage||[]).push([[638],{673:function(e,t,a){var n=this&&this.__awaiter||function(e,t,a,n){return new(a||(a=Promise))((function(c,o){function r(e){try{i(n.next(e))}catch(e){o(e)}}function l(e){try{i(n.throw(e))}catch(e){o(e)}}function i(e){var t;e.done?c(e.value):(t=e.value,t instanceof a?t:new a((function(e){e(t)}))).then(r,l)}i((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0});const c=a(887),o=a(7787),r=a(4669),l=a(8372),i=a(6086),d=a(3792),s=document.getElementById("game"),u=document.getElementById("resolution"),p=document.getElementById("cache"),v=document.getElementById("timetaken"),m=s.getContext("2d"),h=c.vec2.fromValues(160,160),g=c.vec2.fromValues(250,130),f=c.vec2.fromValues(150,270),b={p1:h,p2:g,p3:f,points:[h,g,f],e1:r.sub(g,h),e2:r.sub(f,g),e3:r.sub(h,f)};let w,y,M;b.center=r.avg(...b.points);const P=2*Math.PI,_=o.createRenderer((()=>{b.points.forEach((e=>{c.vec2.rotate(e,e,b.center,.01)})),b.e1=r.sub(b.p2,b.p1),b.e2=r.sub(b.p3,b.p2),b.e3=r.sub(b.p1,b.p3),y&&M&&(()=>{m.clearRect(0,0,s.width,s.height);const e=(y.width-1)/(w-1),t=(y.height-1)/(w-1),a=Date.now(),n=w-1,c=i.clamp(Math.round(b.p1[0]/e),0,n),o=i.clamp(Math.round(b.p1[1]/t),0,n),r=i.clamp(Math.round(b.p2[0]/e),0,n),l=i.clamp(Math.round(b.p2[1]/t),0,n),d=i.clamp(Math.round(b.p3[0]/e),0,n),u=i.clamp(Math.round(b.p3[1]/t),0,n),p=u+w*(d+w*(l+w*(r+w*(o+w*c)))),h=M.data.slice(4*p,4*(p+1));v.innerText=Date.now()-a+" ms",m.putImageData(y,0,0);for(let a=0;a<y.width;a+=e)for(let e=0;e<y.height;e+=t)m.fillStyle="yellow",m.beginPath(),m.arc(a,e,4,0,P),m.fill();m.lineWidth=1,m.strokeStyle="red",m.beginPath(),m.moveTo(c*e,o*t),m.lineTo(r*e,l*t),m.lineTo(d*e,u*t),m.closePath(),m.stroke(),m.lineWidth=1,m.strokeStyle="black",m.fillStyle=`rgba(${Math.floor(h[0])}, ${Math.floor(h[1])}, ${Math.floor(h[2])}, ${Math.floor(h[3])})`,m.beginPath(),m.moveTo(b.p1[0],b.p1[1]),m.lineTo(b.p2[0],b.p2[1]),m.lineTo(b.p3[0],b.p3[1]),m.closePath(),m.fill(),m.stroke()})()}),(()=>_()));s.onwheel=function(e){const t=.1*Math.sign(e.deltaY);return c.vec2.add(b.p1,b.p1,r.scale(r.sub(b.p1,b.center),t)),c.vec2.add(b.p2,b.p2,r.scale(r.sub(b.p2,b.center),t)),c.vec2.add(b.p3,b.p3,r.scale(r.sub(b.p3,b.center),t)),!1},s.onmousemove=e=>{const t=s.getBoundingClientRect(),a=c.vec2.fromValues(e.pageX-t.left-document.documentElement.scrollLeft,e.pageY-t.top-document.documentElement.scrollTop),n=r.sub(a,b.center);c.vec2.add(b.p1,b.p1,n),c.vec2.add(b.p2,b.p2,n),c.vec2.add(b.p3,b.p3,n),b.center=a,_()};const I=()=>n(void 0,void 0,void 0,(function*(){w=parseInt(u.value,10);const e=`media/cache/photo_${w}.png`,[t,a]=yield Promise.all([d.loadImage("media/photo.png"),d.loadImage(e)]);p.src=e,y=l.getImageData(t),M=l.getImageData(a),_()}));I(),u.onchange=I},7787:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.createRenderer=void 0,t.createRenderer=(e,t)=>{let a=!1;return()=>{a||(a=!0,requestAnimationFrame((()=>{e(),a=!1,null==t||t()})))}}},4669:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.inRange=t.avg=t.max2=t.min2=t.toPrecision2=t.lerp2=t.normalize=t.length=t.dot=t.sign=t.abs=t.ceil=t.floor=t.sub=t.adds=t.add=t.divide=t.multiply=t.scale=t.equals=t.determinant2=t.clamp2=void 0;const n=a(887);t.clamp2=(e,t,a)=>{const c=n.vec2.clone(e);return n.vec2.min(c,c,a),n.vec2.max(c,c,t),c},t.determinant2=(e,t)=>e[0]*t[1]-e[1]*t[0],t.equals=n.vec2.equals,t.scale=(e,t)=>n.vec2.scale(n.vec2.create(),e,t),t.multiply=(e,t)=>n.vec2.multiply(n.vec2.create(),e,t),t.divide=(e,t)=>n.vec2.divide(n.vec2.create(),e,t),t.add=(e,t)=>n.vec2.add(n.vec2.create(),e,t),t.adds=(e,t)=>n.vec2.fromValues(e[0]+t,e[1]+t),t.sub=(e,t)=>n.vec2.sub(n.vec2.create(),e,t),t.floor=e=>n.vec2.floor(n.vec2.create(),e),t.ceil=e=>n.vec2.ceil(n.vec2.create(),e),t.abs=e=>n.vec2.fromValues(Math.abs(e[0]),Math.abs(e[1])),t.sign=e=>n.vec2.fromValues(Math.sign(e[0]),Math.sign(e[1])),t.dot=(e,t)=>n.vec2.dot(e,t),t.length=e=>n.vec2.length(e),t.normalize=e=>t.scale(e,1/t.length(e)),t.lerp2=(e,t,a)=>n.vec2.lerp(n.vec2.create(),e,t,a),t.toPrecision2=(e,t)=>(e[0]=parseFloat(e[0].toPrecision(t)),e[1]=parseFloat(e[1].toPrecision(t)),e),t.min2=(...e)=>{const[t,...a]=e,c=n.vec2.clone(t);return a.forEach((e=>{n.vec2.min(c,c,e)})),c},t.max2=(...e)=>{const[t,...a]=e,c=n.vec2.clone(t);return a.forEach((e=>{n.vec2.max(c,c,e)})),c},t.avg=(...e)=>{const t=n.vec2.create();return e.length&&(e.forEach((e=>{n.vec2.add(t,t,e)})),n.vec2.scale(t,t,1/e.length)),t},t.inRange=(e,t,a)=>!(e[0]>a[0]||e[0]<t[0]||e[1]>a[1]||e[1]<t[1])},6086:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.clamp=void 0,t.clamp=(e,t,a)=>Math.max(Math.min(e,a),t)},8372:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.getImageData=void 0,t.getImageData=e=>{const t=document.createElement("canvas");t.width=e.width,t.height=e.height;const a=t.getContext("2d");if(!a)throw new Error("Could not create canvas to extract image data");return a.clearRect(0,0,t.width,t.height),a.drawImage(e,0,0),a.getImageData(0,0,t.width,t.height)}},3792:function(e,t){var a=this&&this.__awaiter||function(e,t,a,n){return new(a||(a=Promise))((function(c,o){function r(e){try{i(n.next(e))}catch(e){o(e)}}function l(e){try{i(n.throw(e))}catch(e){o(e)}}function i(e){var t;e.done?c(e.value):(t=e.value,t instanceof a?t:new a((function(e){e(t)}))).then(r,l)}i((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.loadImage=void 0,t.loadImage=e=>a(void 0,void 0,void 0,(function*(){const t=new Image;return new Promise(((a,n)=>{t.onload=()=>{a(t)},t.onerror=e=>{n(e)},t.src=e}))}))}},e=>{e(e.s=673)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,