(()=>{"use strict";var e={89:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.aabb=void 0,t.aabb=e=>{const t=e[0],a={x:t.x,y:t.y},o={x:t.x,y:t.y};for(let t=1;t<e.length;t++){const n=e[t];a.x=Math.min(a.x,n.x),a.y=Math.min(a.y,n.y),o.x=Math.max(o.x,n.x),o.y=Math.max(o.y,n.y)}return{min:a,max:o}}},975:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setPixel=t.getPixel=void 0,t.getPixel=(e,t,a)=>{const o=4*(e.width*Math.floor(a)+Math.floor(t));return e.data.slice(o,o+4)},t.setPixel=(e,t,a,o)=>{e.data.set(o,4*(Math.floor(a)*e.width+Math.floor(t)))}},787:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.createRenderer=void 0,t.createRenderer=(e,t)=>{let a=!1;return()=>{a||(a=!0,requestAnimationFrame((()=>{e(),a=!1,null==t||t()})))}}},562:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.getTriangleCoverage=void 0;const o=a(89),n=a(558),r=a(923),i=a(345),l=a(848),x=a(78),s=a(586),y=a(62),d=a(27),m=a(975);t.getTriangleCoverage=(e,t)=>{const a=[0,0,0,0],c=o.aabb(t.points);l.rasterizeTriangle(t.points,{pos:{x:0,y:0},cellSize:{x:1,y:1},maxSteps:1e5,min:i.floor(c.min),max:i.ceil(c.max)},(o=>{const i={min:{x:o.x,y:o.y},size:{x:1,y:1},max:{x:o.x+1,y:o.y+1}},l=n.intersectCellTriangle(t,i),y=s.clamp(Number(r.polygonArea(l).toFixed(5)),0,1),c=m.getPixel(e,o.x,o.y);x.add4Mutate(a,d.scale4Mutate(c,y))}),(t=>{const o=m.getPixel(e,t.x,t.y);x.add4Mutate(a,o)}));const u=Number(r.polygonArea(t.points).toFixed(5));return d.scale4Mutate(a,1/u),y.floor4Mutate(a)}},558:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.intersectCellTriangle=void 0;const o=a(345),n=a(857);t.intersectCellTriangle=(e,t)=>{const a=[],r=o.timeAtPos(e.p1.x,e.e1.x,t.min.x),i=o.timeAtPos(e.p1.x,e.e1.x,t.max.x),l=o.timeAtPos(e.p1.y,e.e1.y,t.min.y),x=o.timeAtPos(e.p1.y,e.e1.y,t.max.y);a.push(...n.sort(r,i,l,x).map((a=>o.clamp2(o.add(e.p1,o.scale(e.e1,a)),t.min,t.max))));const s=o.timeAtPos(e.p2.x,e.e2.x,t.min.x),y=o.timeAtPos(e.p2.x,e.e2.x,t.max.x),d=o.timeAtPos(e.p2.y,e.e2.y,t.min.y),m=o.timeAtPos(e.p2.y,e.e2.y,t.max.y);a.push(...n.sort(s,y,d,m).map((a=>o.clamp2(o.add(e.p2,o.scale(e.e2,a)),t.min,t.max))));const c=o.timeAtPos(e.p3.x,e.e3.x,t.min.x),u=o.timeAtPos(e.p3.x,e.e3.x,t.max.x),p=o.timeAtPos(e.p3.y,e.e3.y,t.min.y),h=o.timeAtPos(e.p3.y,e.e3.y,t.max.y);return a.push(...n.sort(c,u,p,h).map((a=>o.clamp2(o.add(e.p3,o.scale(e.e3,a)),t.min,t.max)))),a}},923:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.polygonArea=t.polygonAreaSigned=void 0;const o=a(345);t.polygonAreaSigned=e=>{if(!e.length)return 0;const t=e.length-1;let a=0;for(let n=0;n<t;n++)a+=o.determinant2(e[n],e[n+1]);return a+=o.determinant2(e[t],e[0]),a/2},t.polygonArea=e=>Math.abs(t.polygonAreaSigned(e))},345:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.inRange=t.avg=t.max2=t.min2=t.toPrecision2=t.addMutate=t.lerp2=t.lerp=t.normalize=t.length=t.equal=t.dot=t.sign=t.abs=t.ceil=t.floor=t.sub=t.adds=t.add=t.divide=t.multiply=t.scale=t.equals=t.determinant2=t.timeAtPos=t.clamp2=t.clamp=void 0,t.clamp=(e,t,a)=>Math.max(Math.min(e,a),t),t.clamp2=(e,a,o)=>({x:t.clamp(e.x,a.x,o.x),y:t.clamp(e.y,a.y,o.y)}),t.timeAtPos=(e,a,o)=>a?t.clamp((o-e)/a,0,1):0,t.determinant2=(e,t)=>e.x*t.y-e.y*t.x,t.equals=(e,t)=>e.x===t.x&&e.y===t.y,t.scale=(e,t)=>({x:t*e.x,y:t*e.y}),t.multiply=(e,t)=>({x:t.x*e.x,y:t.y*e.y}),t.divide=(e,t)=>({x:e.x/t.x,y:e.y/t.y}),t.add=(e,t)=>({x:e.x+t.x,y:e.y+t.y}),t.adds=(e,t)=>({x:e.x+t,y:e.y+t}),t.sub=(e,t)=>({x:e.x-t.x,y:e.y-t.y}),t.floor=e=>({x:Math.floor(e.x),y:Math.floor(e.y)}),t.ceil=e=>({x:Math.ceil(e.x),y:Math.ceil(e.y)}),t.abs=e=>({x:Math.abs(e.x),y:Math.abs(e.y)}),t.sign=e=>({x:Math.sign(e.x),y:Math.sign(e.y)}),t.dot=(e,t)=>e.x*t.x+e.y*t.y,t.equal=(e,t)=>e.x==t.x&&e.y==t.y,t.length=e=>Math.sqrt(e.x*e.x+e.y*e.y),t.normalize=e=>t.scale(e,1/t.length(e)),t.lerp=(e,t,a)=>e*(1-a)+t*a,t.lerp2=(e,a,o)=>({x:t.lerp(e.x,a.x,o),y:t.lerp(e.y,a.y,o)}),t.addMutate=(e,t)=>{e.x+=t.x,e.y+=t.y},t.toPrecision2=(e,t)=>(e.x=parseFloat(e.x.toPrecision(t)),e.y=parseFloat(e.y.toPrecision(t)),e),t.min2=(e,...t)=>{const a={x:e.x,y:e.y};return t.forEach((e=>{a.x=Math.min(a.x,e.x),a.y=Math.min(a.y,e.y)})),a},t.max2=(e,...t)=>{const a={x:e.x,y:e.y};return t.forEach((e=>{a.x=Math.max(a.x,e.x),a.y=Math.max(a.y,e.y)})),a},t.avg=e=>{const t=e.reduce(((e,t)=>(e.x+=t.x,e.y+=t.y,e)),{x:0,y:0});return t.x/=e.length,t.y/=e.length,t},t.inRange=(e,t,a)=>!(e.x>a.x||e.x<t.x||e.y>a.y||e.y<t.y)},857:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.sort=void 0,t.sort=(e,t,a,o)=>{const n=Math.min(e,t),r=Math.max(e,t),i=Math.min(a,o),l=Math.max(a,o),x=Math.min(r,i),s=Math.max(r,i),y=Math.max(n,x),d=Math.min(s,l);return[Math.min(n,x),Math.min(y,d),Math.max(y,d),Math.max(s,l)]}},314:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.dda=void 0;const o=a(345);t.dda=(e,t,a,n)=>{const r=o.normalize(o.sub(t,e)),i=o.sub(e,a.pos),l=o.floor(o.divide(i,a.cellSize)),x=o.abs(o.divide(a.cellSize,r)),s=o.sign(r),y=o.multiply(a.cellSize,o.add(l,o.sign(o.adds(s,1)))),d=o.divide(o.sub(y,i),r),m=o.floor(o.divide(o.sub(t,a.pos),a.cellSize));for(let e=0;e<a.maxSteps;e++){if(a.min&&a.max&&!o.inRange(l,a.min,a.max))return!0;if(!1===n(l))return!1;if(o.equal(m,l))return!0;d.x<d.y?(d.x+=x.x,l.x+=s.x):(d.y+=x.y,l.y+=s.y)}return!0}},848:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.rasterizeTriangle=void 0;const o=a(314);t.rasterizeTriangle=(e,t,a,n)=>{const r=[{from:e[0],to:e[1]},{from:e[1],to:e[2]},{from:e[2],to:e[0]}],i={},l=new Set;r.forEach((e=>{o.dda(e.from,e.to,t,(e=>{let t=i[e.y];const o=e.x+","+e.y;l.has(o)||(t?(t.min=Math.min(t.min,e.x),t.max=Math.max(t.max,e.x)):t={min:e.x,max:e.x},i[e.y]=t,a(e),l.add(o))}))}));const x={x:0,y:0};for(let e in i)if(i.hasOwnProperty(e)){x.y=parseInt(e,10);const t=i[e];for(x.x=t.min+1;x.x<t.max;x.x++)l.has(x.x+","+x.y)||n(x)}return i}},78:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.add4Mutate=void 0,t.add4Mutate=(e,t)=>(e[0]+=t[0],e[1]+=t[1],e[2]+=t[2],e[3]+=t[3],e)},586:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.clamp=void 0,t.clamp=(e,t,a)=>Math.max(Math.min(e,a),t)},62:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.floor4Mutate=void 0,t.floor4Mutate=e=>(e[0]=Math.floor(e[0]),e[1]=Math.floor(e[1]),e[2]=Math.floor(e[2]),e[3]=Math.floor(e[3]),e)},372:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.getImageData=void 0,t.getImageData=e=>{const t=document.createElement("canvas");t.width=e.width,t.height=e.height;const a=t.getContext("2d");if(!a)throw new Error("Could not create canvas to extract image data");return a.clearRect(0,0,t.width,t.height),a.drawImage(e,0,0),a.getImageData(0,0,t.width,t.height)}},27:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.scale4Mutate=void 0,t.scale4Mutate=(e,t)=>(e[0]*=t,e[1]*=t,e[2]*=t,e[3]*=t,e)}},t={};function a(o){var n=t[o];if(void 0!==n)return n.exports;var r=t[o]={exports:{}};return e[o](r,r.exports,a),r.exports}(()=>{const e=a(787),t=a(562),o=a(345),n=a(372),r=document.getElementById("game"),i=document.getElementById("chooseimage"),l=document.getElementById("timetaken"),x=r.getContext("2d"),s={x:160,y:160},y={x:150,y:270},d={x:250,y:130},m={p1:s,p2:y,p3:d,points:[s,y,d],e1:o.sub(y,s),e2:o.sub(d,y),e3:o.sub(s,d)};m.center=o.avg(m.points);const c=Math.cos(.01),u=Math.sin(.01),p=()=>{const a=new Image;let s;a.onload=()=>{s=n.getImageData(a),y()},a.src=i.value;const y=e.createRenderer((()=>{m.points.forEach((e=>{const t=e.x-m.center.x,a=e.y-m.center.y;e.x=m.center.x+t*c-a*u,e.y=m.center.y+t*u+a*c})),m.e1=o.sub(m.p2,m.p1),m.e2=o.sub(m.p3,m.p2),m.e3=o.sub(m.p1,m.p3),(e=>{x.clearRect(0,0,r.width,r.height),x.putImageData(e,0,0);const a=Date.now(),o=t.getTriangleCoverage(e,m);l.innerText=Date.now()-a+" ms",x.lineWidth=1,x.strokeStyle="black",x.fillStyle=`rgba(${Math.floor(o[0])}, ${Math.floor(o[1])}, ${Math.floor(o[2])}, ${Math.floor(o[3])})`,x.beginPath(),x.moveTo(m.p1.x,m.p1.y),x.lineTo(m.p2.x,m.p2.y),x.lineTo(m.p3.x,m.p3.y),x.closePath(),x.fill(),x.stroke()})(s)}),(()=>y()));r.onwheel=function(e){const t=.1*Math.sign(e.deltaY);return o.addMutate(m.p1,o.scale(o.sub(m.p1,m.center),t)),o.addMutate(m.p2,o.scale(o.sub(m.p2,m.center),t)),o.addMutate(m.p3,o.scale(o.sub(m.p3,m.center),t)),!1},r.onmousemove=e=>{const t=r.getBoundingClientRect(),a={x:e.pageX-t.left-document.documentElement.scrollLeft,y:e.pageY-t.top-document.documentElement.scrollTop},n=o.sub(a,m.center);o.addMutate(m.p1,n),o.addMutate(m.p2,n),o.addMutate(m.p3,n),m.center=a,y()}};i.onchange=p,p()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,