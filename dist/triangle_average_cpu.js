"use strict";(self.webpackChunksampling_coverage=self.webpackChunksampling_coverage||[]).push([[336],{6966:(e,t,a)=>{const o=a(887),n=a(7787),r=a(9202),l=a(4669),c=a(8372),i=document.getElementById("game"),s=document.getElementById("chooseimage"),p=document.getElementById("timetaken"),d=i.getContext("2d"),m=o.vec2.fromValues(160,160),u=o.vec2.fromValues(150,270),v=o.vec2.fromValues(250,130),g={p1:m,p2:u,p3:v,points:[m,u,v],e1:(0,l.sub)(u,m),e2:(0,l.sub)(v,u),e3:(0,l.sub)(m,v)};g.center=(0,l.avg)(...g.points);const h=()=>{const e=new Image;let t;e.onload=()=>{t=(0,c.getImageData)(e),a()},e.src=s.value;const a=(0,n.createRenderer)((()=>{g.points.forEach((e=>{o.vec2.rotate(e,e,g.center,.01)})),g.e1=(0,l.sub)(g.p2,g.p1),g.e2=(0,l.sub)(g.p3,g.p2),g.e3=(0,l.sub)(g.p1,g.p3),(e=>{d.clearRect(0,0,i.width,i.height),d.putImageData(e,0,0);const t=Date.now(),a=(0,r.triangleCoverage)(e,g);p.innerText=Date.now()-t+" ms",d.lineWidth=1,d.strokeStyle="black",d.fillStyle=`rgba(${Math.floor(a[0])}, ${Math.floor(a[1])}, ${Math.floor(a[2])}, ${Math.floor(a[3])})`,d.beginPath(),d.moveTo(g.p1[0],g.p1[1]),d.lineTo(g.p2[0],g.p2[1]),d.lineTo(g.p3[0],g.p3[1]),d.closePath(),d.fill(),d.stroke()})(t)}),(()=>a()));i.onwheel=function(e){const t=.1*Math.sign(e.deltaY);return o.vec2.add(g.p1,g.p1,(0,l.scale)((0,l.sub)(g.p1,g.center),t)),o.vec2.add(g.p2,g.p2,(0,l.scale)((0,l.sub)(g.p2,g.center),t)),o.vec2.add(g.p3,g.p3,(0,l.scale)((0,l.sub)(g.p3,g.center),t)),!1},i.onmousemove=e=>{const t=i.getBoundingClientRect(),n=o.vec2.fromValues(e.pageX-t.left-document.documentElement.scrollLeft,e.pageY-t.top-document.documentElement.scrollTop),r=(0,l.sub)(n,g.center);o.vec2.add(g.p1,g.p1,r),o.vec2.add(g.p2,g.p2,r),o.vec2.add(g.p3,g.p3,r),g.center=n,a()}};s.onchange=h,h()},975:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setPixel=t.getPixel=void 0,t.getPixel=(e,t,a)=>{const o=4*(e.width*Math.floor(a)+Math.floor(t));return e.data.slice(o,o+4)},t.setPixel=(e,t,a,o)=>{e.data.set(o,4*(Math.floor(a)*e.width+Math.floor(t)))}},7787:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.createRenderer=void 0,t.createRenderer=(e,t)=>{let a=!1;return()=>{a||(a=!0,requestAnimationFrame((()=>{e(),a=!1,null==t||t()})))}}},6558:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.intersectCellTriangle=void 0;const o=a(4669),n=a(3345);t.intersectCellTriangle=(e,t)=>{const a=[],r=[(0,n.timeAtPos)(e.p1[0],e.e1[0],t.min[0]),(0,n.timeAtPos)(e.p1[0],e.e1[0],t.max[0]),(0,n.timeAtPos)(e.p1[1],e.e1[1],t.min[1]),(0,n.timeAtPos)(e.p1[1],e.e1[1],t.max[1])];r.sort(),a.push(...r.map((a=>(0,o.clamp2)((0,o.add)(e.p1,(0,o.scale)(e.e1,a)),t.min,t.max))));const l=[(0,n.timeAtPos)(e.p2[0],e.e2[0],t.min[0]),(0,n.timeAtPos)(e.p2[0],e.e2[0],t.max[0]),(0,n.timeAtPos)(e.p2[1],e.e2[1],t.min[1]),(0,n.timeAtPos)(e.p2[1],e.e2[1],t.max[1])];l.sort(),a.push(...l.map((a=>(0,o.clamp2)((0,o.add)(e.p2,(0,o.scale)(e.e2,a)),t.min,t.max))));const c=[(0,n.timeAtPos)(e.p3[0],e.e3[0],t.min[0]),(0,n.timeAtPos)(e.p3[0],e.e3[0],t.max[0]),(0,n.timeAtPos)(e.p3[1],e.e3[1],t.min[1]),(0,n.timeAtPos)(e.p3[1],e.e3[1],t.max[1])];return c.sort(),a.push(...c.map((a=>(0,o.clamp2)((0,o.add)(e.p3,(0,o.scale)(e.e3,a)),t.min,t.max)))),a}},6923:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.polygonArea=t.polygonAreaSigned=void 0;const o=a(4669);t.polygonAreaSigned=e=>{if(!e.length)return 0;const t=e.length-1;let a=0;for(let n=0;n<t;n++)a+=(0,o.determinant2)(e[n],e[n+1]);return a+=(0,o.determinant2)(e[t],e[0]),a/2},t.polygonArea=e=>Math.abs((0,t.polygonAreaSigned)(e))},2841:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.getLineEquation=void 0;const o=a(4669);t.getLineEquation=e=>{const t=(0,o.sub)(e.p2,e.p1),a=t[1]/t[0];return{gradient:a,intersect:e.p1[1]-e.p1[0]*a}}},2952:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.solveLineX=void 0,t.solveLineX=(e,t)=>0!=Math.abs(e.gradient)?(t-e.intersect)/e.gradient:-1},3345:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.lerp=t.timeAtPos=t.clamp=t.fract=t.negFract=t.EPSILON=void 0,t.EPSILON=1e-6,t.negFract=e=>1-e+Math.floor(e),t.fract=e=>e-Math.floor(e),t.clamp=(e,t,a)=>Math.max(Math.min(e,a),t),t.timeAtPos=(e,a,o)=>a?(0,t.clamp)((o-e)/a,0,1):0,t.lerp=(e,t,a)=>e*(1-a)+t*a},4669:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.inRange=t.avg=t.max2=t.min2=t.toPrecision2=t.lerp2=t.normalize=t.length=t.dot=t.sign=t.abs=t.ceil=t.floor=t.sub=t.adds=t.add=t.divide=t.multiply=t.scale=t.equals=t.determinant2=t.clamp2=void 0;const o=a(887);t.clamp2=(e,t,a)=>{const n=o.vec2.clone(e);return o.vec2.min(n,n,a),o.vec2.max(n,n,t),n},t.determinant2=(e,t)=>e[0]*t[1]-e[1]*t[0],t.equals=o.vec2.equals,t.scale=(e,t)=>o.vec2.scale(o.vec2.create(),e,t),t.multiply=(e,t)=>o.vec2.multiply(o.vec2.create(),e,t),t.divide=(e,t)=>o.vec2.divide(o.vec2.create(),e,t),t.add=(e,t)=>o.vec2.add(o.vec2.create(),e,t),t.adds=(e,t)=>o.vec2.fromValues(e[0]+t,e[1]+t),t.sub=(e,t)=>o.vec2.sub(o.vec2.create(),e,t),t.floor=e=>o.vec2.floor(o.vec2.create(),e),t.ceil=e=>o.vec2.ceil(o.vec2.create(),e),t.abs=e=>o.vec2.fromValues(Math.abs(e[0]),Math.abs(e[1])),t.sign=e=>o.vec2.fromValues(Math.sign(e[0]),Math.sign(e[1])),t.dot=(e,t)=>o.vec2.dot(e,t),t.length=e=>o.vec2.length(e),t.normalize=e=>(0,t.scale)(e,1/(0,t.length)(e)),t.lerp2=(e,t,a)=>o.vec2.lerp(o.vec2.create(),e,t,a),t.toPrecision2=(e,t)=>(e[0]=parseFloat(e[0].toPrecision(t)),e[1]=parseFloat(e[1].toPrecision(t)),e),t.min2=(...e)=>{const[t,...a]=e,n=o.vec2.clone(t);return a.forEach((e=>{o.vec2.min(n,n,e)})),n},t.max2=(...e)=>{const[t,...a]=e,n=o.vec2.clone(t);return a.forEach((e=>{o.vec2.max(n,n,e)})),n},t.avg=(...e)=>{const t=o.vec2.create();return e.length&&(e.forEach((e=>{o.vec2.add(t,t,e)})),o.vec2.scale(t,t,1/e.length)),t},t.inRange=(e,t,a)=>!(e[0]>a[0]||e[0]<t[0]||e[1]>a[1]||e[1]<t[1])},2916:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.rasterise=void 0;const o=a(887),n=a(3345),r=a(2952),l=a(4669),c=a(2841),i=e=>{let t,a;return e.p1[1]<e.p2[1]?(t=e.p1,a=e.p2):e.p1[1]>e.p2[1]?(t=e.p2,a=e.p1):e.p1[0]<e.p2[0]?(t=e.p1,a=e.p2):(t=e.p2,a=e.p1),{pStart:t,pEnd:a,xRange:o.vec2.fromValues(Math.min(e.p1[0],e.p2[0]),Math.max(e.p1[0],e.p2[0])),equation:(0,c.getLineEquation)(e)}};t.rasterise=(e,t)=>{const a=[{p1:e[0],p2:e[1]},{p1:e[1],p2:e[2]},{p1:e[2],p2:e[0]}],o=(0,l.min2)(...e),c=(0,l.max2)(...e),s=[i(a[0]),i(a[1]),i(a[2])];if(c[1]-o[1]<1)return void t(o[0],c[0],o[1],!1);let p=Math.floor(o[1]);for(let e=p+1;e<=Math.ceil(c[1]);e++){const a=[-1,-1,-1,-1];for(let t=0;t<3;t++){const o=s[t];if(o.pEnd[1]>=p&&o.pStart[1]<e){let t=(0,r.solveLineX)(o.equation,p);t=t>=0?(0,n.clamp)(t,o.xRange[0],o.xRange[1]):o.pStart[0];let l=(0,r.solveLineX)(o.equation,e);l=l>=0?(0,n.clamp)(l,o.xRange[0],o.xRange[1]):o.pEnd[0];const c=[Math.min(t,l),Math.max(t,l)];a[0]<0?(a[0]=c[0],a[1]=c[1]):c[0]<=a[1]+1&&c[0]>=a[0]-1||c[1]<=a[1]+1&&c[1]>=a[0]-1?(a[0]=Math.min(a[0],c[0]),a[1]=Math.max(a[1],c[1])):a[2]<0?c[0]>a[1]?(a[2]=c[0],a[3]=c[1]):(a[2]=a[0],a[3]=a[1],a[0]=c[0],a[1]=c[1]):(a[2]=Math.min(a[2],c[0]),a[3]=Math.max(a[3],c[1]))}}t(a[0],a[1],p,!1),a[2]>a[1]&&(t(a[1]+1,a[2]-1,p,!0),t(a[2],a[3],p,!1)),p=e}}},9202:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.triangleCoverage=void 0;const o=a(6558),n=a(6923),r=a(2916),l=a(9078),c=a(5062),i=a(8027),s=a(975),p=a(3345);t.triangleCoverage=(e,t)=>{const a=[0,0,0,0],d=Number((0,n.polygonArea)(t.points).toFixed(5));if(d<1){let o=0;return(0,r.rasterise)(t.points,((t,n,r)=>{for(let c=t;c<=n;c++)(0,l.add4Mutate)(a,(0,s.getPixel)(e,c,r)),o++})),(0,c.floor4Mutate)((0,i.scale4Mutate)(a,1/o))}return(0,r.rasterise)(t.points,((r,c,d,m)=>{if(m)for(let t=r;t<=c;t++)(0,l.add4Mutate)(a,(0,s.getPixel)(e,t,d));else{const m=d+1;for(let u=r;u<=c;u++){const r=(0,o.intersectCellTriangle)(t,{min:[u,d],max:[u+1,m]}),c=(0,p.clamp)(Number((0,n.polygonArea)(r).toFixed(5)),0,1),v=(0,s.getPixel)(e,u,d);(0,l.add4Mutate)(a,(0,i.scale4Mutate)(v,c))}}})),(0,c.floor4Mutate)((0,i.scale4Mutate)(a,1/d))}},9078:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.add4Mutate=void 0,t.add4Mutate=(e,t)=>(e[0]+=t[0],e[1]+=t[1],e[2]+=t[2],e[3]+=t[3],e)},5062:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.floor4Mutate=void 0,t.floor4Mutate=e=>(e[0]=Math.floor(e[0]),e[1]=Math.floor(e[1]),e[2]=Math.floor(e[2]),e[3]=Math.floor(e[3]),e)},8372:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.getImageData=void 0,t.getImageData=e=>{const t=document.createElement("canvas");t.width=e.width,t.height=e.height;const a=t.getContext("2d");if(!a)throw new Error("Could not create canvas to extract image data");return a.clearRect(0,0,t.width,t.height),a.drawImage(e,0,0),a.getImageData(0,0,t.width,t.height)}},8027:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.scale4Mutate=void 0,t.scale4Mutate=(e,t)=>(e[0]*=t,e[1]*=t,e[2]*=t,e[3]*=t,e)}},e=>{e(e.s=6966)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,