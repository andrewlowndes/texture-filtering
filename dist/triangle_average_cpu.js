"use strict";(self.webpackChunksampling_coverage=self.webpackChunksampling_coverage||[]).push([[336],{6966:(e,t,a)=>{const o=a(887),r=a(7787),n=a(1562),c=a(4669),l=a(8372),i=document.getElementById("game"),s=document.getElementById("chooseimage"),d=document.getElementById("timetaken"),m=i.getContext("2d"),u=o.vec2.fromValues(160,160),p=o.vec2.fromValues(150,270),v=o.vec2.fromValues(250,130),g={p1:u,p2:p,p3:v,points:[u,p,v],e1:c.sub(p,u),e2:c.sub(v,p),e3:c.sub(u,v)};g.center=c.avg(...g.points);const f=()=>{const e=new Image;let t;e.onload=()=>{t=l.getImageData(e),a()},e.src=s.value;const a=r.createRenderer((()=>{g.points.forEach((e=>{o.vec2.rotate(e,e,g.center,.01)})),g.e1=c.sub(g.p2,g.p1),g.e2=c.sub(g.p3,g.p2),g.e3=c.sub(g.p1,g.p3),(e=>{m.clearRect(0,0,i.width,i.height),m.putImageData(e,0,0);const t=Date.now(),a=n.getTriangleCoverage(e,g);d.innerText=Date.now()-t+" ms",m.lineWidth=1,m.strokeStyle="black",m.fillStyle=`rgba(${Math.floor(a[0])}, ${Math.floor(a[1])}, ${Math.floor(a[2])}, ${Math.floor(a[3])})`,m.beginPath(),m.moveTo(g.p1[0],g.p1[1]),m.lineTo(g.p2[0],g.p2[1]),m.lineTo(g.p3[0],g.p3[1]),m.closePath(),m.fill(),m.stroke()})(t)}),(()=>a()));i.onwheel=function(e){const t=.1*Math.sign(e.deltaY);return o.vec2.add(g.p1,g.p1,c.scale(c.sub(g.p1,g.center),t)),o.vec2.add(g.p2,g.p2,c.scale(c.sub(g.p2,g.center),t)),o.vec2.add(g.p3,g.p3,c.scale(c.sub(g.p3,g.center),t)),!1},i.onmousemove=e=>{const t=i.getBoundingClientRect(),r=o.vec2.fromValues(e.pageX-t.left-document.documentElement.scrollLeft,e.pageY-t.top-document.documentElement.scrollTop),n=c.sub(r,g.center);o.vec2.add(g.p1,g.p1,n),o.vec2.add(g.p2,g.p2,n),o.vec2.add(g.p3,g.p3,n),g.center=r,a()}};s.onchange=f,f()},975:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setPixel=t.getPixel=void 0,t.getPixel=(e,t,a)=>{const o=4*(e.width*Math.floor(a)+Math.floor(t));return e.data.slice(o,o+4)},t.setPixel=(e,t,a,o)=>{e.data.set(o,4*(Math.floor(a)*e.width+Math.floor(t)))}},7787:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.createRenderer=void 0,t.createRenderer=(e,t)=>{let a=!1;return()=>{a||(a=!0,requestAnimationFrame((()=>{e(),a=!1,null==t||t()})))}}},1562:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.getTriangleCoverage=void 0;const o=a(887),r=a(6558),n=a(6923),c=a(7848),l=a(9078),i=a(6086),s=a(5062),d=a(8027),m=a(975),u=a(4669);t.getTriangleCoverage=(e,t)=>{const a=[0,0,0,0];c.rasterizeTriangle(t.points,{pos:o.vec2.create(),cellSize:o.vec2.fromValues(1,1)},(c=>{const s={min:c,size:o.vec2.fromValues(1,1),max:u.adds(c,1)},p=r.intersectCellTriangle(t,s),v=i.clamp(Number(n.polygonArea(p).toFixed(5)),0,1),g=m.getPixel(e,c[0],c[1]);l.add4Mutate(a,d.scale4Mutate(g,v))}),(t=>{const o=m.getPixel(e,t[0],t[1]);l.add4Mutate(a,o)}));const p=Number(n.polygonArea(t.points).toFixed(5));return d.scale4Mutate(a,1/p),s.floor4Mutate(a)}},6558:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.intersectCellTriangle=void 0;const o=a(4669),r=a(3345);t.intersectCellTriangle=(e,t)=>{const a=[],n=[r.timeAtPos(e.p1[0],e.e1[0],t.min[0]),r.timeAtPos(e.p1[0],e.e1[0],t.max[0]),r.timeAtPos(e.p1[1],e.e1[1],t.min[1]),r.timeAtPos(e.p1[1],e.e1[1],t.max[1])];n.sort(),a.push(...n.map((a=>o.clamp2(o.add(e.p1,o.scale(e.e1,a)),t.min,t.max))));const c=[r.timeAtPos(e.p2[0],e.e2[0],t.min[0]),r.timeAtPos(e.p2[0],e.e2[0],t.max[0]),r.timeAtPos(e.p2[1],e.e2[1],t.min[1]),r.timeAtPos(e.p2[1],e.e2[1],t.max[1])];c.sort(),a.push(...c.map((a=>o.clamp2(o.add(e.p2,o.scale(e.e2,a)),t.min,t.max))));const l=[r.timeAtPos(e.p3[0],e.e3[0],t.min[0]),r.timeAtPos(e.p3[0],e.e3[0],t.max[0]),r.timeAtPos(e.p3[1],e.e3[1],t.min[1]),r.timeAtPos(e.p3[1],e.e3[1],t.max[1])];return l.sort(),a.push(...l.map((a=>o.clamp2(o.add(e.p3,o.scale(e.e3,a)),t.min,t.max)))),a}},6923:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.polygonArea=t.polygonAreaSigned=void 0;const o=a(4669);t.polygonAreaSigned=e=>{if(!e.length)return 0;const t=e.length-1;let a=0;for(let r=0;r<t;r++)a+=o.determinant2(e[r],e[r+1]);return a+=o.determinant2(e[t],e[0]),a/2},t.polygonArea=e=>Math.abs(t.polygonAreaSigned(e))},3345:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.lerp=t.timeAtPos=t.clamp=t.fract=t.negFract=t.EPSILON=void 0,t.EPSILON=1e-6,t.negFract=e=>1-e+Math.floor(e),t.fract=e=>e-Math.floor(e),t.clamp=(e,t,a)=>Math.max(Math.min(e,a),t),t.timeAtPos=(e,a,o)=>a?t.clamp((o-e)/a,0,1):0,t.lerp=(e,t,a)=>e*(1-a)+t*a},4669:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.inRange=t.avg=t.max2=t.min2=t.toPrecision2=t.lerp2=t.normalize=t.length=t.dot=t.sign=t.abs=t.ceil=t.floor=t.sub=t.adds=t.add=t.divide=t.multiply=t.scale=t.equals=t.determinant2=t.clamp2=void 0;const o=a(887);t.clamp2=(e,t,a)=>{const r=o.vec2.clone(e);return o.vec2.min(r,r,a),o.vec2.max(r,r,t),r},t.determinant2=(e,t)=>e[0]*t[1]-e[1]*t[0],t.equals=o.vec2.equals,t.scale=(e,t)=>o.vec2.scale(o.vec2.create(),e,t),t.multiply=(e,t)=>o.vec2.multiply(o.vec2.create(),e,t),t.divide=(e,t)=>o.vec2.divide(o.vec2.create(),e,t),t.add=(e,t)=>o.vec2.add(o.vec2.create(),e,t),t.adds=(e,t)=>o.vec2.fromValues(e[0]+t,e[1]+t),t.sub=(e,t)=>o.vec2.sub(o.vec2.create(),e,t),t.floor=e=>o.vec2.floor(o.vec2.create(),e),t.ceil=e=>o.vec2.ceil(o.vec2.create(),e),t.abs=e=>o.vec2.fromValues(Math.abs(e[0]),Math.abs(e[1])),t.sign=e=>o.vec2.fromValues(Math.sign(e[0]),Math.sign(e[1])),t.dot=(e,t)=>o.vec2.dot(e,t),t.length=e=>o.vec2.length(e),t.normalize=e=>t.scale(e,1/t.length(e)),t.lerp2=(e,t,a)=>o.vec2.lerp(o.vec2.create(),e,t,a),t.toPrecision2=(e,t)=>(e[0]=parseFloat(e[0].toPrecision(t)),e[1]=parseFloat(e[1].toPrecision(t)),e),t.min2=(...e)=>{const[t,...a]=e,r=o.vec2.clone(t);return a.forEach((e=>{o.vec2.min(r,r,e)})),r},t.max2=(...e)=>{const[t,...a]=e,r=o.vec2.clone(t);return a.forEach((e=>{o.vec2.max(r,r,e)})),r},t.avg=(...e)=>{const t=o.vec2.create();return e.length&&(e.forEach((e=>{o.vec2.add(t,t,e)})),o.vec2.scale(t,t,1/e.length)),t},t.inRange=(e,t,a)=>!(e[0]>a[0]||e[0]<t[0]||e[1]>a[1]||e[1]<t[1])},7848:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.rasterizeTriangle=void 0;const o=a(887),r=a(2264);t.rasterizeTriangle=(e,t,a,n)=>{const c=[{from:e[0],to:e[1]},{from:e[1],to:e[2]},{from:e[2],to:e[0]}],l={},i=new Set;c.forEach((e=>{r.traverse(e.from,e.to,t,(e=>{let t=l[e[1]];const o=e[0]+","+e[1];i.has(o)||(t?(t.min=Math.min(t.min,e[0]),t.max=Math.max(t.max,e[0])):t={min:e[0],max:e[0]},l[e[1]]=t,a(e),i.add(o))}))}));const s=o.vec2.create();for(let e in l)if(l.hasOwnProperty(e)){s[1]=parseInt(e,10);const t=l[e];for(s[0]=t.min+1;s[0]<t.max;s[0]++)i.has(s[0]+","+s[1])||n(s)}return l}},2264:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.traverse=void 0;const o=a(887),r=a(3345),n=a(4669);t.traverse=(e,t,a,c)=>{const l=n.sub(e,a.pos),i=n.sub(t,e),s=n.floor(n.divide(l,a.cellSize)),d=n.floor(n.divide(n.sub(t,a.pos),a.cellSize));if(Math.abs(i[1])<r.EPSILON){for(let e=Math.min(s[0],d[0]),t=Math.max(s[0],d[0]);e<=t;e++)if(s[0]=e,!1===c(s))return!1;return}if(Math.abs(i[0])<r.EPSILON){for(let e=Math.min(s[1],d[1]),t=Math.max(s[1],d[1]);e<=t;e++)if(s[1]=e,!1===c(s))return!1;return}const m=n.sign(i),u=n.multiply(n.divide(m,i),a.cellSize),p=n.divide(l,a.cellSize),v=o.vec2.fromValues(m[0]>0?u[0]*r.negFract(p[0]):u[0]*r.fract(p[0]),m[1]>0?u[1]*r.negFract(p[1]):u[1]*r.fract(p[1]));for(;;){if(!1===c(s))return!1;if(v[0]>1&&v[1]>1)return;v[0]<v[1]?(s[0]+=m[0],v[0]+=u[0]):(s[1]+=m[1],v[1]+=u[1])}}},9078:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.add4Mutate=void 0,t.add4Mutate=(e,t)=>(e[0]+=t[0],e[1]+=t[1],e[2]+=t[2],e[3]+=t[3],e)},6086:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.clamp=void 0,t.clamp=(e,t,a)=>Math.max(Math.min(e,a),t)},5062:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.floor4Mutate=void 0,t.floor4Mutate=e=>(e[0]=Math.floor(e[0]),e[1]=Math.floor(e[1]),e[2]=Math.floor(e[2]),e[3]=Math.floor(e[3]),e)},8372:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.getImageData=void 0,t.getImageData=e=>{const t=document.createElement("canvas");t.width=e.width,t.height=e.height;const a=t.getContext("2d");if(!a)throw new Error("Could not create canvas to extract image data");return a.clearRect(0,0,t.width,t.height),a.drawImage(e,0,0),a.getImageData(0,0,t.width,t.height)}},8027:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.scale4Mutate=void 0,t.scale4Mutate=(e,t)=>(e[0]*=t,e[1]*=t,e[2]*=t,e[3]*=t,e)}},e=>{e(e.s=6966)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,