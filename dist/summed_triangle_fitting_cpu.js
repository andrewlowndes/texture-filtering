"use strict";(self.webpackChunksampling_coverage=self.webpackChunksampling_coverage||[]).push([[909],{2695:function(e,t,a){var n=this&&this.__awaiter||function(e,t,a,n){return new(a||(a=Promise))((function(o,c){function r(e){try{i(n.next(e))}catch(e){c(e)}}function l(e){try{i(n.throw(e))}catch(e){c(e)}}function i(e){var t;e.done?o(e.value):(t=e.value,t instanceof a?t:new a((function(e){e(t)}))).then(r,l)}i((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0});const o=a(887),c=a(7787),r=a(4669),l=a(8372),i=a(3792),d=a(3345),s=a(9078),u=a(6923),p=a(8027),m=document.getElementById("game"),v=document.getElementById("resolution"),g=document.getElementById("cache"),h=document.getElementById("timetaken"),f=document.getElementById("chooseimage"),M=m.getContext("2d"),y=o.vec2.fromValues(160,160),b=o.vec2.fromValues(250,130),P=o.vec2.fromValues(150,270),w={p1:y,p2:b,p3:P,points:[y,b,P],e1:(0,r.sub)(b,y),e2:(0,r.sub)(P,b),e3:(0,r.sub)(y,P)};let _,I,E;w.center=(0,r.avg)(...w.points);const x=2*Math.PI,A=(0,c.createRenderer)((()=>{w.points.forEach((e=>{o.vec2.rotate(e,e,w.center,.01)})),w.e1=(0,r.sub)(w.p2,w.p1),w.e2=(0,r.sub)(w.p3,w.p2),w.e3=(0,r.sub)(w.p1,w.p3),I&&E&&(()=>{M.clearRect(0,0,m.width,m.height);const e=(I.width-1)/(_-1),t=(I.height-1)/(_-1),a=Date.now(),n=_-1,o=[(0,d.clamp)(Math.round(w.p1[0]/e),0,n),(0,d.clamp)(Math.round(w.p1[1]/t),0,n)],c=[(0,d.clamp)(Math.round(w.p2[0]/e),0,n),(0,d.clamp)(Math.round(w.p2[1]/t),0,n)],r=[(0,d.clamp)(Math.round(w.p3[0]/e),0,n),(0,d.clamp)(Math.round(w.p3[1]/t),0,n)],l=(e,t)=>{const a=4*(t[1]+_*(t[0]+_*(e[1]+_*e[0])));return Array.from(E.data.slice(a,a+4))},i=[0,0],v=[0,0,0,0];(0,s.add4Mutate)(v,(0,p.scale4Mutate)(l(o,c),(0,u.polygonAreaSigned)([i,w.p1,w.p2]))),(0,s.add4Mutate)(v,(0,p.scale4Mutate)(l(c,r),(0,u.polygonAreaSigned)([i,w.p2,w.p3]))),(0,s.add4Mutate)(v,(0,p.scale4Mutate)(l(r,o),(0,u.polygonAreaSigned)([i,w.p3,w.p1]))),(0,p.scale4Mutate)(v,1/(0,u.polygonArea)(w.points)),h.innerText=Date.now()-a+" ms",M.putImageData(I,0,0);const g=_>32?1:2;for(let a=0;a<I.width;a+=e)for(let e=0;e<I.height;e+=t)M.fillStyle="yellow",M.beginPath(),M.arc(a,e,g,0,x),M.fill();M.lineWidth=1,M.strokeStyle="red",M.beginPath(),M.moveTo(o[0]*e,o[1]*t),M.lineTo(c[0]*e,c[1]*t),M.lineTo(r[0]*e,r[1]*t),M.closePath(),M.stroke(),M.lineWidth=1,M.strokeStyle="black",M.fillStyle=`rgba(${Math.floor(v[0])}, ${Math.floor(v[1])}, ${Math.floor(v[2])}, ${Math.floor(v[3])})`,M.beginPath(),M.moveTo(w.p1[0],w.p1[1]),M.lineTo(w.p2[0],w.p2[1]),M.lineTo(w.p3[0],w.p3[1]),M.closePath(),M.fill(),M.stroke()})()}),(()=>A()));m.onwheel=function(e){const t=.1*Math.sign(e.deltaY);return o.vec2.add(w.p1,w.p1,(0,r.scale)((0,r.sub)(w.p1,w.center),t)),o.vec2.add(w.p2,w.p2,(0,r.scale)((0,r.sub)(w.p2,w.center),t)),o.vec2.add(w.p3,w.p3,(0,r.scale)((0,r.sub)(w.p3,w.center),t)),!1},m.onmousemove=e=>{const t=m.getBoundingClientRect(),a=o.vec2.fromValues(e.pageX-t.left-document.documentElement.scrollLeft,e.pageY-t.top-document.documentElement.scrollTop),n=(0,r.sub)(a,w.center);o.vec2.add(w.p1,w.p1,n),o.vec2.add(w.p2,w.p2,n),o.vec2.add(w.p3,w.p3,n),w.center=a,A()};const S={photo:"media/photo.png",lines:"media/test.png",pattern:"media/sample.png"},O=()=>n(void 0,void 0,void 0,(function*(){_=parseInt(v.value,10);const e=f.value,t=`media/cache/summed_${e}_${_}.png`,[a,n]=yield Promise.all([(0,i.loadImage)(S[e]),(0,i.loadImage)(t)]);g.src=t,I=(0,l.getImageData)(a),E=(0,l.getImageData)(n),A()}));O(),v.onchange=O,f.onchange=O},7787:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.createRenderer=void 0,t.createRenderer=(e,t)=>{let a=!1;return()=>{a||(a=!0,requestAnimationFrame((()=>{e(),a=!1,null==t||t()})))}}},6923:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.polygonArea=t.polygonAreaSigned=void 0;const n=a(4669);t.polygonAreaSigned=e=>{if(!e.length)return 0;const t=e.length-1;let a=0;for(let o=0;o<t;o++)a+=(0,n.determinant2)(e[o],e[o+1]);return a+=(0,n.determinant2)(e[t],e[0]),a/2},t.polygonArea=e=>Math.abs((0,t.polygonAreaSigned)(e))},3345:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.lerp=t.timeAtPos=t.clamp=t.fract=t.negFract=t.EPSILON=void 0,t.EPSILON=1e-6,t.negFract=e=>1-e+Math.floor(e),t.fract=e=>e-Math.floor(e),t.clamp=(e,t,a)=>Math.max(Math.min(e,a),t),t.timeAtPos=(e,a,n)=>a?(0,t.clamp)((n-e)/a,0,1):0,t.lerp=(e,t,a)=>e*(1-a)+t*a},4669:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.inRange=t.avg=t.max2=t.min2=t.toPrecision2=t.lerp2=t.normalize=t.length=t.dot=t.sign=t.abs=t.ceil=t.floor=t.sub=t.adds=t.add=t.divide=t.multiply=t.scale=t.equals=t.determinant2=t.clamp2=void 0;const n=a(887);t.clamp2=(e,t,a)=>{const o=n.vec2.clone(e);return n.vec2.min(o,o,a),n.vec2.max(o,o,t),o},t.determinant2=(e,t)=>e[0]*t[1]-e[1]*t[0],t.equals=n.vec2.equals,t.scale=(e,t)=>n.vec2.scale(n.vec2.create(),e,t),t.multiply=(e,t)=>n.vec2.multiply(n.vec2.create(),e,t),t.divide=(e,t)=>n.vec2.divide(n.vec2.create(),e,t),t.add=(e,t)=>n.vec2.add(n.vec2.create(),e,t),t.adds=(e,t)=>n.vec2.fromValues(e[0]+t,e[1]+t),t.sub=(e,t)=>n.vec2.sub(n.vec2.create(),e,t),t.floor=e=>n.vec2.floor(n.vec2.create(),e),t.ceil=e=>n.vec2.ceil(n.vec2.create(),e),t.abs=e=>n.vec2.fromValues(Math.abs(e[0]),Math.abs(e[1])),t.sign=e=>n.vec2.fromValues(Math.sign(e[0]),Math.sign(e[1])),t.dot=(e,t)=>n.vec2.dot(e,t),t.length=e=>n.vec2.length(e),t.normalize=e=>(0,t.scale)(e,1/(0,t.length)(e)),t.lerp2=(e,t,a)=>n.vec2.lerp(n.vec2.create(),e,t,a),t.toPrecision2=(e,t)=>(e[0]=parseFloat(e[0].toPrecision(t)),e[1]=parseFloat(e[1].toPrecision(t)),e),t.min2=(...e)=>{const[t,...a]=e,o=n.vec2.clone(t);return a.forEach((e=>{n.vec2.min(o,o,e)})),o},t.max2=(...e)=>{const[t,...a]=e,o=n.vec2.clone(t);return a.forEach((e=>{n.vec2.max(o,o,e)})),o},t.avg=(...e)=>{const t=n.vec2.create();return e.length&&(e.forEach((e=>{n.vec2.add(t,t,e)})),n.vec2.scale(t,t,1/e.length)),t},t.inRange=(e,t,a)=>!(e[0]>a[0]||e[0]<t[0]||e[1]>a[1]||e[1]<t[1])},9078:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.add4Mutate=void 0,t.add4Mutate=(e,t)=>(e[0]+=t[0],e[1]+=t[1],e[2]+=t[2],e[3]+=t[3],e)},8372:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.getImageData=void 0,t.getImageData=e=>{const t=document.createElement("canvas");t.width=e.width,t.height=e.height;const a=t.getContext("2d");if(!a)throw new Error("Could not create canvas to extract image data");return a.clearRect(0,0,t.width,t.height),a.drawImage(e,0,0),a.getImageData(0,0,t.width,t.height)}},3792:function(e,t){var a=this&&this.__awaiter||function(e,t,a,n){return new(a||(a=Promise))((function(o,c){function r(e){try{i(n.next(e))}catch(e){c(e)}}function l(e){try{i(n.throw(e))}catch(e){c(e)}}function i(e){var t;e.done?o(e.value):(t=e.value,t instanceof a?t:new a((function(e){e(t)}))).then(r,l)}i((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.loadImage=void 0,t.loadImage=e=>a(void 0,void 0,void 0,(function*(){const t=new Image;return new Promise(((a,n)=>{t.onload=()=>{a(t)},t.onerror=e=>{n(e)},t.src=e}))}))},8027:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.scale4Mutate=void 0,t.scale4Mutate=(e,t)=>(e[0]*=t,e[1]*=t,e[2]*=t,e[3]*=t,e)}},e=>{e(e.s=2695)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,