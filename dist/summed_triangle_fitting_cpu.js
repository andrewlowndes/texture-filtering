"use strict";(self.webpackChunksampling_coverage=self.webpackChunksampling_coverage||[]).push([[909],{2695:function(e,t,a){var n=this&&this.__awaiter||function(e,t,a,n){return new(a||(a=Promise))((function(o,c){function r(e){try{i(n.next(e))}catch(e){c(e)}}function l(e){try{i(n.throw(e))}catch(e){c(e)}}function i(e){var t;e.done?o(e.value):(t=e.value,t instanceof a?t:new a((function(e){e(t)}))).then(r,l)}i((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0});const o=a(887),c=a(7787),r=a(4669),l=a(8372),i=a(3792),d=a(3345),s=a(9078),u=a(6923),p=a(8027),m=document.getElementById("game"),v=document.getElementById("resolution"),h=document.getElementById("cache"),g=document.getElementById("timetaken"),f=m.getContext("2d"),M=o.vec2.fromValues(160,160),y=o.vec2.fromValues(250,130),b=o.vec2.fromValues(150,270),P={p1:M,p2:y,p3:b,points:[M,y,b],e1:(0,r.sub)(y,M),e2:(0,r.sub)(b,y),e3:(0,r.sub)(M,b)};let w,_,I;P.center=(0,r.avg)(...P.points);const E=2*Math.PI,x=(0,c.createRenderer)((()=>{P.points.forEach((e=>{o.vec2.rotate(e,e,P.center,.01)})),P.e1=(0,r.sub)(P.p2,P.p1),P.e2=(0,r.sub)(P.p3,P.p2),P.e3=(0,r.sub)(P.p1,P.p3),_&&I&&(()=>{f.clearRect(0,0,m.width,m.height);const e=(_.width-1)/(w-1),t=(_.height-1)/(w-1),a=Date.now(),n=w-1,o=[(0,d.clamp)(Math.round(P.p1[0]/e),0,n),(0,d.clamp)(Math.round(P.p1[1]/t),0,n)],c=[(0,d.clamp)(Math.round(P.p2[0]/e),0,n),(0,d.clamp)(Math.round(P.p2[1]/t),0,n)],r=[(0,d.clamp)(Math.round(P.p3[0]/e),0,n),(0,d.clamp)(Math.round(P.p3[1]/t),0,n)],l=(e,t)=>{const a=4*(t[1]+w*(t[0]+w*(e[1]+w*e[0])));return Array.from(I.data.slice(a,a+4))},i=[0,0],v=[0,0,0,0];(0,s.add4Mutate)(v,(0,p.scale4Mutate)(l(o,c),(0,u.polygonAreaSigned)([i,P.p1,P.p2]))),(0,s.add4Mutate)(v,(0,p.scale4Mutate)(l(c,r),(0,u.polygonAreaSigned)([i,P.p2,P.p3]))),(0,s.add4Mutate)(v,(0,p.scale4Mutate)(l(r,o),(0,u.polygonAreaSigned)([i,P.p3,P.p1]))),(0,p.scale4Mutate)(v,1/(0,u.polygonArea)(P.points)),g.innerText=Date.now()-a+" ms",f.putImageData(_,0,0);const h=w>32?1:2;for(let a=0;a<_.width;a+=e)for(let e=0;e<_.height;e+=t)f.fillStyle="yellow",f.beginPath(),f.arc(a,e,h,0,E),f.fill();f.lineWidth=1,f.strokeStyle="red",f.beginPath(),f.moveTo(o[0]*e,o[1]*t),f.lineTo(c[0]*e,c[1]*t),f.lineTo(r[0]*e,r[1]*t),f.closePath(),f.stroke(),f.lineWidth=1,f.strokeStyle="black",f.fillStyle=`rgba(${Math.floor(v[0])}, ${Math.floor(v[1])}, ${Math.floor(v[2])}, ${Math.floor(v[3])})`,f.beginPath(),f.moveTo(P.p1[0],P.p1[1]),f.lineTo(P.p2[0],P.p2[1]),f.lineTo(P.p3[0],P.p3[1]),f.closePath(),f.fill(),f.stroke()})()}),(()=>x()));m.onwheel=function(e){const t=.1*Math.sign(e.deltaY);return o.vec2.add(P.p1,P.p1,(0,r.scale)((0,r.sub)(P.p1,P.center),t)),o.vec2.add(P.p2,P.p2,(0,r.scale)((0,r.sub)(P.p2,P.center),t)),o.vec2.add(P.p3,P.p3,(0,r.scale)((0,r.sub)(P.p3,P.center),t)),!1},m.onmousemove=e=>{const t=m.getBoundingClientRect(),a=o.vec2.fromValues(e.pageX-t.left-document.documentElement.scrollLeft,e.pageY-t.top-document.documentElement.scrollTop),n=(0,r.sub)(a,P.center);o.vec2.add(P.p1,P.p1,n),o.vec2.add(P.p2,P.p2,n),o.vec2.add(P.p3,P.p3,n),P.center=a,x()};const A=()=>n(void 0,void 0,void 0,(function*(){w=parseInt(v.value,10);const e=`media/cache/summed_photo_${w}.png`,[t,a]=yield Promise.all([(0,i.loadImage)("media/photo.png"),(0,i.loadImage)(e)]);h.src=e,_=(0,l.getImageData)(t),I=(0,l.getImageData)(a),x()}));A(),v.onchange=A},7787:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.createRenderer=void 0,t.createRenderer=(e,t)=>{let a=!1;return()=>{a||(a=!0,requestAnimationFrame((()=>{e(),a=!1,null==t||t()})))}}},6923:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.polygonArea=t.polygonAreaSigned=void 0;const n=a(4669);t.polygonAreaSigned=e=>{if(!e.length)return 0;const t=e.length-1;let a=0;for(let o=0;o<t;o++)a+=(0,n.determinant2)(e[o],e[o+1]);return a+=(0,n.determinant2)(e[t],e[0]),a/2},t.polygonArea=e=>Math.abs((0,t.polygonAreaSigned)(e))},3345:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.lerp=t.timeAtPos=t.clamp=t.fract=t.negFract=t.EPSILON=void 0,t.EPSILON=1e-6,t.negFract=e=>1-e+Math.floor(e),t.fract=e=>e-Math.floor(e),t.clamp=(e,t,a)=>Math.max(Math.min(e,a),t),t.timeAtPos=(e,a,n)=>a?(0,t.clamp)((n-e)/a,0,1):0,t.lerp=(e,t,a)=>e*(1-a)+t*a},4669:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.inRange=t.avg=t.max2=t.min2=t.toPrecision2=t.lerp2=t.normalize=t.length=t.dot=t.sign=t.abs=t.ceil=t.floor=t.sub=t.adds=t.add=t.divide=t.multiply=t.scale=t.equals=t.determinant2=t.clamp2=void 0;const n=a(887);t.clamp2=(e,t,a)=>{const o=n.vec2.clone(e);return n.vec2.min(o,o,a),n.vec2.max(o,o,t),o},t.determinant2=(e,t)=>e[0]*t[1]-e[1]*t[0],t.equals=n.vec2.equals,t.scale=(e,t)=>n.vec2.scale(n.vec2.create(),e,t),t.multiply=(e,t)=>n.vec2.multiply(n.vec2.create(),e,t),t.divide=(e,t)=>n.vec2.divide(n.vec2.create(),e,t),t.add=(e,t)=>n.vec2.add(n.vec2.create(),e,t),t.adds=(e,t)=>n.vec2.fromValues(e[0]+t,e[1]+t),t.sub=(e,t)=>n.vec2.sub(n.vec2.create(),e,t),t.floor=e=>n.vec2.floor(n.vec2.create(),e),t.ceil=e=>n.vec2.ceil(n.vec2.create(),e),t.abs=e=>n.vec2.fromValues(Math.abs(e[0]),Math.abs(e[1])),t.sign=e=>n.vec2.fromValues(Math.sign(e[0]),Math.sign(e[1])),t.dot=(e,t)=>n.vec2.dot(e,t),t.length=e=>n.vec2.length(e),t.normalize=e=>(0,t.scale)(e,1/(0,t.length)(e)),t.lerp2=(e,t,a)=>n.vec2.lerp(n.vec2.create(),e,t,a),t.toPrecision2=(e,t)=>(e[0]=parseFloat(e[0].toPrecision(t)),e[1]=parseFloat(e[1].toPrecision(t)),e),t.min2=(...e)=>{const[t,...a]=e,o=n.vec2.clone(t);return a.forEach((e=>{n.vec2.min(o,o,e)})),o},t.max2=(...e)=>{const[t,...a]=e,o=n.vec2.clone(t);return a.forEach((e=>{n.vec2.max(o,o,e)})),o},t.avg=(...e)=>{const t=n.vec2.create();return e.length&&(e.forEach((e=>{n.vec2.add(t,t,e)})),n.vec2.scale(t,t,1/e.length)),t},t.inRange=(e,t,a)=>!(e[0]>a[0]||e[0]<t[0]||e[1]>a[1]||e[1]<t[1])},9078:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.add4Mutate=void 0,t.add4Mutate=(e,t)=>(e[0]+=t[0],e[1]+=t[1],e[2]+=t[2],e[3]+=t[3],e)},8372:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.getImageData=void 0,t.getImageData=e=>{const t=document.createElement("canvas");t.width=e.width,t.height=e.height;const a=t.getContext("2d");if(!a)throw new Error("Could not create canvas to extract image data");return a.clearRect(0,0,t.width,t.height),a.drawImage(e,0,0),a.getImageData(0,0,t.width,t.height)}},3792:function(e,t){var a=this&&this.__awaiter||function(e,t,a,n){return new(a||(a=Promise))((function(o,c){function r(e){try{i(n.next(e))}catch(e){c(e)}}function l(e){try{i(n.throw(e))}catch(e){c(e)}}function i(e){var t;e.done?o(e.value):(t=e.value,t instanceof a?t:new a((function(e){e(t)}))).then(r,l)}i((n=n.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.loadImage=void 0,t.loadImage=e=>a(void 0,void 0,void 0,(function*(){const t=new Image;return new Promise(((a,n)=>{t.onload=()=>{a(t)},t.onerror=e=>{n(e)},t.src=e}))}))},8027:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.scale4Mutate=void 0,t.scale4Mutate=(e,t)=>(e[0]*=t,e[1]*=t,e[2]*=t,e[3]*=t,e)}},e=>{e(e.s=2695)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,