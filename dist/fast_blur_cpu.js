"use strict";(self.webpackChunksampling_coverage=self.webpackChunksampling_coverage||[]).push([[679],{4685:(e,t,a)=>{const o=a(2086),l=a(5676),u=a(7787),d=a(6374),r=a(6086),M=a(8372),c=a(7601),i=document.getElementById("game"),n=document.getElementById("image"),s=document.getElementById("method"),g=document.getElementById("amount"),h=document.getElementById("amountvalue"),f=document.getElementById("timetaken"),m=i.getContext("2d");let v=8;const P=()=>{const e=M.getImageData(n),t=d.createSummedTexture(e),a=c.makeLogScale(0,512),P=u.createRenderer((()=>{h.value=v.toString(),g.value=a.toLinear(v).toString(),((e,t)=>{m.clearRect(0,0,i.width,i.height);const a=m.getImageData(0,0,i.width,i.height);let u;switch(s.value){case"summed":u=(a,o,u,d)=>l.averageSummed(t,e,a,o,u,d);break;case"naive":u=(t,a,l,u)=>o.averageNaive(e,t,a,l,u);break;default:throw new Error("Unknown method")}const d=Date.now();for(let e=0,t=0;e<i.height;e++)for(let o=0;o<i.width;o++,t+=4){const l=u(r.clamp(o-v,0,i.width),r.clamp(e-v,0,i.height),r.clamp(o+v,0,i.width),r.clamp(e+v,0,i.height));a.data.set(l,t)}m.putImageData(a,0,0),f.innerText=Date.now()-d+" ms"})(e,t)}));g.oninput=()=>{v=parseFloat(a.fromLinear(parseFloat(g.value)).toFixed(1)),P()},h.onchange=()=>{v=parseFloat(h.value),P()},s.onchange=P,P()};n.complete?P():n.onload=P},2086:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.averageNaive=void 0;const o=a(9078),l=a(5062),u=a(8027),d=a(975);t.averageNaive=(e,t,a,r,M)=>{const c=Math.floor(t),i=Math.floor(a),n=Math.floor(r),s=Math.floor(M);if(c==n&&i==s)return l.floor4Mutate(d.getPixel(e,c,i));const g=r-t,h=M-a,f=1/(g*h),m=Math.ceil(t),v=Math.ceil(a),P=Math.floor(r),x=Math.floor(M),p=m-t,w=v-a,_=r-P,y=M-x,b=[0,0,0,0];if(c==n){w&&o.add4Mutate(b,u.scale4Mutate(d.getPixel(e,c,i),g*w)),y&&o.add4Mutate(b,u.scale4Mutate(d.getPixel(e,n,s),g*y));const t=[0,0,0,0];for(let a=v;a<x;a++)o.add4Mutate(t,d.getPixel(e,c,a));return o.add4Mutate(b,u.scale4Mutate(t,g)),l.floor4Mutate(u.scale4Mutate(b,f))}if(i==s){p&&o.add4Mutate(b,u.scale4Mutate(d.getPixel(e,c,i),h*p)),_&&o.add4Mutate(b,u.scale4Mutate(d.getPixel(e,n,s),h*_));const t=[0,0,0,0];for(let a=m;a<P;a++)o.add4Mutate(t,d.getPixel(e,a,i));return o.add4Mutate(b,u.scale4Mutate(t,h)),l.floor4Mutate(u.scale4Mutate(b,f))}if(w&&(p&&o.add4Mutate(b,u.scale4Mutate(d.getPixel(e,c,i),p*w)),_&&o.add4Mutate(b,u.scale4Mutate(d.getPixel(e,n,i),_*w))),y&&(p&&o.add4Mutate(b,u.scale4Mutate(d.getPixel(e,c,s),p*y)),_&&o.add4Mutate(b,u.scale4Mutate(d.getPixel(e,n,s),_*y))),w){const t=[0,0,0,0];for(let a=m;a<P;a++)o.add4Mutate(t,d.getPixel(e,a,i));o.add4Mutate(b,u.scale4Mutate(t,w))}if(p){const t=[0,0,0,0];for(let a=v;a<x;a++)o.add4Mutate(t,d.getPixel(e,c,a));o.add4Mutate(b,u.scale4Mutate(t,p))}if(y){const t=[0,0,0,0];for(let a=m;a<P;a++)o.add4Mutate(t,d.getPixel(e,a,s));o.add4Mutate(b,u.scale4Mutate(t,y))}if(_){const t=[0,0,0,0];for(let a=v;a<x;a++)o.add4Mutate(t,d.getPixel(e,n,a));o.add4Mutate(b,u.scale4Mutate(t,_))}for(let t=m;t<P;t++)for(let a=v;a<x;a++)o.add4Mutate(b,d.getPixel(e,t,a));return l.floor4Mutate(u.scale4Mutate(b,f))}},5676:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.averageSummed=void 0;const o=a(9078),l=a(5062),u=a(8027),d=a(6196),r=a(975),M=(e,t,a)=>{try{const o=t>=0&&a>=0?e[a][t]:[0,0,0,0];if(void 0===o)throw Error("No summed texture value");return o}catch(e){throw console.error(t,a),e}},c=(e,t,a,l,u)=>{const r=[0,0,0,0];try{o.add4Mutate(r,M(e,l,u)),d.subtract4Mutate(r,M(e,t,u)),d.subtract4Mutate(r,M(e,l,a)),o.add4Mutate(r,M(e,t,a))}catch(o){throw console.error([r,M(e,l,u),M(e,t,u),M(e,l,a),M(e,t,a)]),o}return r};t.averageSummed=(e,t,a,d,M,i)=>{const n=Math.floor(a),s=Math.floor(d),g=Math.floor(M),h=Math.floor(i);if(n==g&&s==h)return l.floor4Mutate(r.getPixel(t,n,s));const f=M-a,m=i-d,v=1/(f*m),P=Math.ceil(a),x=Math.ceil(d),p=Math.floor(M),w=Math.floor(i),_=P-a,y=x-d,b=M-p,I=i-w,j=[0,0,0,0];return n==g?(y&&o.add4Mutate(j,u.scale4Mutate(r.getPixel(t,n,s),f*y)),I&&o.add4Mutate(j,u.scale4Mutate(r.getPixel(t,g,h),f*I)),o.add4Mutate(j,u.scale4Mutate(c(e,n-1,x-1,n,w-1),f)),l.floor4Mutate(u.scale4Mutate(j,v))):s==h?(_&&o.add4Mutate(j,u.scale4Mutate(r.getPixel(t,n,s),m*_)),b&&o.add4Mutate(j,u.scale4Mutate(r.getPixel(t,g,h),m*b)),o.add4Mutate(j,u.scale4Mutate(c(e,P-1,s-1,p-1,s),m)),l.floor4Mutate(u.scale4Mutate(j,v))):(y&&(_&&o.add4Mutate(j,u.scale4Mutate(r.getPixel(t,n,s),_*y)),b&&o.add4Mutate(j,u.scale4Mutate(r.getPixel(t,g,s),b*y))),I&&(_&&o.add4Mutate(j,u.scale4Mutate(r.getPixel(t,n,h),_*I)),b&&o.add4Mutate(j,u.scale4Mutate(r.getPixel(t,g,h),b*I))),y&&o.add4Mutate(j,u.scale4Mutate(c(e,P-1,s-1,p-1,s),y)),_&&o.add4Mutate(j,u.scale4Mutate(c(e,n-1,x-1,n,w-1),_)),I&&o.add4Mutate(j,u.scale4Mutate(c(e,P-1,h-1,p-1,h),I)),b&&o.add4Mutate(j,u.scale4Mutate(c(e,g-1,x-1,g,w-1),b)),o.add4Mutate(j,c(e,P-1,x-1,p-1,w-1)),l.floor4Mutate(u.scale4Mutate(j,v)))}},975:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setPixel=t.getPixel=void 0,t.getPixel=(e,t,a)=>{const o=4*(e.width*Math.floor(a)+Math.floor(t));return e.data.slice(o,o+4)},t.setPixel=(e,t,a,o)=>{e.data.set(o,4*(Math.floor(a)*e.width+Math.floor(t)))}},7787:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.createRenderer=void 0,t.createRenderer=(e,t)=>{let a=!1;return()=>{a||(a=!0,requestAnimationFrame((()=>{e(),a=!1,null==t||t()})))}}},6374:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.createSummedTexture=void 0;const o=a(9078),l=a(6196);t.createSummedTexture=e=>{const t=new Array(e.height);for(let a=0,u=0;u<e.height;u++){t[u]=new Array(e.width);for(let d=0;d<e.width;d++,a+=4){const r=new Uint32Array(e.data.slice(a,a+4));d>0&&o.add4Mutate(r,t[u][d-1]),u>0&&o.add4Mutate(r,t[u-1][d]),d>0&&u>0&&l.subtract4Mutate(r,t[u-1][d-1]),t[u][d]=r}}return t}},7601:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.makeLogScale=void 0,t.makeLogScale=(e,t)=>{const a=e?Math.log(e):0,o=Math.log(t)-a;return{fromLinear:e=>Math.exp(a+o*e),toLinear:e=>(Math.log(e)-a)/o}}},9078:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.add4Mutate=void 0,t.add4Mutate=(e,t)=>(e[0]+=t[0],e[1]+=t[1],e[2]+=t[2],e[3]+=t[3],e)},6086:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.clamp=void 0,t.clamp=(e,t,a)=>Math.max(Math.min(e,a),t)},5062:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.floor4Mutate=void 0,t.floor4Mutate=e=>(e[0]=Math.floor(e[0]),e[1]=Math.floor(e[1]),e[2]=Math.floor(e[2]),e[3]=Math.floor(e[3]),e)},8372:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.getImageData=void 0,t.getImageData=e=>{const t=document.createElement("canvas");t.width=e.width,t.height=e.height;const a=t.getContext("2d");if(!a)throw new Error("Could not create canvas to extract image data");return a.clearRect(0,0,t.width,t.height),a.drawImage(e,0,0),a.getImageData(0,0,t.width,t.height)}},8027:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.scale4Mutate=void 0,t.scale4Mutate=(e,t)=>(e[0]*=t,e[1]*=t,e[2]*=t,e[3]*=t,e)},6196:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.subtract4Mutate=void 0,t.subtract4Mutate=(e,t)=>(e[0]-=t[0],e[1]-=t[1],e[2]-=t[2],e[3]-=t[3],e)}},e=>{e(e.s=4685)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,