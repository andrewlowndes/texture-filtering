(()=>{"use strict";var e={86:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.averageNaive=void 0;const o=a(78),r=a(62),l=a(27),d=a(975);t.averageNaive=(e,t,a,u,M)=>{const c=Math.floor(t),i=Math.floor(a),n=Math.floor(u),s=Math.floor(M);if(c==n&&i==s)return r.floor4Mutate(d.getPixel(e,c,i));const g=u-t,h=M-a,f=1/(g*h),m=Math.ceil(t),v=Math.ceil(a),x=Math.floor(u),P=Math.floor(M),p=m-t,w=v-a,_=u-x,y=M-P,b=[0,0,0,0];if(c==n){w&&o.add4Mutate(b,l.scale4Mutate(d.getPixel(e,c,i),g*w)),y&&o.add4Mutate(b,l.scale4Mutate(d.getPixel(e,n,s),g*y));const t=[0,0,0,0];for(let a=v;a<P;a++)o.add4Mutate(t,d.getPixel(e,c,a));return o.add4Mutate(b,l.scale4Mutate(t,g)),r.floor4Mutate(l.scale4Mutate(b,f))}if(i==s){p&&o.add4Mutate(b,l.scale4Mutate(d.getPixel(e,c,i),h*p)),_&&o.add4Mutate(b,l.scale4Mutate(d.getPixel(e,n,s),h*_));const t=[0,0,0,0];for(let a=m;a<x;a++)o.add4Mutate(t,d.getPixel(e,a,i));return o.add4Mutate(b,l.scale4Mutate(t,h)),r.floor4Mutate(l.scale4Mutate(b,f))}if(w&&(p&&o.add4Mutate(b,l.scale4Mutate(d.getPixel(e,c,i),p*w)),_&&o.add4Mutate(b,l.scale4Mutate(d.getPixel(e,n,i),_*w))),y&&(p&&o.add4Mutate(b,l.scale4Mutate(d.getPixel(e,c,s),p*y)),_&&o.add4Mutate(b,l.scale4Mutate(d.getPixel(e,n,s),_*y))),w){const t=[0,0,0,0];for(let a=m;a<x;a++)o.add4Mutate(t,d.getPixel(e,a,i));o.add4Mutate(b,l.scale4Mutate(t,w))}if(p){const t=[0,0,0,0];for(let a=v;a<P;a++)o.add4Mutate(t,d.getPixel(e,c,a));o.add4Mutate(b,l.scale4Mutate(t,p))}if(y){const t=[0,0,0,0];for(let a=m;a<x;a++)o.add4Mutate(t,d.getPixel(e,a,s));o.add4Mutate(b,l.scale4Mutate(t,y))}if(_){const t=[0,0,0,0];for(let a=v;a<P;a++)o.add4Mutate(t,d.getPixel(e,n,a));o.add4Mutate(b,l.scale4Mutate(t,_))}for(let t=m;t<x;t++)for(let a=v;a<P;a++)o.add4Mutate(b,d.getPixel(e,t,a));return r.floor4Mutate(l.scale4Mutate(b,f))}},676:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.averageSummed=void 0;const o=a(78),r=a(62),l=a(27),d=a(196),u=a(975),M=(e,t,a)=>{try{const o=t>=0&&a>=0?e[a][t]:[0,0,0,0];if(void 0===o)throw Error("No summed texture value");return o}catch(e){throw console.error(t,a),e}},c=(e,t,a,r,l)=>{const u=[0,0,0,0];try{o.add4Mutate(u,M(e,r,l)),d.subtract4Mutate(u,M(e,t,l)),d.subtract4Mutate(u,M(e,r,a)),o.add4Mutate(u,M(e,t,a))}catch(o){throw console.error([u,M(e,r,l),M(e,t,l),M(e,r,a),M(e,t,a)]),o}return u};t.averageSummed=(e,t,a,d,M,i)=>{const n=Math.floor(a),s=Math.floor(d),g=Math.floor(M),h=Math.floor(i);if(n==g&&s==h)return r.floor4Mutate(u.getPixel(t,n,s));const f=M-a,m=i-d,v=1/(f*m),x=Math.ceil(a),P=Math.ceil(d),p=Math.floor(M),w=Math.floor(i),_=x-a,y=P-d,b=M-p,I=i-w,j=[0,0,0,0];return n==g?(y&&o.add4Mutate(j,l.scale4Mutate(u.getPixel(t,n,s),f*y)),I&&o.add4Mutate(j,l.scale4Mutate(u.getPixel(t,g,h),f*I)),o.add4Mutate(j,l.scale4Mutate(c(e,n-1,P-1,n,w-1),f)),r.floor4Mutate(l.scale4Mutate(j,v))):s==h?(_&&o.add4Mutate(j,l.scale4Mutate(u.getPixel(t,n,s),m*_)),b&&o.add4Mutate(j,l.scale4Mutate(u.getPixel(t,g,h),m*b)),o.add4Mutate(j,l.scale4Mutate(c(e,x-1,s-1,p-1,s),m)),r.floor4Mutate(l.scale4Mutate(j,v))):(y&&(_&&o.add4Mutate(j,l.scale4Mutate(u.getPixel(t,n,s),_*y)),b&&o.add4Mutate(j,l.scale4Mutate(u.getPixel(t,g,s),b*y))),I&&(_&&o.add4Mutate(j,l.scale4Mutate(u.getPixel(t,n,h),_*I)),b&&o.add4Mutate(j,l.scale4Mutate(u.getPixel(t,g,h),b*I))),y&&o.add4Mutate(j,l.scale4Mutate(c(e,x-1,s-1,p-1,s),y)),_&&o.add4Mutate(j,l.scale4Mutate(c(e,n-1,P-1,n,w-1),_)),I&&o.add4Mutate(j,l.scale4Mutate(c(e,x-1,h-1,p-1,h),I)),b&&o.add4Mutate(j,l.scale4Mutate(c(e,g-1,P-1,g,w-1),b)),o.add4Mutate(j,c(e,x-1,P-1,p-1,w-1)),r.floor4Mutate(l.scale4Mutate(j,v)))}},975:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setPixel=t.getPixel=void 0,t.getPixel=(e,t,a)=>{const o=4*(e.width*Math.floor(a)+Math.floor(t));return e.data.slice(o,o+4)},t.setPixel=(e,t,a,o)=>{e.data.set(o,4*(Math.floor(a)*e.width+Math.floor(t)))}},787:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.createRenderer=void 0,t.createRenderer=(e,t)=>{let a=!1;return()=>{a||(a=!0,requestAnimationFrame((()=>{e(),a=!1,null==t||t()})))}}},374:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.createSummedTexture=void 0;const o=a(78),r=a(196);t.createSummedTexture=e=>{const t=new Array(e.height);for(let a=0,l=0;l<e.height;l++){t[l]=new Array(e.width);for(let d=0;d<e.width;d++,a+=4){const u=new Uint32Array(e.data.slice(a,a+4));d>0&&o.add4Mutate(u,t[l][d-1]),l>0&&o.add4Mutate(u,t[l-1][d]),d>0&&l>0&&r.subtract4Mutate(u,t[l-1][d-1]),t[l][d]=u}}return t}},601:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.makeLogScale=void 0,t.makeLogScale=(e,t)=>{const a=e?Math.log(e):0,o=Math.log(t)-a;return{fromLinear:e=>Math.exp(a+o*e),toLinear:e=>(Math.log(e)-a)/o}}},78:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.add4Mutate=void 0,t.add4Mutate=(e,t)=>(e[0]+=t[0],e[1]+=t[1],e[2]+=t[2],e[3]+=t[3],e)},586:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.clamp=void 0,t.clamp=(e,t,a)=>Math.max(Math.min(e,a),t)},62:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.floor4Mutate=void 0,t.floor4Mutate=e=>(e[0]=Math.floor(e[0]),e[1]=Math.floor(e[1]),e[2]=Math.floor(e[2]),e[3]=Math.floor(e[3]),e)},372:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.getImageData=void 0,t.getImageData=e=>{const t=document.createElement("canvas");t.width=e.width,t.height=e.height;const a=t.getContext("2d");if(!a)throw new Error("Could not create canvas to extract image data");return a.clearRect(0,0,t.width,t.height),a.drawImage(e,0,0),a.getImageData(0,0,t.width,t.height)}},27:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.scale4Mutate=void 0,t.scale4Mutate=(e,t)=>(e[0]*=t,e[1]*=t,e[2]*=t,e[3]*=t,e)},196:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.subtract4Mutate=void 0,t.subtract4Mutate=(e,t)=>(e[0]-=t[0],e[1]-=t[1],e[2]-=t[2],e[3]-=t[3],e)}},t={};function a(o){var r=t[o];if(void 0!==r)return r.exports;var l=t[o]={exports:{}};return e[o](l,l.exports,a),l.exports}(()=>{const e=a(86),t=a(676),o=a(787),r=a(374),l=a(586),d=a(372),u=a(601),M=document.getElementById("game"),c=document.getElementById("image"),i=document.getElementById("method"),n=document.getElementById("amount"),s=document.getElementById("amountvalue"),g=document.getElementById("timetaken"),h=M.getContext("2d");let f=8;const m=()=>{const a=d.getImageData(c),m=r.createSummedTexture(a),v=u.makeLogScale(0,512),x=o.createRenderer((()=>{s.value=f.toString(),n.value=v.toLinear(f).toString(),((a,o)=>{h.clearRect(0,0,M.width,M.height);const r=h.getImageData(0,0,M.width,M.height);let d;switch(i.value){case"summed":d=(e,r,l,d)=>t.averageSummed(o,a,e,r,l,d);break;case"naive":d=(t,o,r,l)=>e.averageNaive(a,t,o,r,l);break;default:throw new Error("Unknown method")}const u=Date.now();for(let e=0,t=0;e<M.height;e++)for(let a=0;a<M.width;a++,t+=4){const o=d(l.clamp(a-f,0,M.width),l.clamp(e-f,0,M.height),l.clamp(a+f,0,M.width),l.clamp(e+f,0,M.height));r.data.set(o,t)}h.putImageData(r,0,0),g.innerText=Date.now()-u+" ms"})(a,m)}));n.oninput=()=>{f=parseFloat(v.fromLinear(parseFloat(n.value)).toFixed(1)),x()},s.onchange=()=>{f=parseFloat(s.value),x()},i.onchange=x,x()};c.complete?m():c.onload=m})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,