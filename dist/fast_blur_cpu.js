(()=>{"use strict";var e={86:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.averageNaive=void 0;const o=a(78),r=a(62),l=a(27),d=a(975);t.averageNaive=(e,t,a,u,M)=>{const c=Math.floor(t),i=Math.floor(a),n=Math.floor(u),s=Math.floor(M);if(c==n&&i==s)return r.floor4Mutate(d.getPixel(e,c,i));const g=u-t,h=M-a,f=1/(g*h),m=Math.ceil(t),v=Math.ceil(a),x=Math.floor(u),P=Math.floor(M),p=m-t,w=v-a,_=u-x,y=M-P,b=[0,0,0,0];if(c==n){w&&o.add4Mutate(b,l.scale4Mutate(d.getPixel(e,c,i),g*w)),y&&o.add4Mutate(b,l.scale4Mutate(d.getPixel(e,n,s),g*y));const t=[0,0,0,0];for(let a=v;a<P;a++)o.add4Mutate(t,d.getPixel(e,c,a));return o.add4Mutate(b,l.scale4Mutate(t,g)),r.floor4Mutate(l.scale4Mutate(b,f))}if(i==s){p&&o.add4Mutate(b,l.scale4Mutate(d.getPixel(e,c,i),h*p)),_&&o.add4Mutate(b,l.scale4Mutate(d.getPixel(e,n,s),h*_));const t=[0,0,0,0];for(let a=m;a<x;a++)o.add4Mutate(t,d.getPixel(e,a,i));return o.add4Mutate(b,l.scale4Mutate(t,h)),r.floor4Mutate(l.scale4Mutate(b,f))}if(w&&(p&&o.add4Mutate(b,l.scale4Mutate(d.getPixel(e,c,i),p*w)),_&&o.add4Mutate(b,l.scale4Mutate(d.getPixel(e,n,i),_*w))),y&&(p&&o.add4Mutate(b,l.scale4Mutate(d.getPixel(e,c,s),p*y)),_&&o.add4Mutate(b,l.scale4Mutate(d.getPixel(e,n,s),_*y))),w){const t=[0,0,0,0];for(let a=m;a<x;a++)o.add4Mutate(t,d.getPixel(e,a,i));o.add4Mutate(b,l.scale4Mutate(t,w))}if(p){const t=[0,0,0,0];for(let a=v;a<P;a++)o.add4Mutate(t,d.getPixel(e,c,a));o.add4Mutate(b,l.scale4Mutate(t,p))}if(y){const t=[0,0,0,0];for(let a=m;a<x;a++)o.add4Mutate(t,d.getPixel(e,a,s));o.add4Mutate(b,l.scale4Mutate(t,y))}if(_){const t=[0,0,0,0];for(let a=v;a<P;a++)o.add4Mutate(t,d.getPixel(e,n,a));o.add4Mutate(b,l.scale4Mutate(t,_))}for(let t=m;t<x;t++)for(let a=v;a<P;a++)o.add4Mutate(b,d.getPixel(e,t,a));return r.floor4Mutate(l.scale4Mutate(b,f))}},676:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.averageSummed=void 0;const o=a(78),r=a(62),l=a(27),d=a(196),u=a(975),M=(e,t,a)=>{try{const o=t>=0&&a>=0?e[a][t]:[0,0,0,0];if(void 0===o)throw Error("No summed texture value");return o}catch(e){throw console.error(t,a),e}},c=(e,t,a,r,l)=>{const u=[0,0,0,0];try{o.add4Mutate(u,M(e,r,l)),d.subtract4Mutate(u,M(e,t,l)),d.subtract4Mutate(u,M(e,r,a)),o.add4Mutate(u,M(e,t,a))}catch(o){throw console.error([u,M(e,r,l),M(e,t,l),M(e,r,a),M(e,t,a)]),o}return u};t.averageSummed=(e,t,a,d,M,i)=>{const n=Math.floor(a),s=Math.floor(d),g=Math.floor(M),h=Math.floor(i);if(n==g&&s==h)return r.floor4Mutate(u.getPixel(t,n,s));const f=M-a,m=i-d,v=1/(f*m),x=Math.ceil(a),P=Math.ceil(d),p=Math.floor(M),w=Math.floor(i),_=x-a,y=P-d,b=M-p,I=i-w,j=[0,0,0,0];return n==g?(y&&o.add4Mutate(j,l.scale4Mutate(u.getPixel(t,n,s),f*y)),I&&o.add4Mutate(j,l.scale4Mutate(u.getPixel(t,g,h),f*I)),o.add4Mutate(j,l.scale4Mutate(c(e,n-1,P-1,n,w-1),f)),r.floor4Mutate(l.scale4Mutate(j,v))):s==h?(_&&o.add4Mutate(j,l.scale4Mutate(u.getPixel(t,n,s),m*_)),b&&o.add4Mutate(j,l.scale4Mutate(u.getPixel(t,g,h),m*b)),o.add4Mutate(j,l.scale4Mutate(c(e,x-1,s-1,p-1,s),m)),r.floor4Mutate(l.scale4Mutate(j,v))):(y&&(_&&o.add4Mutate(j,l.scale4Mutate(u.getPixel(t,n,s),_*y)),b&&o.add4Mutate(j,l.scale4Mutate(u.getPixel(t,g,s),b*y))),I&&(_&&o.add4Mutate(j,l.scale4Mutate(u.getPixel(t,n,h),_*I)),b&&o.add4Mutate(j,l.scale4Mutate(u.getPixel(t,g,h),b*I))),y&&o.add4Mutate(j,l.scale4Mutate(c(e,x-1,s-1,p-1,s),y)),_&&o.add4Mutate(j,l.scale4Mutate(c(e,n-1,P-1,n,w-1),_)),I&&o.add4Mutate(j,l.scale4Mutate(c(e,x-1,h-1,p-1,h),I)),b&&o.add4Mutate(j,l.scale4Mutate(c(e,g-1,P-1,g,w-1),b)),o.add4Mutate(j,c(e,x-1,P-1,p-1,w-1)),r.floor4Mutate(l.scale4Mutate(j,v)))}},975:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setPixel=t.getPixel=void 0,t.getPixel=(e,t,a)=>{const o=4*(e.width*Math.floor(a)+Math.floor(t));return e.data.slice(o,o+4)},t.setPixel=(e,t,a,o)=>{e.data.set(o,4*(Math.floor(a)*e.width+Math.floor(t)))}},787:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.createRenderer=void 0,t.createRenderer=(e,t)=>{let a=!1;return()=>{a||(a=!0,requestAnimationFrame((()=>{e(),a=!1,null==t||t()})))}}},374:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.createSummedTexture=void 0;const o=a(78),r=a(196);t.createSummedTexture=e=>{const t=new Array(e.height);for(let a=0,l=0;l<e.height;l++){t[l]=new Array(e.width);for(let d=0;d<e.width;d++,a+=4){const u=new Uint32Array(e.data.slice(a,a+4));d>0&&o.add4Mutate(u,t[l][d-1]),l>0&&o.add4Mutate(u,t[l-1][d]),d>0&&l>0&&r.subtract4Mutate(u,t[l-1][d-1]),t[l][d]=u}}return t}},601:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.makeLogScale=void 0,t.makeLogScale=(e,t)=>{const a=e?Math.log(e):0,o=Math.log(t)-a;return{fromLinear:e=>Math.exp(a+o*e),toLinear:e=>(Math.log(e)-a)/o}}},78:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.add4Mutate=void 0,t.add4Mutate=(e,t)=>(e[0]+=t[0],e[1]+=t[1],e[2]+=t[2],e[3]+=t[3],e)},586:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.clamp=void 0,t.clamp=(e,t,a)=>Math.max(Math.min(e,a),t)},62:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.floor4Mutate=void 0,t.floor4Mutate=e=>(e[0]=Math.floor(e[0]),e[1]=Math.floor(e[1]),e[2]=Math.floor(e[2]),e[3]=Math.floor(e[3]),e)},372:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.getImageData=void 0,t.getImageData=e=>{const t=document.createElement("canvas");t.width=e.width,t.height=e.height;const a=t.getContext("2d");if(!a)throw new Error("Could not create canvas to extract image data");return a.clearRect(0,0,t.width,t.height),a.drawImage(e,0,0),a.getImageData(0,0,t.width,t.height)}},27:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.scale4Mutate=void 0,t.scale4Mutate=(e,t)=>(e[0]*=t,e[1]*=t,e[2]*=t,e[3]*=t,e)},196:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.subtract4Mutate=void 0,t.subtract4Mutate=(e,t)=>(e[0]-=t[0],e[1]-=t[1],e[2]-=t[2],e[3]-=t[3],e)}},t={};function a(o){var r=t[o];if(void 0!==r)return r.exports;var l=t[o]={exports:{}};return e[o](l,l.exports,a),l.exports}(()=>{const e=a(86),t=a(676),o=a(787),r=a(374),l=a(586),d=a(372),u=a(601),M=document.getElementById("game"),c=document.getElementById("image"),i=document.getElementById("method"),n=document.getElementById("amount"),s=document.getElementById("amountvalue"),g=document.getElementById("timetaken"),h=M.getContext("2d");let f=8;const m=()=>{const a=d.getImageData(c),m=r.createSummedTexture(a),v=u.makeLogScale(0,512),x=o.createRenderer((()=>{s.value=f.toString(),n.value=v.toLinear(f).toString(),((a,o)=>{h.clearRect(0,0,M.width,M.height);const r=h.getImageData(0,0,M.width,M.height);let d;switch(i.value){case"summed":d=(e,r,l,d)=>t.averageSummed(o,a,e,r,l,d);break;case"naive":d=(t,o,r,l)=>e.averageNaive(a,t,o,r,l);break;default:throw new Error("Unknown method")}const u=Date.now();for(let e=0,t=0;e<M.height;e++)for(let a=0;a<M.width;a++,t+=4){const o=d(l.clamp(a-f,0,M.width),l.clamp(e-f,0,M.height),l.clamp(a+f,0,M.width),l.clamp(e+f,0,M.height));r.data.set(o,t)}h.putImageData(r,0,0),g.innerText=Date.now()-u+" ms"})(a,m)}));n.oninput=()=>{f=parseFloat(v.fromLinear(parseFloat(n.value)).toFixed(1)),x()},s.onchange=()=>{f=parseFloat(s.value),x()},i.onchange=x,x()};c.complete?m():c.onload=m})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zYW1wbGluZy1jb3ZlcmFnZS8uL3NyYy9kcmF3L2F2ZXJhZ2VOYWl2ZS50cyIsIndlYnBhY2s6Ly9zYW1wbGluZy1jb3ZlcmFnZS8uL3NyYy9kcmF3L2F2ZXJhZ2VTdW1tZWQudHMiLCJ3ZWJwYWNrOi8vc2FtcGxpbmctY292ZXJhZ2UvLi9zcmMvZHJhdy9jYW52YXMudHMiLCJ3ZWJwYWNrOi8vc2FtcGxpbmctY292ZXJhZ2UvLi9zcmMvZHJhdy9jcmVhdGVSZW5kZXJlci50cyIsIndlYnBhY2s6Ly9zYW1wbGluZy1jb3ZlcmFnZS8uL3NyYy9kcmF3L2NyZWF0ZVN1bW1lZFRleHR1cmUudHMiLCJ3ZWJwYWNrOi8vc2FtcGxpbmctY292ZXJhZ2UvLi9zcmMvbWF0aHMvbWFrZUxvZ1NjYWxlLnRzIiwid2VicGFjazovL3NhbXBsaW5nLWNvdmVyYWdlLy4vc3JjL3V0aWxzL2FkZDRNdXRhdGUudHMiLCJ3ZWJwYWNrOi8vc2FtcGxpbmctY292ZXJhZ2UvLi9zcmMvdXRpbHMvY2xhbXAudHMiLCJ3ZWJwYWNrOi8vc2FtcGxpbmctY292ZXJhZ2UvLi9zcmMvdXRpbHMvZmxvb3I0TXV0YXRlLnRzIiwid2VicGFjazovL3NhbXBsaW5nLWNvdmVyYWdlLy4vc3JjL3V0aWxzL2dldEltYWdlRGF0YS50cyIsIndlYnBhY2s6Ly9zYW1wbGluZy1jb3ZlcmFnZS8uL3NyYy91dGlscy9zY2FsZTRNdXRhdGUudHMiLCJ3ZWJwYWNrOi8vc2FtcGxpbmctY292ZXJhZ2UvLi9zcmMvdXRpbHMvc3VidHJhY3Q0TXV0YXRlLnRzIiwid2VicGFjazovL3NhbXBsaW5nLWNvdmVyYWdlL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL3NhbXBsaW5nLWNvdmVyYWdlLy4vc3JjL2RlbW9zL2Zhc3RCbHVyQ3B1LnRzIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiYXZlcmFnZU5haXZlIiwiYWRkNE11dGF0ZV8xIiwiZmxvb3I0TXV0YXRlXzEiLCJzY2FsZTRNdXRhdGVfMSIsImNhbnZhc18xIiwiaW1hZ2VEYXRhIiwieCIsInkiLCJ4MiIsInkyIiwic3RhcnRDZWxsWCIsIk1hdGgiLCJmbG9vciIsInN0YXJ0Q2VsbFkiLCJlbmRDZWxsWCIsImVuZENlbGxZIiwiZmxvb3I0TXV0YXRlIiwiZ2V0UGl4ZWwiLCJ3aWR0aCIsImhlaWdodCIsImNvbG91ck5vcm1hbGlzZXIiLCJpbm5lckNlbGxYIiwiY2VpbCIsImlubmVyQ2VsbFkiLCJpbm5lckNlbGxYMiIsImlubmVyQ2VsbFkyIiwibGVmdERpZmYiLCJ0b3BEaWZmIiwicmlnaHREaWZmIiwiYm90dG9tRGlmZiIsImNvbG91ciIsImFkZDRNdXRhdGUiLCJzY2FsZTRNdXRhdGUiLCJtaWRDb2xvdXIiLCJqIiwiaSIsInRvcENvbG91ciIsImxlZnRDb2xvdXIiLCJib3R0b21Db2xvdXIiLCJyaWdodENvbG91ciIsImF2ZXJhZ2VTdW1tZWQiLCJzdWJ0cmFjdDRNdXRhdGVfMSIsImdldFN1bW1lZFRleHR1cmVWYWwiLCJzdW1tZWRUZXh0dXJlIiwicmVzdWx0IiwidW5kZWZpbmVkIiwiRXJyb3IiLCJlcnIiLCJjb25zb2xlIiwiZXJyb3IiLCJnZXRTdW1tZWRBcmVhIiwic3VidHJhY3Q0TXV0YXRlIiwic2V0UGl4ZWwiLCJzYW1wbGVJbmRleCIsImRhdGEiLCJzbGljZSIsInJnYmEiLCJzZXQiLCJjcmVhdGVSZW5kZXJlciIsInJlbmRlckZ1bmMiLCJhZnRlclJlbmRlckZ1bmMiLCJkcmF3aW5nIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiY3JlYXRlU3VtbWVkVGV4dHVyZSIsIkFycmF5IiwicGl4IiwiVWludDMyQXJyYXkiLCJtYWtlTG9nU2NhbGUiLCJmcm9tIiwidG8iLCJtaW4iLCJsb2ciLCJzY2FsZSIsImZyb21MaW5lYXIiLCJleHAiLCJ0b0xpbmVhciIsImxvZ1ZhbHVlIiwiYSIsImIiLCJjbGFtcCIsInZhbCIsIm1heCIsImdldEltYWdlRGF0YSIsImltYWdlIiwiaW1hZ2VDYW52YXMiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJpbWFnZUdyYXBoaWNzIiwiZ2V0Q29udGV4dCIsImNsZWFyUmVjdCIsImRyYXdJbWFnZSIsIm1hZyIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsIm1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJhdmVyYWdlTmFpdmVfMSIsImF2ZXJhZ2VTdW1tZWRfMSIsImNyZWF0ZVJlbmRlcmVyXzEiLCJjcmVhdGVTdW1tZWRUZXh0dXJlXzEiLCJjbGFtcF8xIiwiZ2V0SW1hZ2VEYXRhXzEiLCJtYWtlTG9nU2NhbGVfMSIsImdhbWUiLCJnZXRFbGVtZW50QnlJZCIsIm1ldGhvZCIsImFtb3VudElucHV0IiwiYW1vdW50VmFsdWVJbnB1dCIsInRpbWV0YWtlbiIsImciLCJibHVyQW1vdW50Iiwic3RhcnQiLCJibHVyTG9nU2NhbGUiLCJkcmF3IiwidG9TdHJpbmciLCJjYW52YXNJbWFnZSIsInBpeGVsRnVuYyIsInN0YXJ0VGltZSIsIkRhdGUiLCJub3ciLCJwaXhlbENvbG91ciIsInB1dEltYWdlRGF0YSIsImlubmVyVGV4dCIsIm9uaW5wdXQiLCJwYXJzZUZsb2F0IiwidG9GaXhlZCIsIm9uY2hhbmdlIiwiY29tcGxldGUiLCJvbmxvYWQiXSwibWFwcGluZ3MiOiJ1Q0FDQUEsT0FBT0MsZUFBZUMsRUFBUyxhQUFjLENBQUVDLE9BQU8sSUFDdERELEVBQVFFLGtCQUFlLEVBQ3ZCLE1BQU1DLEVBQWUsRUFBUSxJQUN2QkMsRUFBaUIsRUFBUSxJQUN6QkMsRUFBaUIsRUFBUSxJQUN6QkMsRUFBVyxFQUFRLEtBNkd6Qk4sRUFBUUUsYUE1R2EsQ0FBQ0ssRUFBV0MsRUFBR0MsRUFBR0MsRUFBSUMsS0FDdkMsTUFBTUMsRUFBYUMsS0FBS0MsTUFBTU4sR0FDeEJPLEVBQWFGLEtBQUtDLE1BQU1MLEdBQ3hCTyxFQUFXSCxLQUFLQyxNQUFN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QU9xQixTQUFXYixFQUNsQkEsS0FFQWhDLEVBQU04QyxTQUNOaEIsSUFHQTlCLEVBQU0rQyxPQUFTakIsRyIsImZpbGUiOiJmYXN0X2JsdXJfY3B1LmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5hdmVyYWdlTmFpdmUgPSB2b2lkIDA7XHJcbmNvbnN0IGFkZDRNdXRhdGVfMSA9IHJlcXVpcmUoXCIuLi91dGlscy9hZGQ0TXV0YXRlXCIpO1xyXG5jb25zdCBmbG9vcjRNdXRhdGVfMSA9IHJlcXVpcmUoXCIuLi91dGlscy9mbG9vcjRNdXRhdGVcIik7XHJcbmNvbnN0IHNjYWxlNE11dGF0ZV8xID0gcmVxdWlyZShcIi4uL3V0aWxzL3NjYWxlNE11dGF0ZVwiKTtcclxuY29uc3QgY2FudmFzXzEgPSByZXF1aXJlKFwiLi9jYW52YXNcIik7XHJcbmNvbnN0IGF2ZXJhZ2VOYWl2ZSA9IChpbWFnZURhdGEsIHgsIHksIHgyLCB5MikgPT4ge1xyXG4gICAgY29uc3Qgc3RhcnRDZWxsWCA9IE1hdGguZmxvb3IoeCk7XHJcbiAgICBjb25zdCBzdGFydENlbGxZID0gTWF0aC5mbG9vcih5KTtcclxuICAgIGNvbnN0IGVuZENlbGxYID0gTWF0aC5mbG9vcih4Mik7XHJcbiAgICBjb25zdCBlbmRDZWxsWSA9IE1hdGguZmxvb3IoeTIpO1xyXG4gICAgLy9yYW5nZSBjb250YWluZWQgaW4gb25lIHBpeGVsXHJcbiAgICBpZiAoc3RhcnRDZWxsWCA9PSBlbmRDZWxsWCAmJiBzdGFydENlbGxZID09IGVuZENlbGxZKSB7XHJcbiAgICAgICAgcmV0dXJuIGZsb29yNE11dGF0ZV8xLmZsb29yNE11dGF0ZShjYW52YXNfMS5nZXRQaXhlbChpbWFnZURhdGEsIHN0YXJ0Q2VsbFgsIHN0YXJ0Q2VsbFkpKTtcclxuICAgIH1cclxuICAgIGNvbnN0IHdpZHRoID0geDIgLSB4O1xyXG4gICAgY29uc3QgaGVpZ2h0ID0geTIgLSB5O1xyXG4gICAgY29uc3QgcGl4ZWxBcmVhID0gd2lkdGggKiBoZWlnaHQ7XHJcbiAgICBjb25zdCBjb2xvdXJOb3JtYWxpc2VyID0gMSAvIHBpeGVsQXJlYTtcclxuICAgIGNvbnN0IGlubmVyQ2VsbFggPSBNYXRoLmNlaWwoeCk7XHJcbiAgICBjb25zdCBpbm5lckNlbGxZID0gTWF0aC5jZWlsKHkpO1xyXG4gICAgY29uc3QgaW5uZXJDZWxsWDIgPSBNYXRoLmZsb29yKHgyKTtcclxuICAgIGNvbnN0IGlubmVyQ2VsbFkyID0gTWF0aC5mbG9vcih5Mik7XHJcbiAgICBjb25zdCBsZWZ0RGlmZiA9IGlubmVyQ2VsbFggLSB4O1xyXG4gICAgY29uc3QgdG9wRGlmZiA9IGlubmVyQ2VsbFkgLSB5O1xyXG4gICAgY29uc3QgcmlnaHREaWZmID0geDIgLSBpbm5lckNlbGxYMjtcclxuICAgIGNvbnN0IGJvdHRvbURpZmYgPSB5MiAtIGlubmVyQ2VsbFkyO1xyXG4gICAgY29uc3QgY29sb3VyID0gWzAsIDAsIDAsIDBdO1xyXG4gICAgLy9wZXJoYXBzIHdlIHNob3VsZCBiZSBibGVuZGluZyBhbm90aGVyIHdheSAoYWxwaGEpIGluc3RlYWQgb2YgYWRkaW5nP1xyXG4gICAgLy9zaW5nbGUgaG9yaXpvbnRhbCBzdHJpcFxyXG4gICAgaWYgKHN0YXJ0Q2VsbFggPT0gZW5kQ2VsbFgpIHtcclxuICAgICAgICBpZiAodG9wRGlmZikge1xyXG4gICAgICAgICAgICBhZGQ0TXV0YXRlXzEuYWRkNE11dGF0ZShjb2xvdXIsIHNjYWxlNE11dGF0ZV8xLnNjYWxlNE11dGF0ZShjYW52YXNfMS5nZXRQaXhlbChpbWFnZURhdGEsIHN0YXJ0Q2VsbFgsIHN0YXJ0Q2VsbFkpLCB3aWR0aCAqIHRvcERpZmYpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGJvdHRvbURpZmYpIHtcclxuICAgICAgICAgICAgYWRkNE11dGF0ZV8xLmFkZDRNdXRhdGUoY29sb3VyLCBzY2FsZTRNdXRhdGVfMS5zY2FsZTRNdXRhdGUoY2FudmFzXzEuZ2V0UGl4ZWwoaW1hZ2VEYXRhLCBlbmRDZWxsWCwgZW5kQ2VsbFkpLCB3aWR0aCAqIGJvdHRvbURpZmYpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgbWlkQ29sb3VyID0gWzAsIDAsIDAsIDBdO1xyXG4gICAgICAgIGZvciAobGV0IGogPSBpbm5lckNlbGxZOyBqIDwgaW5uZXJDZWxsWTI7IGorKykge1xyXG4gICAgICAgICAgICBhZGQ0TXV0YXRlXzEuYWRkNE11dGF0ZShtaWRDb2xvdXIsIGNhbnZhc18xLmdldFBpeGVsKGltYWdlRGF0YSwgc3RhcnRDZWxsWCwgaikpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBhZGQ0TXV0YXRlXzEuYWRkNE11dGF0ZShjb2xvdXIsIHNjYWxlNE11dGF0ZV8xLnNjYWxlNE11dGF0ZShtaWRDb2xvdXIsIHdpZHRoKSk7XHJcbiAgICAgICAgcmV0dXJuIGZsb29yNE11dGF0ZV8xLmZsb29yNE11dGF0ZShzY2FsZTRNdXRhdGVfMS5zY2FsZTRNdXRhdGUoY29sb3VyLCBjb2xvdXJOb3JtYWxpc2VyKSk7XHJcbiAgICB9XHJcbiAgICAvL3NpbmdsZSB2ZXJ0aWNhbCBzdHJpcFxyXG4gICAgaWYgKHN0YXJ0Q2VsbFkgPT0gZW5kQ2VsbFkpIHtcclxuICAgICAgICBpZiAobGVmdERpZmYpIHtcclxuICAgICAgICAgICAgYWRkNE11dGF0ZV8xLmFkZDRNdXRhdGUoY29sb3VyLCBzY2FsZTRNdXRhdGVfMS5zY2FsZTRNdXRhdGUoY2FudmFzXzEuZ2V0UGl4ZWwoaW1hZ2VEYXRhLCBzdGFydENlbGxYLCBzdGFydENlbGxZKSwgaGVpZ2h0ICogbGVmdERpZmYpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHJpZ2h0RGlmZikge1xyXG4gICAgICAgICAgICBhZGQ0TXV0YXRlXzEuYWRkNE11dGF0ZShjb2xvdXIsIHNjYWxlNE11dGF0ZV8xLnNjYWxlNE11dGF0ZShjYW52YXNfMS5nZXRQaXhlbChpbWFnZURhdGEsIGVuZENlbGxYLCBlbmRDZWxsWSksIGhlaWdodCAqIHJpZ2h0RGlmZikpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBtaWRDb2xvdXIgPSBbMCwgMCwgMCwgMF07XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IGlubmVyQ2VsbFg7IGkgPCBpbm5lckNlbGxYMjsgaSsrKSB7XHJcbiAgICAgICAgICAgIGFkZDRNdXRhdGVfMS5hZGQ0TXV0YXRlKG1pZENvbG91ciwgY2FudmFzXzEuZ2V0UGl4ZWwoaW1hZ2VEYXRhLCBpLCBzdGFydENlbGxZKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGFkZDRNdXRhdGVfMS5hZGQ0TXV0YXRlKGNvbG91ciwgc2NhbGU0TXV0YXRlXzEuc2NhbGU0TXV0YXRlKG1pZENvbG91ciwgaGVpZ2h0KSk7XHJcbiAgICAgICAgcmV0dXJuIGZsb29yNE11dGF0ZV8xLmZsb29yNE11dGF0ZShzY2FsZTRNdXRhdGVfMS5zY2FsZTRNdXRhdGUoY29sb3VyLCBjb2xvdXJOb3JtYWxpc2VyKSk7XHJcbiAgICB9XHJcbiAgICAvL2Nvcm5lciBjZWxsc1xyXG4gICAgaWYgKHRvcERpZmYpIHtcclxuICAgICAgICBpZiAobGVmdERpZmYpIHtcclxuICAgICAgICAgICAgYWRkNE11dGF0ZV8xLmFkZDRNdXRhdGUoY29sb3VyLCBzY2FsZTRNdXRhdGVfMS5zY2FsZTRNdXRhdGUoY2FudmFzXzEuZ2V0UGl4ZWwoaW1hZ2VEYXRhLCBzdGFydENlbGxYLCBzdGFydENlbGxZKSwgbGVmdERpZmYgKiB0b3BEaWZmKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChyaWdodERpZmYpIHtcclxuICAgICAgICAgICAgYWRkNE11dGF0ZV8xLmFkZDRNdXRhdGUoY29sb3VyLCBzY2FsZTRNdXRhdGVfMS5zY2FsZTRNdXRhdGUoY2FudmFzXzEuZ2V0UGl4ZWwoaW1hZ2VEYXRhLCBlbmRDZWxsWCwgc3RhcnRDZWxsWSksIHJpZ2h0RGlmZiAqIHRvcERpZmYpKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAoYm90dG9tRGlmZikge1xyXG4gICAgICAgIGlmIChsZWZ0RGlmZikge1xyXG4gICAgICAgICAgICBhZGQ0TXV0YXRlXzEuYWRkNE11dGF0ZShjb2xvdXIsIHNjYWxlNE11dGF0ZV8xLnNjYWxlNE11dGF0ZShjYW52YXNfMS5nZXRQaXhlbChpbWFnZURhdGEsIHN0YXJ0Q2VsbFgsIGVuZENlbGxZKSwgbGVmdERpZmYgKiBib3R0b21EaWZmKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChyaWdodERpZmYpIHtcclxuICAgICAgICAgICAgYWRkNE11dGF0ZV8xLmFkZDRNdXRhdGUoY29sb3VyLCBzY2FsZTRNdXRhdGVfMS5zY2FsZTRNdXRhdGUoY2FudmFzXzEuZ2V0UGl4ZWwoaW1hZ2VEYXRhLCBlbmRDZWxsWCwgZW5kQ2VsbFkpLCByaWdodERpZmYgKiBib3R0b21EaWZmKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy9mcmFjdGlvbmFsIHN0cmlwc1xyXG4gICAgaWYgKHRvcERpZmYpIHtcclxuICAgICAgICBjb25zdCB0b3BDb2xvdXIgPSBbMCwgMCwgMCwgMF07XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IGlubmVyQ2VsbFg7IGkgPCBpbm5lckNlbGxYMjsgaSsrKSB7XHJcbiAgICAgICAgICAgIGFkZDRNdXRhdGVfMS5hZGQ0TXV0YXRlKHRvcENvbG91ciwgY2FudmFzXzEuZ2V0UGl4ZWwoaW1hZ2VEYXRhLCBpLCBzdGFydENlbGxZKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGFkZDRNdXRhdGVfMS5hZGQ0TXV0YXRlKGNvbG91ciwgc2NhbGU0TXV0YXRlXzEuc2NhbGU0TXV0YXRlKHRvcENvbG91ciwgdG9wRGlmZikpO1xyXG4gICAgfVxyXG4gICAgaWYgKGxlZnREaWZmKSB7XHJcbiAgICAgICAgY29uc3QgbGVmdENvbG91ciA9IFswLCAwLCAwLCAwXTtcclxuICAgICAgICBmb3IgKGxldCBqID0gaW5uZXJDZWxsWTsgaiA8IGlubmVyQ2VsbFkyOyBqKyspIHtcclxuICAgICAgICAgICAgYWRkNE11dGF0ZV8xLmFkZDRNdXRhdGUobGVmdENvbG91ciwgY2FudmFzXzEuZ2V0UGl4ZWwoaW1hZ2VEYXRhLCBzdGFydENlbGxYLCBqKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGFkZDRNdXRhdGVfMS5hZGQ0TXV0YXRlKGNvbG91ciwgc2NhbGU0TXV0YXRlXzEuc2NhbGU0TXV0YXRlKGxlZnRDb2xvdXIsIGxlZnREaWZmKSk7XHJcbiAgICB9XHJcbiAgICBpZiAoYm90dG9tRGlmZikge1xyXG4gICAgICAgIGNvbnN0IGJvdHRvbUNvbG91ciA9IFswLCAwLCAwLCAwXTtcclxuICAgICAgICBmb3IgKGxldCBpID0gaW5uZXJDZWxsWDsgaSA8IGlubmVyQ2VsbFgyOyBpKyspIHtcclxuICAgICAgICAgICAgYWRkNE11dGF0ZV8xLmFkZDRNdXRhdGUoYm90dG9tQ29sb3VyLCBjYW52YXNfMS5nZXRQaXhlbChpbWFnZURhdGEsIGksIGVuZENlbGxZKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGFkZDRNdXRhdGVfMS5hZGQ0TXV0YXRlKGNvbG91ciwgc2NhbGU0TXV0YXRlXzEuc2NhbGU0TXV0YXRlKGJvdHRvbUNvbG91ciwgYm90dG9tRGlmZikpO1xyXG4gICAgfVxyXG4gICAgaWYgKHJpZ2h0RGlmZikge1xyXG4gICAgICAgIGNvbnN0IHJpZ2h0Q29sb3VyID0gWzAsIDAsIDAsIDBdO1xyXG4gICAgICAgIGZvciAobGV0IGogPSBpbm5lckNlbGxZOyBqIDwgaW5uZXJDZWxsWTI7IGorKykge1xyXG4gICAgICAgICAgICBhZGQ0TXV0YXRlXzEuYWRkNE11dGF0ZShyaWdodENvbG91ciwgY2FudmFzXzEuZ2V0UGl4ZWwoaW1hZ2VEYXRhLCBlbmRDZWxsWCwgaikpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBhZGQ0TXV0YXRlXzEuYWRkNE11dGF0ZShjb2xvdXIsIHNjYWxlNE11dGF0ZV8xLnNjYWxlNE11dGF0ZShyaWdodENvbG91ciwgcmlnaHREaWZmKSk7XHJcbiAgICB9XHJcbiAgICAvL2lubmVyIHBhcnRzXHJcbiAgICBmb3IgKGxldCBpID0gaW5uZXJDZWxsWDsgaSA8IGlubmVyQ2VsbFgyOyBpKyspIHtcclxuICAgICAgICBmb3IgKGxldCBqID0gaW5uZXJDZWxsWTsgaiA8IGlubmVyQ2VsbFkyOyBqKyspIHtcclxuICAgICAgICAgICAgYWRkNE11dGF0ZV8xLmFkZDRNdXRhdGUoY29sb3VyLCBjYW52YXNfMS5nZXRQaXhlbChpbWFnZURhdGEsIGksIGopKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvL25vdyB3ZSBoYXZlIGFuIGFjY3VtdWxhdGl2ZSBwaXhlbCB2YWx1ZSB0aGF0IGNvdmVycyB0aGUgd2hvbGUgYXJlYSBzbyBqdXN0IGF2ZXJhZ2UgaXRcclxuICAgIHJldHVybiBmbG9vcjRNdXRhdGVfMS5mbG9vcjRNdXRhdGUoc2NhbGU0TXV0YXRlXzEuc2NhbGU0TXV0YXRlKGNvbG91ciwgY29sb3VyTm9ybWFsaXNlcikpO1xyXG59O1xyXG5leHBvcnRzLmF2ZXJhZ2VOYWl2ZSA9IGF2ZXJhZ2VOYWl2ZTtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5hdmVyYWdlU3VtbWVkID0gdm9pZCAwO1xyXG5jb25zdCBhZGQ0TXV0YXRlXzEgPSByZXF1aXJlKFwiLi4vdXRpbHMvYWRkNE11dGF0ZVwiKTtcclxuY29uc3QgZmxvb3I0TXV0YXRlXzEgPSByZXF1aXJlKFwiLi4vdXRpbHMvZmxvb3I0TXV0YXRlXCIpO1xyXG5jb25zdCBzY2FsZTRNdXRhdGVfMSA9IHJlcXVpcmUoXCIuLi91dGlscy9zY2FsZTRNdXRhdGVcIik7XHJcbmNvbnN0IHN1YnRyYWN0NE11dGF0ZV8xID0gcmVxdWlyZShcIi4uL3V0aWxzL3N1YnRyYWN0NE11dGF0ZVwiKTtcclxuY29uc3QgY2FudmFzXzEgPSByZXF1aXJlKFwiLi9jYW52YXNcIik7XHJcbmNvbnN0IGdldFN1bW1lZFRleHR1cmVWYWwgPSAoc3VtbWVkVGV4dHVyZSwgeCwgeSkgPT4ge1xyXG4gICAgdHJ5IHtcclxuICAgICAgICBjb25zdCByZXN1bHQgPSB4ID49IDAgJiYgeSA+PSAwID8gc3VtbWVkVGV4dHVyZVt5XVt4XSA6IFswLCAwLCAwLCAwXTtcclxuICAgICAgICBpZiAocmVzdWx0ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ05vIHN1bW1lZCB0ZXh0dXJlIHZhbHVlJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZXJyKSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcih4LCB5KTtcclxuICAgICAgICB0aHJvdyBlcnI7XHJcbiAgICB9XHJcbn07XHJcbmNvbnN0IGdldFN1bW1lZEFyZWEgPSAoc3VtbWVkVGV4dHVyZSwgeCwgeSwgeDIsIHkyKSA9PiB7XHJcbiAgICBjb25zdCByZXN1bHQgPSBbMCwgMCwgMCwgMF07XHJcbiAgICB0cnkge1xyXG4gICAgICAgIGFkZDRNdXRhdGVfMS5hZGQ0TXV0YXRlKHJlc3VsdCwgZ2V0U3VtbWVkVGV4dHVyZVZhbChzdW1tZWRUZXh0dXJlLCB4MiwgeTIpKTtcclxuICAgICAgICBzdWJ0cmFjdDRNdXRhdGVfMS5zdWJ0cmFjdDRNdXRhdGUocmVzdWx0LCBnZXRTdW1tZWRUZXh0dXJlVmFsKHN1bW1lZFRleHR1cmUsIHgsIHkyKSk7XHJcbiAgICAgICAgc3VidHJhY3Q0TXV0YXRlXzEuc3VidHJhY3Q0TXV0YXRlKHJlc3VsdCwgZ2V0U3VtbWVkVGV4dHVyZVZhbChzdW1tZWRUZXh0dXJlLCB4MiwgeSkpO1xyXG4gICAgICAgIGFkZDRNdXRhdGVfMS5hZGQ0TXV0YXRlKHJlc3VsdCwgZ2V0U3VtbWVkVGV4dHVyZVZhbChzdW1tZWRUZXh0dXJlLCB4LCB5KSk7XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZXJyKSB7XHJcbiAgICAgICAgY29uc29sZS5lcnJvcihbXHJcbiAgICAgICAgICAgIHJlc3VsdCxcclxuICAgICAgICAgICAgZ2V0U3VtbWVkVGV4dHVyZVZhbChzdW1tZWRUZXh0dXJlLCB4MiwgeTIpLFxyXG4gICAgICAgICAgICBnZXRTdW1tZWRUZXh0dXJlVmFsKHN1bW1lZFRleHR1cmUsIHgsIHkyKSxcclxuICAgICAgICAgICAgZ2V0U3VtbWVkVGV4dHVyZVZhbChzdW1tZWRUZXh0dXJlLCB4MiwgeSksXHJcbiAgICAgICAgICAgIGdldFN1bW1lZFRleHR1cmVWYWwoc3VtbWVkVGV4dHVyZSwgeCwgeSlcclxuICAgICAgICBdKTtcclxuICAgICAgICB0aHJvdyBlcnI7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59O1xyXG4vL3Jlc3VsdHMgaW4gdXAgdG8gMjQgdGV4dHVyZSBsb29rdXBzIGJhc2VkIG9uIGNvbXBsZXhpdHkgb2YgcmFuZ2UsIHdoYXRldmVyIHNpemUgdGhlIGltYWdlIGlzXHJcbmNvbnN0IGF2ZXJhZ2VTdW1tZWQgPSAoc3VtbWVkVGV4dHVyZSwgaW1hZ2VEYXRhLCB4LCB5LCB4MiwgeTIpID0+IHtcclxuICAgIGNvbnN0IHN0YXJ0Q2VsbFggPSBNYXRoLmZsb29yKHgpO1xyXG4gICAgY29uc3Qgc3RhcnRDZWxsWSA9IE1hdGguZmxvb3IoeSk7XHJcbiAgICBjb25zdCBlbmRDZWxsWCA9IE1hdGguZmxvb3IoeDIpO1xyXG4gICAgY29uc3QgZW5kQ2VsbFkgPSBNYXRoLmZsb29yKHkyKTtcclxuICAgIC8vcmFuZ2UgY29udGFpbmVkIGluIG9uZSBwaXhlbFxyXG4gICAgaWYgKHN0YXJ0Q2VsbFggPT0gZW5kQ2VsbFggJiYgc3RhcnRDZWxsWSA9PSBlbmRDZWxsWSkge1xyXG4gICAgICAgIHJldHVybiBmbG9vcjRNdXRhdGVfMS5mbG9vcjRNdXRhdGUoY2FudmFzXzEuZ2V0UGl4ZWwoaW1hZ2VEYXRhLCBzdGFydENlbGxYLCBzdGFydENlbGxZKSk7XHJcbiAgICB9XHJcbiAgICBjb25zdCB3aWR0aCA9IHgyIC0geDtcclxuICAgIGNvbnN0IGhlaWdodCA9IHkyIC0geTtcclxuICAgIGNvbnN0IHBpeGVsQXJlYSA9IHdpZHRoICogaGVpZ2h0O1xyXG4gICAgY29uc3QgY29sb3VyTm9ybWFsaXNlciA9IDEgLyBwaXhlbEFyZWE7XHJcbiAgICBjb25zdCBpbm5lckNlbGxYID0gTWF0aC5jZWlsKHgpO1xyXG4gICAgY29uc3QgaW5uZXJDZWxsWSA9IE1hdGguY2VpbCh5KTtcclxuICAgIGNvbnN0IGlubmVyQ2VsbFgyID0gTWF0aC5mbG9vcih4Mik7XHJcbiAgICBjb25zdCBpbm5lckNlbGxZMiA9IE1hdGguZmxvb3IoeTIpO1xyXG4gICAgY29uc3QgbGVmdERpZmYgPSBpbm5lckNlbGxYIC0geDtcclxuICAgIGNvbnN0IHRvcERpZmYgPSBpbm5lckNlbGxZIC0geTtcclxuICAgIGNvbnN0IHJpZ2h0RGlmZiA9IHgyIC0gaW5uZXJDZWxsWDI7XHJcbiAgICBjb25zdCBib3R0b21EaWZmID0geTIgLSBpbm5lckNlbGxZMjtcclxuICAgIGNvbnN0IGNvbG91ciA9IFswLCAwLCAwLCAwXTtcclxuICAgIC8vc2luZ2xlIGhvcml6b250YWwgc3RyaXBcclxuICAgIGlmIChzdGFydENlbGxYID09IGVuZENlbGxYKSB7XHJcbiAgICAgICAgaWYgKHRvcERpZmYpIHtcclxuICAgICAgICAgICAgYWRkNE11dGF0ZV8xLmFkZDRNdXRhdGUoY29sb3VyLCBzY2FsZTRNdXRhdGVfMS5zY2FsZTRNdXRhdGUoY2FudmFzXzEuZ2V0UGl4ZWwoaW1hZ2VEYXRhLCBzdGFydENlbGxYLCBzdGFydENlbGxZKSwgd2lkdGggKiB0b3BEaWZmKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChib3R0b21EaWZmKSB7XHJcbiAgICAgICAgICAgIGFkZDRNdXRhdGVfMS5hZGQ0TXV0YXRlKGNvbG91ciwgc2NhbGU0TXV0YXRlXzEuc2NhbGU0TXV0YXRlKGNhbnZhc18xLmdldFBpeGVsKGltYWdlRGF0YSwgZW5kQ2VsbFgsIGVuZENlbGxZKSwgd2lkdGggKiBib3R0b21EaWZmKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGFkZDRNdXRhdGVfMS5hZGQ0TXV0YXRlKGNvbG91ciwgc2NhbGU0TXV0YXRlXzEuc2NhbGU0TXV0YXRlKGdldFN1bW1lZEFyZWEoc3VtbWVkVGV4dHVyZSwgc3RhcnRDZWxsWCAtIDEsIGlubmVyQ2VsbFkgLSAxLCBzdGFydENlbGxYLCBpbm5lckNlbGxZMiAtIDEpLCB3aWR0aCkpO1xyXG4gICAgICAgIHJldHVybiBmbG9vcjRNdXRhdGVfMS5mbG9vcjRNdXRhdGUoc2NhbGU0TXV0YXRlXzEuc2NhbGU0TXV0YXRlKGNvbG91ciwgY29sb3VyTm9ybWFsaXNlcikpO1xyXG4gICAgfVxyXG4gICAgLy9zaW5nbGUgdmVydGljYWwgc3RyaXBcclxuICAgIGlmIChzdGFydENlbGxZID09IGVuZENlbGxZKSB7XHJcbiAgICAgICAgaWYgKGxlZnREaWZmKSB7XHJcbiAgICAgICAgICAgIGFkZDRNdXRhdGVfMS5hZGQ0TXV0YXRlKGNvbG91ciwgc2NhbGU0TXV0YXRlXzEuc2NhbGU0TXV0YXRlKGNhbnZhc18xLmdldFBpeGVsKGltYWdlRGF0YSwgc3RhcnRDZWxsWCwgc3RhcnRDZWxsWSksIGhlaWdodCAqIGxlZnREaWZmKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChyaWdodERpZmYpIHtcclxuICAgICAgICAgICAgYWRkNE11dGF0ZV8xLmFkZDRNdXRhdGUoY29sb3VyLCBzY2FsZTRNdXRhdGVfMS5zY2FsZTRNdXRhdGUoY2FudmFzXzEuZ2V0UGl4ZWwoaW1hZ2VEYXRhLCBlbmRDZWxsWCwgZW5kQ2VsbFkpLCBoZWlnaHQgKiByaWdodERpZmYpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgYWRkNE11dGF0ZV8xLmFkZDRNdXRhdGUoY29sb3VyLCBzY2FsZTRNdXRhdGVfMS5zY2FsZTRNdXRhdGUoZ2V0U3VtbWVkQXJlYShzdW1tZWRUZXh0dXJlLCBpbm5lckNlbGxYIC0gMSwgc3RhcnRDZWxsWSAtIDEsIGlubmVyQ2VsbFgyIC0gMSwgc3RhcnRDZWxsWSksIGhlaWdodCkpO1xyXG4gICAgICAgIHJldHVybiBmbG9vcjRNdXRhdGVfMS5mbG9vcjRNdXRhdGUoc2NhbGU0TXV0YXRlXzEuc2NhbGU0TXV0YXRlKGNvbG91ciwgY29sb3VyTm9ybWFsaXNlcikpO1xyXG4gICAgfVxyXG4gICAgLy9jb3JuZXIgY2VsbHNcclxuICAgIGlmICh0b3BEaWZmKSB7XHJcbiAgICAgICAgaWYgKGxlZnREaWZmKSB7XHJcbiAgICAgICAgICAgIGFkZDRNdXRhdGVfMS5hZGQ0TXV0YXRlKGNvbG91ciwgc2NhbGU0TXV0YXRlXzEuc2NhbGU0TXV0YXRlKGNhbnZhc18xLmdldFBpeGVsKGltYWdlRGF0YSwgc3RhcnRDZWxsWCwgc3RhcnRDZWxsWSksIGxlZnREaWZmICogdG9wRGlmZikpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAocmlnaHREaWZmKSB7XHJcbiAgICAgICAgICAgIGFkZDRNdXRhdGVfMS5hZGQ0TXV0YXRlKGNvbG91ciwgc2NhbGU0TXV0YXRlXzEuc2NhbGU0TXV0YXRlKGNhbnZhc18xLmdldFBpeGVsKGltYWdlRGF0YSwgZW5kQ2VsbFgsIHN0YXJ0Q2VsbFkpLCByaWdodERpZmYgKiB0b3BEaWZmKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYgKGJvdHRvbURpZmYpIHtcclxuICAgICAgICBpZiAobGVmdERpZmYpIHtcclxuICAgICAgICAgICAgYWRkNE11dGF0ZV8xLmFkZDRNdXRhdGUoY29sb3VyLCBzY2FsZTRNdXRhdGVfMS5zY2FsZTRNdXRhdGUoY2FudmFzXzEuZ2V0UGl4ZWwoaW1hZ2VEYXRhLCBzdGFydENlbGxYLCBlbmRDZWxsWSksIGxlZnREaWZmICogYm90dG9tRGlmZikpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAocmlnaHREaWZmKSB7XHJcbiAgICAgICAgICAgIGFkZDRNdXRhdGVfMS5hZGQ0TXV0YXRlKGNvbG91ciwgc2NhbGU0TXV0YXRlXzEuc2NhbGU0TXV0YXRlKGNhbnZhc18xLmdldFBpeGVsKGltYWdlRGF0YSwgZW5kQ2VsbFgsIGVuZENlbGxZKSwgcmlnaHREaWZmICogYm90dG9tRGlmZikpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8vZnJhY3Rpb25hbCBzdHJpcHNcclxuICAgIGlmICh0b3BEaWZmKSB7XHJcbiAgICAgICAgYWRkNE11dGF0ZV8xLmFkZDRNdXRhdGUoY29sb3VyLCBzY2FsZTRNdXRhdGVfMS5zY2FsZTRNdXRhdGUoZ2V0U3VtbWVkQXJlYShzdW1tZWRUZXh0dXJlLCBpbm5lckNlbGxYIC0gMSwgc3RhcnRDZWxsWSAtIDEsIGlubmVyQ2VsbFgyIC0gMSwgc3RhcnRDZWxsWSksIHRvcERpZmYpKTtcclxuICAgIH1cclxuICAgIGlmIChsZWZ0RGlmZikge1xyXG4gICAgICAgIGFkZDRNdXRhdGVfMS5hZGQ0TXV0YXRlKGNvbG91ciwgc2NhbGU0TXV0YXRlXzEuc2NhbGU0TXV0YXRlKGdldFN1bW1lZEFyZWEoc3VtbWVkVGV4dHVyZSwgc3RhcnRDZWxsWCAtIDEsIGlubmVyQ2VsbFkgLSAxLCBzdGFydENlbGxYLCBpbm5lckNlbGxZMiAtIDEpLCBsZWZ0RGlmZikpO1xyXG4gICAgfVxyXG4gICAgaWYgKGJvdHRvbURpZmYpIHtcclxuICAgICAgICBhZGQ0TXV0YXRlXzEuYWRkNE11dGF0ZShjb2xvdXIsIHNjYWxlNE11dGF0ZV8xLnNjYWxlNE11dGF0ZShnZXRTdW1tZWRBcmVhKHN1bW1lZFRleHR1cmUsIGlubmVyQ2VsbFggLSAxLCBlbmRDZWxsWSAtIDEsIGlubmVyQ2VsbFgyIC0gMSwgZW5kQ2VsbFkpLCBib3R0b21EaWZmKSk7XHJcbiAgICB9XHJcbiAgICBpZiAocmlnaHREaWZmKSB7XHJcbiAgICAgICAgYWRkNE11dGF0ZV8xLmFkZDRNdXRhdGUoY29sb3VyLCBzY2FsZTRNdXRhdGVfMS5zY2FsZTRNdXRhdGUoZ2V0U3VtbWVkQXJlYShzdW1tZWRUZXh0dXJlLCBlbmRDZWxsWCAtIDEsIGlubmVyQ2VsbFkgLSAxLCBlbmRDZWxsWCwgaW5uZXJDZWxsWTIgLSAxKSwgcmlnaHREaWZmKSk7XHJcbiAgICB9XHJcbiAgICAvL2lubmVyIHBhcnRzXHJcbiAgICBhZGQ0TXV0YXRlXzEuYWRkNE11dGF0ZShjb2xvdXIsIGdldFN1bW1lZEFyZWEoc3VtbWVkVGV4dHVyZSwgaW5uZXJDZWxsWCAtIDEsIGlubmVyQ2VsbFkgLSAxLCBpbm5lckNlbGxYMiAtIDEsIGlubmVyQ2VsbFkyIC0gMSkpO1xyXG4gICAgLy9ub3cgd2UgaGF2ZSBhbiBhY2N1bXVsYXRpdmUgcGl4ZWwgdmFsdWUgdGhhdCBjb3ZlcnMgdGhlIHdob2xlIGFyZWEgc28ganVzdCBhdmVyYWdlIGl0XHJcbiAgICByZXR1cm4gZmxvb3I0TXV0YXRlXzEuZmxvb3I0TXV0YXRlKHNjYWxlNE11dGF0ZV8xLnNjYWxlNE11dGF0ZShjb2xvdXIsIGNvbG91ck5vcm1hbGlzZXIpKTtcclxufTtcclxuZXhwb3J0cy5hdmVyYWdlU3VtbWVkID0gYXZlcmFnZVN1bW1lZDtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5zZXRQaXhlbCA9IGV4cG9ydHMuZ2V0UGl4ZWwgPSB2b2lkIDA7XHJcbmNvbnN0IGdldFBpeGVsID0gKGltYWdlRGF0YSwgeCwgeSkgPT4ge1xyXG4gICAgY29uc3Qgc2FtcGxlSW5kZXggPSAoaW1hZ2VEYXRhLndpZHRoICogTWF0aC5mbG9vcih5KSArIE1hdGguZmxvb3IoeCkpICogNDtcclxuICAgIHJldHVybiBpbWFnZURhdGEuZGF0YS5zbGljZShzYW1wbGVJbmRleCwgc2FtcGxlSW5kZXggKyA0KTtcclxufTtcclxuZXhwb3J0cy5nZXRQaXhlbCA9IGdldFBpeGVsO1xyXG5jb25zdCBzZXRQaXhlbCA9IChpbWFnZURhdGEsIHgsIHksIHJnYmEpID0+IHtcclxuICAgIGltYWdlRGF0YS5kYXRhLnNldChyZ2JhLCAoTWF0aC5mbG9vcih5KSAqIGltYWdlRGF0YS53aWR0aCArIE1hdGguZmxvb3IoeCkpICogNCk7XHJcbn07XHJcbmV4cG9ydHMuc2V0UGl4ZWwgPSBzZXRQaXhlbDtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5jcmVhdGVSZW5kZXJlciA9IHZvaWQgMDtcclxuY29uc3QgY3JlYXRlUmVuZGVyZXIgPSAocmVuZGVyRnVuYywgYWZ0ZXJSZW5kZXJGdW5jKSA9PiB7XHJcbiAgICBsZXQgZHJhd2luZyA9IGZhbHNlO1xyXG4gICAgcmV0dXJuICgpID0+IHtcclxuICAgICAgICBpZiAoIWRyYXdpbmcpIHtcclxuICAgICAgICAgICAgZHJhd2luZyA9IHRydWU7XHJcbiAgICAgICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZW5kZXJGdW5jKCk7XHJcbiAgICAgICAgICAgICAgICBkcmF3aW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICBhZnRlclJlbmRlckZ1bmMgPT09IG51bGwgfHwgYWZ0ZXJSZW5kZXJGdW5jID09PSB2b2lkIDAgPyB2b2lkIDAgOiBhZnRlclJlbmRlckZ1bmMoKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxufTtcclxuZXhwb3J0cy5jcmVhdGVSZW5kZXJlciA9IGNyZWF0ZVJlbmRlcmVyO1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLmNyZWF0ZVN1bW1lZFRleHR1cmUgPSB2b2lkIDA7XHJcbmNvbnN0IGFkZDRNdXRhdGVfMSA9IHJlcXVpcmUoXCIuLi91dGlscy9hZGQ0TXV0YXRlXCIpO1xyXG5jb25zdCBzdWJ0cmFjdDRNdXRhdGVfMSA9IHJlcXVpcmUoXCIuLi91dGlscy9zdWJ0cmFjdDRNdXRhdGVcIik7XHJcbmNvbnN0IGNyZWF0ZVN1bW1lZFRleHR1cmUgPSAoaW1hZ2VEYXRhKSA9PiB7XHJcbiAgICBjb25zdCBzdW1tZWRUZXh0dXJlID0gbmV3IEFycmF5KGltYWdlRGF0YS5oZWlnaHQpO1xyXG4gICAgZm9yIChsZXQgaSA9IDAsIHkgPSAwOyB5IDwgaW1hZ2VEYXRhLmhlaWdodDsgeSsrKSB7XHJcbiAgICAgICAgc3VtbWVkVGV4dHVyZVt5XSA9IG5ldyBBcnJheShpbWFnZURhdGEud2lkdGgpO1xyXG4gICAgICAgIGZvciAobGV0IHggPSAwOyB4IDwgaW1hZ2VEYXRhLndpZHRoOyB4KyssIGkgKz0gNCkge1xyXG4gICAgICAgICAgICBjb25zdCBwaXggPSBuZXcgVWludDMyQXJyYXkoaW1hZ2VEYXRhLmRhdGEuc2xpY2UoaSwgaSArIDQpKTtcclxuICAgICAgICAgICAgaWYgKHggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICBhZGQ0TXV0YXRlXzEuYWRkNE11dGF0ZShwaXgsIHN1bW1lZFRleHR1cmVbeV1beCAtIDFdKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoeSA+IDApIHtcclxuICAgICAgICAgICAgICAgIGFkZDRNdXRhdGVfMS5hZGQ0TXV0YXRlKHBpeCwgc3VtbWVkVGV4dHVyZVt5IC0gMV1beF0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh4ID4gMCAmJiB5ID4gMCkge1xyXG4gICAgICAgICAgICAgICAgc3VidHJhY3Q0TXV0YXRlXzEuc3VidHJhY3Q0TXV0YXRlKHBpeCwgc3VtbWVkVGV4dHVyZVt5IC0gMV1beCAtIDFdKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBzdW1tZWRUZXh0dXJlW3ldW3hdID0gcGl4O1xyXG4gICAgICAgIH1cclxuICAgICAgICAvL2FkZCBhIHBhZGRlZCBjZWxsIG9uIHRoZSBlbmQgb2YgZWFjaCByb3dcclxuICAgICAgICAvKmNvbnN0IHBpeCA9IG5ldyBVaW50MzJBcnJheShzdW1tZWRUZXh0dXJlW3ldW2ltYWdlRGF0YS53aWR0aC0xXSk7XHJcblxyXG4gICAgICAgIGlmICh5ID4gMCkge1xyXG4gICAgICAgICAgICBhZGQ0TXV0YXRlKHBpeCwgc3VtbWVkVGV4dHVyZVt5LTFdW2ltYWdlRGF0YS53aWR0aF0pO1xyXG4gICAgICAgICAgICBzdWJ0cmFjdDRNdXRhdGUocGl4LCBzdW1tZWRUZXh0dXJlW3ktMV1baW1hZ2VEYXRhLndpZHRoLTFdKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHN1bW1lZFRleHR1cmVbeV1baW1hZ2VEYXRhLndpZHRoXSA9IHBpeDsqL1xyXG4gICAgfVxyXG4gICAgLy9hZGQgYSBwYWRkZWQgcm93XHJcbiAgICAvKnN1bW1lZFRleHR1cmVbaW1hZ2VEYXRhLmhlaWdodF0gPSBuZXcgQXJyYXkoaW1hZ2VEYXRhLndpZHRoICsgMSk7XHJcbiAgICAgICAgXHJcbiAgICBmb3IgKGxldCB4PTA7IHg8PWltYWdlRGF0YS53aWR0aDsgeCsrKSB7XHJcbiAgICAgICAgY29uc3QgcGl4ID0gbmV3IFVpbnQzMkFycmF5KHN1bW1lZFRleHR1cmVbaW1hZ2VEYXRhLmhlaWdodC0xXVt4XSk7XHJcblxyXG4gICAgICAgIGlmICh4ID4gMCkge1xyXG4gICAgICAgICAgICBhZGQ0TXV0YXRlKHBpeCwgc3VtbWVkVGV4dHVyZVtpbWFnZURhdGEuaGVpZ2h0XVt4LTFdKTtcclxuICAgICAgICAgICAgc3VidHJhY3Q0TXV0YXRlKHBpeCwgc3VtbWVkVGV4dHVyZVtpbWFnZURhdGEuaGVpZ2h0LTFdW3gtMV0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc3VtbWVkVGV4dHVyZVtpbWFnZURhdGEuaGVpZ2h0XVt4XSA9IHBpeDtcclxuICAgIH1cclxuICAgICovXHJcbiAgICByZXR1cm4gc3VtbWVkVGV4dHVyZTtcclxufTtcclxuZXhwb3J0cy5jcmVhdGVTdW1tZWRUZXh0dXJlID0gY3JlYXRlU3VtbWVkVGV4dHVyZTtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5tYWtlTG9nU2NhbGUgPSB2b2lkIDA7XHJcbmNvbnN0IG1ha2VMb2dTY2FsZSA9IChmcm9tLCB0bykgPT4ge1xyXG4gICAgY29uc3QgbWluID0gZnJvbSA/IE1hdGgubG9nKGZyb20pIDogMDtcclxuICAgIGNvbnN0IG1heCA9IE1hdGgubG9nKHRvKTtcclxuICAgIGNvbnN0IHNjYWxlID0gbWF4IC0gbWluO1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBmcm9tTGluZWFyOiAodmFsdWUpID0+IE1hdGguZXhwKG1pbiArIHNjYWxlICogdmFsdWUpLFxyXG4gICAgICAgIHRvTGluZWFyOiAobG9nVmFsdWUpID0+IChNYXRoLmxvZyhsb2dWYWx1ZSkgLSBtaW4pIC8gc2NhbGVcclxuICAgIH07XHJcbn07XHJcbmV4cG9ydHMubWFrZUxvZ1NjYWxlID0gbWFrZUxvZ1NjYWxlO1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLmFkZDRNdXRhdGUgPSB2b2lkIDA7XHJcbmNvbnN0IGFkZDRNdXRhdGUgPSAoYSwgYikgPT4ge1xyXG4gICAgYVswXSArPSBiWzBdO1xyXG4gICAgYVsxXSArPSBiWzFdO1xyXG4gICAgYVsyXSArPSBiWzJdO1xyXG4gICAgYVszXSArPSBiWzNdO1xyXG4gICAgcmV0dXJuIGE7XHJcbn07XHJcbmV4cG9ydHMuYWRkNE11dGF0ZSA9IGFkZDRNdXRhdGU7XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuY2xhbXAgPSB2b2lkIDA7XHJcbmNvbnN0IGNsYW1wID0gKHZhbCwgbWluLCBtYXgpID0+IHtcclxuICAgIHJldHVybiBNYXRoLm1heChNYXRoLm1pbih2YWwsIG1heCksIG1pbik7XHJcbn07XHJcbmV4cG9ydHMuY2xhbXAgPSBjbGFtcDtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5mbG9vcjRNdXRhdGUgPSB2b2lkIDA7XHJcbmNvbnN0IGZsb29yNE11dGF0ZSA9IChhKSA9PiB7XHJcbiAgICBhWzBdID0gTWF0aC5mbG9vcihhWzBdKTtcclxuICAgIGFbMV0gPSBNYXRoLmZsb29yKGFbMV0pO1xyXG4gICAgYVsyXSA9IE1hdGguZmxvb3IoYVsyXSk7XHJcbiAgICBhWzNdID0gTWF0aC5mbG9vcihhWzNdKTtcclxuICAgIHJldHVybiBhO1xyXG59O1xyXG5leHBvcnRzLmZsb29yNE11dGF0ZSA9IGZsb29yNE11dGF0ZTtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5nZXRJbWFnZURhdGEgPSB2b2lkIDA7XHJcbmNvbnN0IGdldEltYWdlRGF0YSA9IChpbWFnZSkgPT4ge1xyXG4gICAgY29uc3QgaW1hZ2VDYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcclxuICAgIGltYWdlQ2FudmFzLndpZHRoID0gaW1hZ2Uud2lkdGg7XHJcbiAgICBpbWFnZUNhbnZhcy5oZWlnaHQgPSBpbWFnZS5oZWlnaHQ7XHJcbiAgICBjb25zdCBpbWFnZUdyYXBoaWNzID0gaW1hZ2VDYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcclxuICAgIGlmICghaW1hZ2VHcmFwaGljcykge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignQ291bGQgbm90IGNyZWF0ZSBjYW52YXMgdG8gZXh0cmFjdCBpbWFnZSBkYXRhJyk7XHJcbiAgICB9XHJcbiAgICBpbWFnZUdyYXBoaWNzLmNsZWFyUmVjdCgwLCAwLCBpbWFnZUNhbnZhcy53aWR0aCwgaW1hZ2VDYW52YXMuaGVpZ2h0KTtcclxuICAgIGltYWdlR3JhcGhpY3MuZHJhd0ltYWdlKGltYWdlLCAwLCAwKTtcclxuICAgIHJldHVybiBpbWFnZUdyYXBoaWNzLmdldEltYWdlRGF0YSgwLCAwLCBpbWFnZUNhbnZhcy53aWR0aCwgaW1hZ2VDYW52YXMuaGVpZ2h0KTtcclxufTtcclxuZXhwb3J0cy5nZXRJbWFnZURhdGEgPSBnZXRJbWFnZURhdGE7XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuc2NhbGU0TXV0YXRlID0gdm9pZCAwO1xyXG5jb25zdCBzY2FsZTRNdXRhdGUgPSAoYSwgbWFnKSA9PiB7XHJcbiAgICBhWzBdICo9IG1hZztcclxuICAgIGFbMV0gKj0gbWFnO1xyXG4gICAgYVsyXSAqPSBtYWc7XHJcbiAgICBhWzNdICo9IG1hZztcclxuICAgIHJldHVybiBhO1xyXG59O1xyXG5leHBvcnRzLnNjYWxlNE11dGF0ZSA9IHNjYWxlNE11dGF0ZTtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5zdWJ0cmFjdDRNdXRhdGUgPSB2b2lkIDA7XHJcbmNvbnN0IHN1YnRyYWN0NE11dGF0ZSA9IChhLCBiKSA9PiB7XHJcbiAgICBhWzBdIC09IGJbMF07XHJcbiAgICBhWzFdIC09IGJbMV07XHJcbiAgICBhWzJdIC09IGJbMl07XHJcbiAgICBhWzNdIC09IGJbM107XHJcbiAgICByZXR1cm4gYTtcclxufTtcclxuZXhwb3J0cy5zdWJ0cmFjdDRNdXRhdGUgPSBzdWJ0cmFjdDRNdXRhdGU7XHJcbiIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jb25zdCBhdmVyYWdlTmFpdmVfMSA9IHJlcXVpcmUoXCIuLi9kcmF3L2F2ZXJhZ2VOYWl2ZVwiKTtcclxuY29uc3QgYXZlcmFnZVN1bW1lZF8xID0gcmVxdWlyZShcIi4uL2RyYXcvYXZlcmFnZVN1bW1lZFwiKTtcclxuY29uc3QgY3JlYXRlUmVuZGVyZXJfMSA9IHJlcXVpcmUoXCIuLi9kcmF3L2NyZWF0ZVJlbmRlcmVyXCIpO1xyXG5jb25zdCBjcmVhdGVTdW1tZWRUZXh0dXJlXzEgPSByZXF1aXJlKFwiLi4vZHJhdy9jcmVhdGVTdW1tZWRUZXh0dXJlXCIpO1xyXG5jb25zdCBjbGFtcF8xID0gcmVxdWlyZShcIi4uL3V0aWxzL2NsYW1wXCIpO1xyXG5jb25zdCBnZXRJbWFnZURhdGFfMSA9IHJlcXVpcmUoXCIuLi91dGlscy9nZXRJbWFnZURhdGFcIik7XHJcbmNvbnN0IG1ha2VMb2dTY2FsZV8xID0gcmVxdWlyZShcIi4uL21hdGhzL21ha2VMb2dTY2FsZVwiKTtcclxuY29uc3QgZ2FtZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZ2FtZVwiKTtcclxuY29uc3QgaW1hZ2UgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImltYWdlXCIpO1xyXG5jb25zdCBtZXRob2QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIm1ldGhvZFwiKTtcclxuY29uc3QgYW1vdW50SW5wdXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImFtb3VudFwiKTtcclxuY29uc3QgYW1vdW50VmFsdWVJbnB1dCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYW1vdW50dmFsdWVcIik7XHJcbmNvbnN0IHRpbWV0YWtlbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidGltZXRha2VuXCIpO1xyXG5jb25zdCBnID0gZ2FtZS5nZXRDb250ZXh0KFwiMmRcIik7XHJcbmxldCBibHVyQW1vdW50ID0gODtcclxuY29uc3QgZHJhd0ltYWdlID0gKGltYWdlRGF0YSwgc3VtbWVkVGV4dHVyZSkgPT4ge1xyXG4gICAgZy5jbGVhclJlY3QoMCwgMCwgZ2FtZS53aWR0aCwgZ2FtZS5oZWlnaHQpO1xyXG4gICAgY29uc3QgY2FudmFzSW1hZ2UgPSBnLmdldEltYWdlRGF0YSgwLCAwLCBnYW1lLndpZHRoLCBnYW1lLmhlaWdodCk7XHJcbiAgICBsZXQgcGl4ZWxGdW5jO1xyXG4gICAgc3dpdGNoIChtZXRob2QudmFsdWUpIHtcclxuICAgICAgICBjYXNlICdzdW1tZWQnOlxyXG4gICAgICAgICAgICBwaXhlbEZ1bmMgPSAoeCwgeSwgeDIsIHkyKSA9PiBhdmVyYWdlU3VtbWVkXzEuYXZlcmFnZVN1bW1lZChzdW1tZWRUZXh0dXJlLCBpbWFnZURhdGEsIHgsIHksIHgyLCB5Mik7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgJ25haXZlJzpcclxuICAgICAgICAgICAgcGl4ZWxGdW5jID0gKHgsIHksIHgyLCB5MikgPT4gYXZlcmFnZU5haXZlXzEuYXZlcmFnZU5haXZlKGltYWdlRGF0YSwgeCwgeSwgeDIsIHkyKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIG1ldGhvZCcpO1xyXG4gICAgfVxyXG4gICAgY29uc3Qgc3RhcnRUaW1lID0gRGF0ZS5ub3coKTtcclxuICAgIGZvciAobGV0IHkgPSAwLCBpID0gMDsgeSA8IGdhbWUuaGVpZ2h0OyB5KyspIHtcclxuICAgICAgICBmb3IgKGxldCB4ID0gMDsgeCA8IGdhbWUud2lkdGg7IHgrKywgaSArPSA0KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHBsb3RYID0gY2xhbXBfMS5jbGFtcCh4IC0gYmx1ckFtb3VudCwgMCwgZ2FtZS53aWR0aCk7XHJcbiAgICAgICAgICAgIGNvbnN0IHBsb3RZID0gY2xhbXBfMS5jbGFtcCh5IC0gYmx1ckFtb3VudCwgMCwgZ2FtZS5oZWlnaHQpO1xyXG4gICAgICAgICAgICBjb25zdCBwbG90WDIgPSBjbGFtcF8xLmNsYW1wKHggKyBibHVyQW1vdW50LCAwLCBnYW1lLndpZHRoKTtcclxuICAgICAgICAgICAgY29uc3QgcGxvdFkyID0gY2xhbXBfMS5jbGFtcCh5ICsgYmx1ckFtb3VudCwgMCwgZ2FtZS5oZWlnaHQpO1xyXG4gICAgICAgICAgICBjb25zdCBwaXhlbENvbG91ciA9IHBpeGVsRnVuYyhwbG90WCwgcGxvdFksIHBsb3RYMiwgcGxvdFkyKTtcclxuICAgICAgICAgICAgY2FudmFzSW1hZ2UuZGF0YS5zZXQocGl4ZWxDb2xvdXIsIGkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGcucHV0SW1hZ2VEYXRhKGNhbnZhc0ltYWdlLCAwLCAwKTtcclxuICAgIHRpbWV0YWtlbi5pbm5lclRleHQgPSBgJHsoRGF0ZS5ub3coKSAtIHN0YXJ0VGltZSl9IG1zYDtcclxufTtcclxuY29uc3Qgc3RhcnQgPSAoKSA9PiB7XHJcbiAgICBjb25zdCBpbWFnZURhdGEgPSBnZXRJbWFnZURhdGFfMS5nZXRJbWFnZURhdGEoaW1hZ2UpO1xyXG4gICAgY29uc3Qgc3VtbWVkVGV4dHVyZSA9IGNyZWF0ZVN1bW1lZFRleHR1cmVfMS5jcmVhdGVTdW1tZWRUZXh0dXJlKGltYWdlRGF0YSk7XHJcbiAgICBjb25zdCBibHVyTG9nU2NhbGUgPSBtYWtlTG9nU2NhbGVfMS5tYWtlTG9nU2NhbGUoMCwgNTEyKTtcclxuICAgIGNvbnN0IGRyYXcgPSBjcmVhdGVSZW5kZXJlcl8xLmNyZWF0ZVJlbmRlcmVyKCgpID0+IHtcclxuICAgICAgICBhbW91bnRWYWx1ZUlucHV0LnZhbHVlID0gYmx1ckFtb3VudC50b1N0cmluZygpO1xyXG4gICAgICAgIGFtb3VudElucHV0LnZhbHVlID0gYmx1ckxvZ1NjYWxlLnRvTGluZWFyKGJsdXJBbW91bnQpLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgZHJhd0ltYWdlKGltYWdlRGF0YSwgc3VtbWVkVGV4dHVyZSk7XHJcbiAgICB9KTtcclxuICAgIGFtb3VudElucHV0Lm9uaW5wdXQgPSAoKSA9PiB7XHJcbiAgICAgICAgLy9jb252ZXJ0IHRoZSBzbGlkZXIgdmFsdWUgYXMgaWYgaXQgd2FzIGV4cG9uZW50aWFsXHJcbiAgICAgICAgYmx1ckFtb3VudCA9IHBhcnNlRmxvYXQoYmx1ckxvZ1NjYWxlLmZyb21MaW5lYXIocGFyc2VGbG9hdChhbW91bnRJbnB1dC52YWx1ZSkpLnRvRml4ZWQoMSkpO1xyXG4gICAgICAgIGRyYXcoKTtcclxuICAgIH07XHJcbiAgICBhbW91bnRWYWx1ZUlucHV0Lm9uY2hhbmdlID0gKCkgPT4ge1xyXG4gICAgICAgIGJsdXJBbW91bnQgPSBwYXJzZUZsb2F0KGFtb3VudFZhbHVlSW5wdXQudmFsdWUpO1xyXG4gICAgICAgIGRyYXcoKTtcclxuICAgIH07XHJcbiAgICBtZXRob2Qub25jaGFuZ2UgPSBkcmF3O1xyXG4gICAgZHJhdygpO1xyXG59O1xyXG5pZiAoaW1hZ2UuY29tcGxldGUpIHtcclxuICAgIHN0YXJ0KCk7XHJcbn1cclxuZWxzZSB7XHJcbiAgICBpbWFnZS5vbmxvYWQgPSBzdGFydDtcclxufVxyXG4iXSwic291cmNlUm9vdCI6IiJ9