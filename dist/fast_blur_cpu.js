"use strict";(self.webpackChunksampling_coverage=self.webpackChunksampling_coverage||[]).push([[679],{4685:(e,t,a)=>{const o=a(2086),l=a(5676),r=a(7787),u=a(6374),d=a(8372),c=a(7601),M=a(3345),i=document.getElementById("game"),n=document.getElementById("image"),s=document.getElementById("method"),g=document.getElementById("amount"),h=document.getElementById("amountvalue"),f=document.getElementById("timetaken"),m=i.getContext("2d");let v=8;const P=()=>{const e=(0,d.getImageData)(n),t=(0,u.createSummedTexture)(e),a=(0,c.makeLogScale)(0,512),P=(0,r.createRenderer)((()=>{h.value=v.toString(),g.value=a.toLinear(v).toString(),((e,t)=>{m.clearRect(0,0,i.width,i.height);const a=m.getImageData(0,0,i.width,i.height);let r;switch(s.value){case"summed":r=(a,o,r,u)=>(0,l.averageSummed)(t,e,a,o,r,u);break;case"naive":r=(t,a,l,r)=>(0,o.averageNaive)(e,t,a,l,r);break;default:throw new Error("Unknown method")}const u=Date.now();for(let e=0,t=0;e<i.height;e++)for(let o=0;o<i.width;o++,t+=4){const l=r((0,M.clamp)(o-v,0,i.width),(0,M.clamp)(e-v,0,i.height),(0,M.clamp)(o+v,0,i.width),(0,M.clamp)(e+v,0,i.height));a.data.set(l,t)}m.putImageData(a,0,0),f.innerText=Date.now()-u+" ms"})(e,t)}));g.oninput=()=>{v=parseFloat(a.fromLinear(parseFloat(g.value)).toFixed(1)),P()},h.onchange=()=>{v=parseFloat(h.value),P()},s.onchange=P,P()};n.complete?P():n.onload=P},2086:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.averageNaive=void 0;const o=a(9078),l=a(5062),r=a(8027),u=a(975);t.averageNaive=(e,t,a,d,c)=>{const M=Math.floor(t),i=Math.floor(a),n=Math.floor(d),s=Math.floor(c);if(M==n&&i==s)return(0,l.floor4Mutate)((0,u.getPixel)(e,M,i));const g=d-t,h=c-a,f=1/(g*h),m=Math.ceil(t),v=Math.ceil(a),P=Math.floor(d),x=Math.floor(c),p=m-t,w=v-a,_=d-P,y=c-x,b=[0,0,0,0];if(M==n){w&&(0,o.add4Mutate)(b,(0,r.scale4Mutate)((0,u.getPixel)(e,M,i),g*w)),y&&(0,o.add4Mutate)(b,(0,r.scale4Mutate)((0,u.getPixel)(e,n,s),g*y));const t=[0,0,0,0];for(let a=v;a<x;a++)(0,o.add4Mutate)(t,(0,u.getPixel)(e,M,a));return(0,o.add4Mutate)(b,(0,r.scale4Mutate)(t,g)),(0,l.floor4Mutate)((0,r.scale4Mutate)(b,f))}if(i==s){p&&(0,o.add4Mutate)(b,(0,r.scale4Mutate)((0,u.getPixel)(e,M,i),h*p)),_&&(0,o.add4Mutate)(b,(0,r.scale4Mutate)((0,u.getPixel)(e,n,s),h*_));const t=[0,0,0,0];for(let a=m;a<P;a++)(0,o.add4Mutate)(t,(0,u.getPixel)(e,a,i));return(0,o.add4Mutate)(b,(0,r.scale4Mutate)(t,h)),(0,l.floor4Mutate)((0,r.scale4Mutate)(b,f))}if(w&&(p&&(0,o.add4Mutate)(b,(0,r.scale4Mutate)((0,u.getPixel)(e,M,i),p*w)),_&&(0,o.add4Mutate)(b,(0,r.scale4Mutate)((0,u.getPixel)(e,n,i),_*w))),y&&(p&&(0,o.add4Mutate)(b,(0,r.scale4Mutate)((0,u.getPixel)(e,M,s),p*y)),_&&(0,o.add4Mutate)(b,(0,r.scale4Mutate)((0,u.getPixel)(e,n,s),_*y))),w){const t=[0,0,0,0];for(let a=m;a<P;a++)(0,o.add4Mutate)(t,(0,u.getPixel)(e,a,i));(0,o.add4Mutate)(b,(0,r.scale4Mutate)(t,w))}if(p){const t=[0,0,0,0];for(let a=v;a<x;a++)(0,o.add4Mutate)(t,(0,u.getPixel)(e,M,a));(0,o.add4Mutate)(b,(0,r.scale4Mutate)(t,p))}if(y){const t=[0,0,0,0];for(let a=m;a<P;a++)(0,o.add4Mutate)(t,(0,u.getPixel)(e,a,s));(0,o.add4Mutate)(b,(0,r.scale4Mutate)(t,y))}if(_){const t=[0,0,0,0];for(let a=v;a<x;a++)(0,o.add4Mutate)(t,(0,u.getPixel)(e,n,a));(0,o.add4Mutate)(b,(0,r.scale4Mutate)(t,_))}for(let t=m;t<P;t++)for(let a=v;a<x;a++)(0,o.add4Mutate)(b,(0,u.getPixel)(e,t,a));return(0,l.floor4Mutate)((0,r.scale4Mutate)(b,f))}},5676:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.averageSummed=void 0;const o=a(9078),l=a(5062),r=a(8027),u=a(6196),d=a(975),c=(e,t,a)=>{try{const o=t>=0&&a>=0?e[a][t]:[0,0,0,0];if(void 0===o)throw Error("No summed texture value");return o}catch(e){throw console.error(t,a),e}},M=(e,t,a,l,r)=>{const d=[0,0,0,0];try{(0,o.add4Mutate)(d,c(e,l,r)),(0,u.subtract4Mutate)(d,c(e,t,r)),(0,u.subtract4Mutate)(d,c(e,l,a)),(0,o.add4Mutate)(d,c(e,t,a))}catch(o){throw console.error([d,c(e,l,r),c(e,t,r),c(e,l,a),c(e,t,a)]),o}return d};t.averageSummed=(e,t,a,u,c,i)=>{const n=Math.floor(a),s=Math.floor(u),g=Math.floor(c),h=Math.floor(i);if(n==g&&s==h)return(0,l.floor4Mutate)((0,d.getPixel)(t,n,s));const f=c-a,m=i-u,v=1/(f*m),P=Math.ceil(a),x=Math.ceil(u),p=Math.floor(c),w=Math.floor(i),_=P-a,y=x-u,b=c-p,I=i-w,O=[0,0,0,0];return n==g?(y&&(0,o.add4Mutate)(O,(0,r.scale4Mutate)((0,d.getPixel)(t,n,s),f*y)),I&&(0,o.add4Mutate)(O,(0,r.scale4Mutate)((0,d.getPixel)(t,g,h),f*I)),(0,o.add4Mutate)(O,(0,r.scale4Mutate)(M(e,n-1,x-1,n,w-1),f)),(0,l.floor4Mutate)((0,r.scale4Mutate)(O,v))):s==h?(_&&(0,o.add4Mutate)(O,(0,r.scale4Mutate)((0,d.getPixel)(t,n,s),m*_)),b&&(0,o.add4Mutate)(O,(0,r.scale4Mutate)((0,d.getPixel)(t,g,h),m*b)),(0,o.add4Mutate)(O,(0,r.scale4Mutate)(M(e,P-1,s-1,p-1,s),m)),(0,l.floor4Mutate)((0,r.scale4Mutate)(O,v))):(y&&(_&&(0,o.add4Mutate)(O,(0,r.scale4Mutate)((0,d.getPixel)(t,n,s),_*y)),b&&(0,o.add4Mutate)(O,(0,r.scale4Mutate)((0,d.getPixel)(t,g,s),b*y))),I&&(_&&(0,o.add4Mutate)(O,(0,r.scale4Mutate)((0,d.getPixel)(t,n,h),_*I)),b&&(0,o.add4Mutate)(O,(0,r.scale4Mutate)((0,d.getPixel)(t,g,h),b*I))),y&&(0,o.add4Mutate)(O,(0,r.scale4Mutate)(M(e,P-1,s-1,p-1,s),y)),_&&(0,o.add4Mutate)(O,(0,r.scale4Mutate)(M(e,n-1,x-1,n,w-1),_)),I&&(0,o.add4Mutate)(O,(0,r.scale4Mutate)(M(e,P-1,h-1,p-1,h),I)),b&&(0,o.add4Mutate)(O,(0,r.scale4Mutate)(M(e,g-1,x-1,g,w-1),b)),(0,o.add4Mutate)(O,M(e,P-1,x-1,p-1,w-1)),(0,l.floor4Mutate)((0,r.scale4Mutate)(O,v)))}},975:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setPixel=t.getPixel=void 0,t.getPixel=(e,t,a)=>{const o=4*(e.width*Math.floor(a)+Math.floor(t));return e.data.slice(o,o+4)},t.setPixel=(e,t,a,o)=>{e.data.set(o,4*(Math.floor(a)*e.width+Math.floor(t)))}},7787:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.createRenderer=void 0,t.createRenderer=(e,t)=>{let a=!1;return()=>{a||(a=!0,requestAnimationFrame((()=>{e(),a=!1,null==t||t()})))}}},6374:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.createSummedTexture=void 0;const o=a(9078),l=a(6196);t.createSummedTexture=e=>{const t=new Array(e.height);for(let a=0,r=0;r<e.height;r++){t[r]=new Array(e.width);for(let u=0;u<e.width;u++,a+=4){const d=new Uint32Array(e.data.slice(a,a+4));u>0&&(0,o.add4Mutate)(d,t[r][u-1]),r>0&&(0,o.add4Mutate)(d,t[r-1][u]),u>0&&r>0&&(0,l.subtract4Mutate)(d,t[r-1][u-1]),t[r][u]=d}}return t}},3345:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.lerp=t.timeAtPos=t.clamp=t.fract=t.negFract=t.EPSILON=void 0,t.EPSILON=1e-6,t.negFract=e=>1-e+Math.floor(e),t.fract=e=>e-Math.floor(e),t.clamp=(e,t,a)=>Math.max(Math.min(e,a),t),t.timeAtPos=(e,a,o)=>a?(0,t.clamp)((o-e)/a,0,1):0,t.lerp=(e,t,a)=>e*(1-a)+t*a},7601:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.makeLogScale=void 0,t.makeLogScale=(e,t)=>{const a=e?Math.log(e):0,o=Math.log(t)-a;return{fromLinear:e=>Math.exp(a+o*e),toLinear:e=>(Math.log(e)-a)/o}}},9078:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.add4Mutate=void 0,t.add4Mutate=(e,t)=>(e[0]+=t[0],e[1]+=t[1],e[2]+=t[2],e[3]+=t[3],e)},5062:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.floor4Mutate=void 0,t.floor4Mutate=e=>(e[0]=Math.floor(e[0]),e[1]=Math.floor(e[1]),e[2]=Math.floor(e[2]),e[3]=Math.floor(e[3]),e)},8372:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.getImageData=void 0,t.getImageData=e=>{const t=document.createElement("canvas");t.width=e.width,t.height=e.height;const a=t.getContext("2d");if(!a)throw new Error("Could not create canvas to extract image data");return a.clearRect(0,0,t.width,t.height),a.drawImage(e,0,0),a.getImageData(0,0,t.width,t.height)}},8027:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.scale4Mutate=void 0,t.scale4Mutate=(e,t)=>(e[0]*=t,e[1]*=t,e[2]*=t,e[3]*=t,e)},6196:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.subtract4Mutate=void 0,t.subtract4Mutate=(e,t)=>(e[0]-=t[0],e[1]-=t[1],e[2]-=t[2],e[3]-=t[3],e)}},e=>{e(e.s=4685)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,