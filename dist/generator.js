"use strict";(self.webpackChunksampling_coverage=self.webpackChunksampling_coverage||[]).push([[695],{4318:(e,t,a)=>{const o=a(887),n=a(9202),r=a(4669),i=a(8372),l=document.getElementById("game"),c=document.getElementById("chooseimage"),s=document.getElementById("trianglemap"),d=document.getElementById("resolution"),m=document.getElementById("timetaken"),p=l.getContext("2d"),u=()=>{const e=new Image,t=()=>{const t=parseInt(d.value,10),a=(0,i.getImageData)(e),c=Date.now(),[u]=((e,t)=>{const a=Math.pow(t,3),i=document.createElement("canvas");i.width=a,i.height=a;const l=i.getContext("2d"),c=l.getImageData(0,0,a,a),s=(e.width-1)/(t-1),d=(e.height-1)/(t-1);for(let t=0,a=0;a<e.width;a+=s)for(let i=0;i<e.height;i+=d)for(let l=0;l<e.width;l+=s)for(let m=0;m<e.height;m+=d)for(let p=0;p<e.width;p+=s)for(let s=0;s<e.height;s+=d,t+=4){const d=o.vec2.fromValues(a,i),u=o.vec2.fromValues(l,m),g=o.vec2.fromValues(p,s),v={p1:d,p2:u,p3:g,e1:(0,r.sub)(u,d),e2:(0,r.sub)(g,u),e3:(0,r.sub)(d,g),points:[d,u,g]},h=(0,n.triangleCoverage)(e,v);c.data.set(h,t)}return l.putImageData(c,0,0),[l,c]})(a,t);m.innerText=Date.now()-c+" ms",s.innerHTML="",s.append(u.canvas),(e=>{p.clearRect(0,0,l.width,l.height),p.putImageData(e,0,0)})(a)};d.onchange=t,e.onload=t,e.src=c.value};c.onchange=u,u()},975:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setPixel=t.getPixel=void 0,t.getPixel=(e,t,a)=>{const o=4*(e.width*Math.floor(a)+Math.floor(t));return e.data.slice(o,o+4)},t.setPixel=(e,t,a,o)=>{e.data.set(o,4*(Math.floor(a)*e.width+Math.floor(t)))}},6558:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.intersectCellTriangle=void 0;const o=a(4669),n=a(3345);t.intersectCellTriangle=(e,t)=>{const a=[],r=[(0,n.timeAtPos)(e.p1[0],e.e1[0],t.min[0]),(0,n.timeAtPos)(e.p1[0],e.e1[0],t.max[0]),(0,n.timeAtPos)(e.p1[1],e.e1[1],t.min[1]),(0,n.timeAtPos)(e.p1[1],e.e1[1],t.max[1])];r.sort(),a.push(...r.map((a=>(0,o.clamp2)((0,o.add)(e.p1,(0,o.scale)(e.e1,a)),t.min,t.max))));const i=[(0,n.timeAtPos)(e.p2[0],e.e2[0],t.min[0]),(0,n.timeAtPos)(e.p2[0],e.e2[0],t.max[0]),(0,n.timeAtPos)(e.p2[1],e.e2[1],t.min[1]),(0,n.timeAtPos)(e.p2[1],e.e2[1],t.max[1])];i.sort(),a.push(...i.map((a=>(0,o.clamp2)((0,o.add)(e.p2,(0,o.scale)(e.e2,a)),t.min,t.max))));const l=[(0,n.timeAtPos)(e.p3[0],e.e3[0],t.min[0]),(0,n.timeAtPos)(e.p3[0],e.e3[0],t.max[0]),(0,n.timeAtPos)(e.p3[1],e.e3[1],t.min[1]),(0,n.timeAtPos)(e.p3[1],e.e3[1],t.max[1])];return l.sort(),a.push(...l.map((a=>(0,o.clamp2)((0,o.add)(e.p3,(0,o.scale)(e.e3,a)),t.min,t.max)))),a}},6923:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.polygonArea=t.polygonAreaSigned=void 0;const o=a(4669);t.polygonAreaSigned=e=>{if(!e.length)return 0;const t=e.length-1;let a=0;for(let n=0;n<t;n++)a+=(0,o.determinant2)(e[n],e[n+1]);return a+=(0,o.determinant2)(e[t],e[0]),a/2},t.polygonArea=e=>Math.abs((0,t.polygonAreaSigned)(e))},2841:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.getLineEquation=void 0;const o=a(4669);t.getLineEquation=e=>{const t=(0,o.sub)(e.p2,e.p1),a=t[1]/t[0];return{gradient:a,intersect:e.p1[1]-e.p1[0]*a}}},2952:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.solveLineX=void 0,t.solveLineX=(e,t)=>0!=Math.abs(e.gradient)?(t-e.intersect)/e.gradient:-1},3345:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.lerp=t.timeAtPos=t.clamp=t.fract=t.negFract=t.EPSILON=void 0,t.EPSILON=1e-6,t.negFract=e=>1-e+Math.floor(e),t.fract=e=>e-Math.floor(e),t.clamp=(e,t,a)=>Math.max(Math.min(e,a),t),t.timeAtPos=(e,a,o)=>a?(0,t.clamp)((o-e)/a,0,1):0,t.lerp=(e,t,a)=>e*(1-a)+t*a},4669:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.inRange=t.avg=t.max2=t.min2=t.toPrecision2=t.lerp2=t.normalize=t.length=t.dot=t.sign=t.abs=t.ceil=t.floor=t.sub=t.adds=t.add=t.divide=t.multiply=t.scale=t.equals=t.determinant2=t.clamp2=void 0;const o=a(887);t.clamp2=(e,t,a)=>{const n=o.vec2.clone(e);return o.vec2.min(n,n,a),o.vec2.max(n,n,t),n},t.determinant2=(e,t)=>e[0]*t[1]-e[1]*t[0],t.equals=o.vec2.equals,t.scale=(e,t)=>o.vec2.scale(o.vec2.create(),e,t),t.multiply=(e,t)=>o.vec2.multiply(o.vec2.create(),e,t),t.divide=(e,t)=>o.vec2.divide(o.vec2.create(),e,t),t.add=(e,t)=>o.vec2.add(o.vec2.create(),e,t),t.adds=(e,t)=>o.vec2.fromValues(e[0]+t,e[1]+t),t.sub=(e,t)=>o.vec2.sub(o.vec2.create(),e,t),t.floor=e=>o.vec2.floor(o.vec2.create(),e),t.ceil=e=>o.vec2.ceil(o.vec2.create(),e),t.abs=e=>o.vec2.fromValues(Math.abs(e[0]),Math.abs(e[1])),t.sign=e=>o.vec2.fromValues(Math.sign(e[0]),Math.sign(e[1])),t.dot=(e,t)=>o.vec2.dot(e,t),t.length=e=>o.vec2.length(e),t.normalize=e=>(0,t.scale)(e,1/(0,t.length)(e)),t.lerp2=(e,t,a)=>o.vec2.lerp(o.vec2.create(),e,t,a),t.toPrecision2=(e,t)=>(e[0]=parseFloat(e[0].toPrecision(t)),e[1]=parseFloat(e[1].toPrecision(t)),e),t.min2=(...e)=>{const[t,...a]=e,n=o.vec2.clone(t);return a.forEach((e=>{o.vec2.min(n,n,e)})),n},t.max2=(...e)=>{const[t,...a]=e,n=o.vec2.clone(t);return a.forEach((e=>{o.vec2.max(n,n,e)})),n},t.avg=(...e)=>{const t=o.vec2.create();return e.length&&(e.forEach((e=>{o.vec2.add(t,t,e)})),o.vec2.scale(t,t,1/e.length)),t},t.inRange=(e,t,a)=>!(e[0]>a[0]||e[0]<t[0]||e[1]>a[1]||e[1]<t[1])},2916:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.rasterise=void 0;const o=a(887),n=a(3345),r=a(2952),i=a(4669),l=a(2841),c=e=>{let t,a;return e.p1[1]<e.p2[1]?(t=e.p1,a=e.p2):e.p1[1]>e.p2[1]?(t=e.p2,a=e.p1):e.p1[0]<e.p2[0]?(t=e.p1,a=e.p2):(t=e.p2,a=e.p1),{pStart:t,pEnd:a,xRange:o.vec2.fromValues(Math.min(e.p1[0],e.p2[0]),Math.max(e.p1[0],e.p2[0])),equation:(0,l.getLineEquation)(e)}};t.rasterise=(e,t)=>{const a=[{p1:e[0],p2:e[1]},{p1:e[1],p2:e[2]},{p1:e[2],p2:e[0]}],o=(0,i.min2)(...e),l=(0,i.max2)(...e),s=[c(a[0]),c(a[1]),c(a[2])];if(l[1]-o[1]<1)return void t(o[0],l[0],o[1],!1);let d=Math.floor(o[1]);for(let e=d+1;e<=Math.ceil(l[1]);e++){const a=[-1,-1,-1,-1];for(let t=0;t<3;t++){const o=s[t];if(o.pEnd[1]>=d&&o.pStart[1]<e){let t=(0,r.solveLineX)(o.equation,d);t=t>=0?(0,n.clamp)(t,o.xRange[0],o.xRange[1]):o.pStart[0];let i=(0,r.solveLineX)(o.equation,e);i=i>=0?(0,n.clamp)(i,o.xRange[0],o.xRange[1]):o.pEnd[0];const l=[Math.min(t,i),Math.max(t,i)];a[0]<0?(a[0]=l[0],a[1]=l[1]):l[0]<=a[1]+1&&l[0]>=a[0]-1||l[1]<=a[1]+1&&l[1]>=a[0]-1?(a[0]=Math.min(a[0],l[0]),a[1]=Math.max(a[1],l[1])):a[2]<0?l[0]>a[1]?(a[2]=l[0],a[3]=l[1]):(a[2]=a[0],a[3]=a[1],a[0]=l[0],a[1]=l[1]):(a[2]=Math.min(a[2],l[0]),a[3]=Math.max(a[3],l[1]))}}t(a[0],a[1],d,!1),a[2]>a[1]&&(t(a[1]+1,a[2]-1,d,!0),t(a[2],a[3],d,!1)),d=e}}},9202:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.triangleCoverage=void 0;const o=a(6558),n=a(6923),r=a(2916),i=a(9078),l=a(5062),c=a(8027),s=a(975),d=a(3345);t.triangleCoverage=(e,t)=>{const a=[0,0,0,0],m=Number((0,n.polygonArea)(t.points).toFixed(5));if(m<1){let o=0;return(0,r.rasterise)(t.points,((t,n,r)=>{for(let l=t;l<=n;l++)(0,i.add4Mutate)(a,(0,s.getPixel)(e,l,r)),o++})),(0,l.floor4Mutate)((0,c.scale4Mutate)(a,1/o))}return(0,r.rasterise)(t.points,((r,l,m,p)=>{if(p)for(let t=r;t<=l;t++)(0,i.add4Mutate)(a,(0,s.getPixel)(e,t,m));else{const p=m+1;for(let u=r;u<=l;u++){const r=(0,o.intersectCellTriangle)(t,{min:[u,m],max:[u+1,p]}),l=(0,d.clamp)(Number((0,n.polygonArea)(r).toFixed(5)),0,1),g=(0,s.getPixel)(e,u,m);(0,i.add4Mutate)(a,(0,c.scale4Mutate)(g,l))}}})),(0,l.floor4Mutate)((0,c.scale4Mutate)(a,1/m))}},9078:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.add4Mutate=void 0,t.add4Mutate=(e,t)=>(e[0]+=t[0],e[1]+=t[1],e[2]+=t[2],e[3]+=t[3],e)},5062:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.floor4Mutate=void 0,t.floor4Mutate=e=>(e[0]=Math.floor(e[0]),e[1]=Math.floor(e[1]),e[2]=Math.floor(e[2]),e[3]=Math.floor(e[3]),e)},8372:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.getImageData=void 0,t.getImageData=e=>{const t=document.createElement("canvas");t.width=e.width,t.height=e.height;const a=t.getContext("2d");if(!a)throw new Error("Could not create canvas to extract image data");return a.clearRect(0,0,t.width,t.height),a.drawImage(e,0,0),a.getImageData(0,0,t.width,t.height)}},8027:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.scale4Mutate=void 0,t.scale4Mutate=(e,t)=>(e[0]*=t,e[1]*=t,e[2]*=t,e[3]*=t,e)}},e=>{e(e.s=4318)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFLeEYsS0FBS2tELE1BQU1zQyxFQUFFLElBQ3BCQSxFQUFFLEdBQUt4RixLQUFLa0QsTUFBTXNDLEVBQUUsSUFDYkEsSSxhQ1BYOUMsT0FBT0MsZUFBZUMsRUFBUyxhQUFjLENBQUVwRCxPQUFPLElBQ3REb0QsRUFBUWxELGtCQUFlLEVBYXZCa0QsRUFBUWxELGFBWmNQLElBQ2xCLE1BQU13SyxFQUFjakwsU0FBU3lCLGNBQWMsVUFDM0N3SixFQUFZdkosTUFBUWpCLEVBQU1pQixNQUMxQnVKLEVBQVl0SixPQUFTbEIsRUFBTWtCLE9BQzNCLE1BQU11SixFQUFnQkQsRUFBWTFLLFdBQVcsTUFDN0MsSUFBSzJLLEVBQ0QsTUFBTSxJQUFJQyxNQUFNLGlEQUlwQixPQUZBRCxFQUFjdkgsVUFBVSxFQUFHLEVBQUdzSCxFQUFZdkosTUFBT3VKLEVBQVl0SixRQUM3RHVKLEVBQWN0SCxVQUFVbkQsRUFBTyxFQUFHLEdBQzNCeUssRUFBY2xLLGFBQWEsRUFBRyxFQUFHaUssRUFBWXZKLE1BQU91SixFQUFZdEosVSxhQ1ozRXFDLE9BQU9DLGVBQWVDLEVBQVMsYUFBYyxDQUFFcEQsT0FBTyxJQUN0RG9ELEVBQVF5RyxrQkFBZSxFQVF2QnpHLEVBQVF5RyxhQVBhLENBQUM3RCxFQUFHc0UsS0FDckJ0RSxFQUFFLElBQU1zRSxFQUNSdEUsRUFBRSxJQUFNc0UsRUFDUnRFLEVBQUUsSUFBTXNFLEVBQ1J0RSxFQUFFLElBQU1zRSxFQUNEdEUsSyIsInNvdXJjZXMiOlsid2VicGFjazovL3NhbXBsaW5nLWNvdmVyYWdlLy4vc3JjL2RlbW9zL2dlbmVyYXRvci50cyIsIndlYnBhY2s6Ly9zYW1wbGluZy1jb3ZlcmFnZS8uL3NyYy9kcmF3L2NhbnZhcy50cyIsIndlYnBhY2s6Ly9zYW1wbGluZy1jb3ZlcmFnZS8uL3NyYy9nZW9tZXRyeS9pbnRlcnNlY3RDZWxsVHJpYW5nbGUudHMiLCJ3ZWJwYWNrOi8vc2FtcGxpbmctY292ZXJhZ2UvLi9zcmMvZ2VvbWV0cnkvcG9seWdvbkFyZWEudHMiLCJ3ZWJwYWNrOi8vc2FtcGxpbmctY292ZXJhZ2UvLi9zcmMvbGluZS9nZXRMaW5lRXF1YXRpb24udHMiLCJ3ZWJwYWNrOi8vc2FtcGxpbmctY292ZXJhZ2UvLi9zcmMvbGluZS9zb2x2ZUxpbmVYLnRzIiwid2VicGFjazovL3NhbXBsaW5nLWNvdmVyYWdlLy4vc3JjL21hdGhzL2NvbW1vbi50cyIsIndlYnBhY2s6Ly9zYW1wbGluZy1jb3ZlcmFnZS8uL3NyYy9tYXRocy9wb2ludC50cyIsIndlYnBhY2s6Ly9zYW1wbGluZy1jb3ZlcmFnZS8uL3NyYy9yZW5kZXIvcmFzdGVyaXNlLnRzIiwid2VicGFjazovL3NhbXBsaW5nLWNvdmVyYWdlLy4vc3JjL3JlbmRlci90cmlhbmdsZUNvdmVyYWdlLnRzIiwid2VicGFjazovL3NhbXBsaW5nLWNvdmVyYWdlLy4vc3JjL3V0aWxzL2FkZDRNdXRhdGUudHMiLCJ3ZWJwYWNrOi8vc2FtcGxpbmctY292ZXJhZ2UvLi9zcmMvdXRpbHMvZmxvb3I0TXV0YXRlLnRzIiwid2VicGFjazovL3NhbXBsaW5nLWNvdmVyYWdlLy4vc3JjL3V0aWxzL2dldEltYWdlRGF0YS50cyIsIndlYnBhY2s6Ly9zYW1wbGluZy1jb3ZlcmFnZS8uL3NyYy91dGlscy9zY2FsZTRNdXRhdGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgZ2xfbWF0cml4XzEgPSByZXF1aXJlKFwiZ2wtbWF0cml4XCIpO1xyXG5jb25zdCB0cmlhbmdsZUNvdmVyYWdlXzEgPSByZXF1aXJlKFwiLi4vcmVuZGVyL3RyaWFuZ2xlQ292ZXJhZ2VcIik7XHJcbmNvbnN0IHBvaW50XzEgPSByZXF1aXJlKFwiLi4vbWF0aHMvcG9pbnRcIik7XHJcbmNvbnN0IGdldEltYWdlRGF0YV8xID0gcmVxdWlyZShcIi4uL3V0aWxzL2dldEltYWdlRGF0YVwiKTtcclxuY29uc3QgZ2FtZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdnYW1lJyk7XHJcbmNvbnN0IGltYWdlSW5wdXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY2hvb3NlaW1hZ2UnKTtcclxuY29uc3QgdHJpYW5nbGVtYXAgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndHJpYW5nbGVtYXAnKTtcclxuY29uc3QgcmVzb2x1dGlvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyZXNvbHV0aW9uJyk7XHJcbmNvbnN0IHRpbWV0YWtlbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0aW1ldGFrZW4nKTtcclxuY29uc3QgZyA9IGdhbWUuZ2V0Q29udGV4dCgnMmQnKTtcclxuY29uc3QgZHJhd0ltYWdlID0gKGltYWdlRGF0YSkgPT4ge1xyXG4gICAgZy5jbGVhclJlY3QoMCwgMCwgZ2FtZS53aWR0aCwgZ2FtZS5oZWlnaHQpO1xyXG4gICAgZy5wdXRJbWFnZURhdGEoaW1hZ2VEYXRhLCAwLCAwKTtcclxufTtcclxuLy90aGlzIGlzIHByZXR0eSBpbnRlbnNpdmUgYW5kIG5lZWRzIHRvIGJlIG9mZmxvYWRlZCB0byBhbiBvcHRpbWlzZWQgcHJvZ3JhbVxyXG5jb25zdCBjcmVhdGVUcmlhbmdsZUZpdHRpbmdNYXAgPSAoaW1hZ2VEYXRhLCBudW1JdGVyYXRpb25zKSA9PiB7XHJcbiAgICAvL2dlbmVyYXRlIGEgbWFwIG9mIHRoZSB0cmlhbmdsZXMgNiBlbGVtZW50cyAoMyBwb2ludHMgb2YgeCwgeSkgd2l0aGluIDE2IHBvc3NpYmxlIHZhbHVlcyBhbG9uZyB0aGUgaW1hZ2VcclxuICAgIGNvbnN0IHRleHR1cmVTaXplID0gTWF0aC5wb3cobnVtSXRlcmF0aW9ucywgMyk7XHJcbiAgICBjb25zdCBzYW1wbGVDYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcclxuICAgIHNhbXBsZUNhbnZhcy53aWR0aCA9IHRleHR1cmVTaXplO1xyXG4gICAgc2FtcGxlQ2FudmFzLmhlaWdodCA9IHRleHR1cmVTaXplO1xyXG4gICAgY29uc3Qgc2FtcGxlR3JhcGhpY3MgPSBzYW1wbGVDYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcclxuICAgIGNvbnN0IHNhbXBsZURhdGEgPSBzYW1wbGVHcmFwaGljcy5nZXRJbWFnZURhdGEoMCwgMCwgdGV4dHVyZVNpemUsIHRleHR1cmVTaXplKTtcclxuICAgIC8vd2UgZm9yY2Ugc2FtcGxlcyBvbiB0aGUgZXh0cmVtZXMgb2YgdGhlIGRpbWVuc2lvbnNcclxuICAgIGNvbnN0IHhTdGVwID0gKGltYWdlRGF0YS53aWR0aCAtIDEpIC8gKG51bUl0ZXJhdGlvbnMgLSAxKTtcclxuICAgIGNvbnN0IHlTdGVwID0gKGltYWdlRGF0YS5oZWlnaHQgLSAxKSAvIChudW1JdGVyYXRpb25zIC0gMSk7XHJcbiAgICAvL2NvdmVyIGFsbCBwb3NzaWJpbGl0aWVzIGZvciBhbGwgNiBjb29yZGluYXRlcyBvZiB0aGUgdHJpYW5nbGVcclxuICAgIGZvciAobGV0IGkgPSAwLCB4MSA9IDA7IHgxIDwgaW1hZ2VEYXRhLndpZHRoOyB4MSArPSB4U3RlcCkge1xyXG4gICAgICAgIGZvciAobGV0IHkxID0gMDsgeTEgPCBpbWFnZURhdGEuaGVpZ2h0OyB5MSArPSB5U3RlcCkge1xyXG4gICAgICAgICAgICBmb3IgKGxldCB4MiA9IDA7IHgyIDwgaW1hZ2VEYXRhLndpZHRoOyB4MiArPSB4U3RlcCkge1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgeTIgPSAwOyB5MiA8IGltYWdlRGF0YS5oZWlnaHQ7IHkyICs9IHlTdGVwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgeDMgPSAwOyB4MyA8IGltYWdlRGF0YS53aWR0aDsgeDMgKz0geFN0ZXApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgeTMgPSAwOyB5MyA8IGltYWdlRGF0YS5oZWlnaHQ7IHkzICs9IHlTdGVwLCBpICs9IDQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHAxID0gZ2xfbWF0cml4XzEudmVjMi5mcm9tVmFsdWVzKHgxLCB5MSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwMiA9IGdsX21hdHJpeF8xLnZlYzIuZnJvbVZhbHVlcyh4MiwgeTIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcDMgPSBnbF9tYXRyaXhfMS52ZWMyLmZyb21WYWx1ZXMoeDMsIHkzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRyaWFuZ2xlID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHAxLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHAyLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHAzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUxOiAoMCwgcG9pbnRfMS5zdWIpKHAyLCBwMSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZTI6ICgwLCBwb2ludF8xLnN1YikocDMsIHAyKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlMzogKDAsIHBvaW50XzEuc3ViKShwMSwgcDMpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50czogW3AxLCBwMiwgcDNdXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY29sb3VyID0gKDAsIHRyaWFuZ2xlQ292ZXJhZ2VfMS50cmlhbmdsZUNvdmVyYWdlKShpbWFnZURhdGEsIHRyaWFuZ2xlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNhbXBsZURhdGEuZGF0YS5zZXQoY29sb3VyLCBpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHNhbXBsZUdyYXBoaWNzLnB1dEltYWdlRGF0YShzYW1wbGVEYXRhLCAwLCAwKTtcclxuICAgIHJldHVybiBbc2FtcGxlR3JhcGhpY3MsIHNhbXBsZURhdGFdO1xyXG59O1xyXG5jb25zdCBzdGFydCA9ICgpID0+IHtcclxuICAgIGNvbnN0IGltYWdlID0gbmV3IEltYWdlKCk7XHJcbiAgICBjb25zdCBjcmVhdGVNYXAgPSAoKSA9PiB7XHJcbiAgICAgICAgY29uc3QgbnVtSXRlcmF0aW9ucyA9IHBhcnNlSW50KHJlc29sdXRpb24udmFsdWUsIDEwKTtcclxuICAgICAgICBjb25zdCBpbWFnZURhdGEgPSAoMCwgZ2V0SW1hZ2VEYXRhXzEuZ2V0SW1hZ2VEYXRhKShpbWFnZSk7XHJcbiAgICAgICAgLy9vdXRwdXQgdGhlIGdlbmVyYXRlZCBtYXAgc28gd2UgY2FuIHNhdmUgaXQgYW5kIHNlZSB3aGF0IHRoZSBjYWNoZSBsb29rcyBsaWtlXHJcbiAgICAgICAgY29uc3Qgc3RhcnRUaW1lID0gRGF0ZS5ub3coKTtcclxuICAgICAgICBjb25zdCBbc2FtcGxlR3JhcGhpY3NdID0gY3JlYXRlVHJpYW5nbGVGaXR0aW5nTWFwKGltYWdlRGF0YSwgbnVtSXRlcmF0aW9ucyk7XHJcbiAgICAgICAgdGltZXRha2VuLmlubmVyVGV4dCA9IGAke0RhdGUubm93KCkgLSBzdGFydFRpbWV9IG1zYDtcclxuICAgICAgICB0cmlhbmdsZW1hcC5pbm5lckhUTUwgPSAnJztcclxuICAgICAgICB0cmlhbmdsZW1hcC5hcHBlbmQoc2FtcGxlR3JhcGhpY3MuY2FudmFzKTtcclxuICAgICAgICBkcmF3SW1hZ2UoaW1hZ2VEYXRhKTtcclxuICAgIH07XHJcbiAgICByZXNvbHV0aW9uLm9uY2hhbmdlID0gY3JlYXRlTWFwO1xyXG4gICAgaW1hZ2Uub25sb2FkID0gY3JlYXRlTWFwO1xyXG4gICAgaW1hZ2Uuc3JjID0gaW1hZ2VJbnB1dC52YWx1ZTtcclxufTtcclxuaW1hZ2VJbnB1dC5vbmNoYW5nZSA9IHN0YXJ0O1xyXG5zdGFydCgpO1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLnNldFBpeGVsID0gZXhwb3J0cy5nZXRQaXhlbCA9IHZvaWQgMDtcclxuY29uc3QgZ2V0UGl4ZWwgPSAoaW1hZ2VEYXRhLCB4LCB5KSA9PiB7XHJcbiAgICBjb25zdCBzYW1wbGVJbmRleCA9IChpbWFnZURhdGEud2lkdGggKiBNYXRoLmZsb29yKHkpICsgTWF0aC5mbG9vcih4KSkgKiA0O1xyXG4gICAgcmV0dXJuIGltYWdlRGF0YS5kYXRhLnNsaWNlKHNhbXBsZUluZGV4LCBzYW1wbGVJbmRleCArIDQpO1xyXG59O1xyXG5leHBvcnRzLmdldFBpeGVsID0gZ2V0UGl4ZWw7XHJcbmNvbnN0IHNldFBpeGVsID0gKGltYWdlRGF0YSwgeCwgeSwgcmdiYSkgPT4ge1xyXG4gICAgaW1hZ2VEYXRhLmRhdGEuc2V0KHJnYmEsIChNYXRoLmZsb29yKHkpICogaW1hZ2VEYXRhLndpZHRoICsgTWF0aC5mbG9vcih4KSkgKiA0KTtcclxufTtcclxuZXhwb3J0cy5zZXRQaXhlbCA9IHNldFBpeGVsO1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLmludGVyc2VjdENlbGxUcmlhbmdsZSA9IHZvaWQgMDtcclxuY29uc3QgcG9pbnRfMSA9IHJlcXVpcmUoXCIuLi9tYXRocy9wb2ludFwiKTtcclxuY29uc3QgY29tbW9uXzEgPSByZXF1aXJlKFwiLi4vbWF0aHMvY29tbW9uXCIpO1xyXG5jb25zdCBpbnRlcnNlY3RDZWxsVHJpYW5nbGUgPSAodHJpYW5nbGUsIGNlbGwpID0+IHtcclxuICAgIC8vYnJhbmNoLWxlc3MgY3JlYXRpb24gb2YgdGhlIGludGVyc2VjdGVkIHBvaW50cyBvZiB0aGUgdHJpYW5nbGUgd2l0aGluIHRoZSBwaXhlbFxyXG4gICAgY29uc3QgcG9pbnRzID0gW107XHJcbiAgICBjb25zdCB0MXMgPSBbXHJcbiAgICAgICAgKDAsIGNvbW1vbl8xLnRpbWVBdFBvcykodHJpYW5nbGUucDFbMF0sIHRyaWFuZ2xlLmUxWzBdLCBjZWxsLm1pblswXSksXHJcbiAgICAgICAgKDAsIGNvbW1vbl8xLnRpbWVBdFBvcykodHJpYW5nbGUucDFbMF0sIHRyaWFuZ2xlLmUxWzBdLCBjZWxsLm1heFswXSksXHJcbiAgICAgICAgKDAsIGNvbW1vbl8xLnRpbWVBdFBvcykodHJpYW5nbGUucDFbMV0sIHRyaWFuZ2xlLmUxWzFdLCBjZWxsLm1pblsxXSksXHJcbiAgICAgICAgKDAsIGNvbW1vbl8xLnRpbWVBdFBvcykodHJpYW5nbGUucDFbMV0sIHRyaWFuZ2xlLmUxWzFdLCBjZWxsLm1heFsxXSlcclxuICAgIF07XHJcbiAgICB0MXMuc29ydCgpO1xyXG4gICAgcG9pbnRzLnB1c2goLi4udDFzLm1hcCgodCkgPT4gKDAsIHBvaW50XzEuY2xhbXAyKSgoMCwgcG9pbnRfMS5hZGQpKHRyaWFuZ2xlLnAxLCAoMCwgcG9pbnRfMS5zY2FsZSkodHJpYW5nbGUuZTEsIHQpKSwgY2VsbC5taW4sIGNlbGwubWF4KSkpO1xyXG4gICAgY29uc3QgdDJzID0gW1xyXG4gICAgICAgICgwLCBjb21tb25fMS50aW1lQXRQb3MpKHRyaWFuZ2xlLnAyWzBdLCB0cmlhbmdsZS5lMlswXSwgY2VsbC5taW5bMF0pLFxyXG4gICAgICAgICgwLCBjb21tb25fMS50aW1lQXRQb3MpKHRyaWFuZ2xlLnAyWzBdLCB0cmlhbmdsZS5lMlswXSwgY2VsbC5tYXhbMF0pLFxyXG4gICAgICAgICgwLCBjb21tb25fMS50aW1lQXRQb3MpKHRyaWFuZ2xlLnAyWzFdLCB0cmlhbmdsZS5lMlsxXSwgY2VsbC5taW5bMV0pLFxyXG4gICAgICAgICgwLCBjb21tb25fMS50aW1lQXRQb3MpKHRyaWFuZ2xlLnAyWzFdLCB0cmlhbmdsZS5lMlsxXSwgY2VsbC5tYXhbMV0pXHJcbiAgICBdO1xyXG4gICAgdDJzLnNvcnQoKTtcclxuICAgIHBvaW50cy5wdXNoKC4uLnQycy5tYXAoKHQpID0+ICgwLCBwb2ludF8xLmNsYW1wMikoKDAsIHBvaW50XzEuYWRkKSh0cmlhbmdsZS5wMiwgKDAsIHBvaW50XzEuc2NhbGUpKHRyaWFuZ2xlLmUyLCB0KSksIGNlbGwubWluLCBjZWxsLm1heCkpKTtcclxuICAgIGNvbnN0IHQzcyA9IFtcclxuICAgICAgICAoMCwgY29tbW9uXzEudGltZUF0UG9zKSh0cmlhbmdsZS5wM1swXSwgdHJpYW5nbGUuZTNbMF0sIGNlbGwubWluWzBdKSxcclxuICAgICAgICAoMCwgY29tbW9uXzEudGltZUF0UG9zKSh0cmlhbmdsZS5wM1swXSwgdHJpYW5nbGUuZTNbMF0sIGNlbGwubWF4WzBdKSxcclxuICAgICAgICAoMCwgY29tbW9uXzEudGltZUF0UG9zKSh0cmlhbmdsZS5wM1sxXSwgdHJpYW5nbGUuZTNbMV0sIGNlbGwubWluWzFdKSxcclxuICAgICAgICAoMCwgY29tbW9uXzEudGltZUF0UG9zKSh0cmlhbmdsZS5wM1sxXSwgdHJpYW5nbGUuZTNbMV0sIGNlbGwubWF4WzFdKVxyXG4gICAgXTtcclxuICAgIHQzcy5zb3J0KCk7XHJcbiAgICBwb2ludHMucHVzaCguLi50M3MubWFwKCh0KSA9PiAoMCwgcG9pbnRfMS5jbGFtcDIpKCgwLCBwb2ludF8xLmFkZCkodHJpYW5nbGUucDMsICgwLCBwb2ludF8xLnNjYWxlKSh0cmlhbmdsZS5lMywgdCkpLCBjZWxsLm1pbiwgY2VsbC5tYXgpKSk7XHJcbiAgICByZXR1cm4gcG9pbnRzO1xyXG59O1xyXG5leHBvcnRzLmludGVyc2VjdENlbGxUcmlhbmdsZSA9IGludGVyc2VjdENlbGxUcmlhbmdsZTtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5wb2x5Z29uQXJlYSA9IGV4cG9ydHMucG9seWdvbkFyZWFTaWduZWQgPSB2b2lkIDA7XHJcbmNvbnN0IHBvaW50XzEgPSByZXF1aXJlKFwiLi4vbWF0aHMvcG9pbnRcIik7XHJcbmNvbnN0IHBvbHlnb25BcmVhU2lnbmVkID0gKHBvaW50cykgPT4ge1xyXG4gICAgaWYgKCFwb2ludHMubGVuZ3RoKSB7XHJcbiAgICAgICAgcmV0dXJuIDA7XHJcbiAgICB9XHJcbiAgICBjb25zdCBsYXN0SW5kZXggPSBwb2ludHMubGVuZ3RoIC0gMTtcclxuICAgIGxldCBhcmVhID0gMDtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGFzdEluZGV4OyBpKyspIHtcclxuICAgICAgICBhcmVhICs9ICgwLCBwb2ludF8xLmRldGVybWluYW50MikocG9pbnRzW2ldLCBwb2ludHNbaSArIDFdKTtcclxuICAgIH1cclxuICAgIGFyZWEgKz0gKDAsIHBvaW50XzEuZGV0ZXJtaW5hbnQyKShwb2ludHNbbGFzdEluZGV4XSwgcG9pbnRzWzBdKTtcclxuICAgIHJldHVybiBhcmVhIC8gMjtcclxufTtcclxuZXhwb3J0cy5wb2x5Z29uQXJlYVNpZ25lZCA9IHBvbHlnb25BcmVhU2lnbmVkO1xyXG5jb25zdCBwb2x5Z29uQXJlYSA9IChwb2ludHMpID0+IHtcclxuICAgIHJldHVybiBNYXRoLmFicygoMCwgZXhwb3J0cy5wb2x5Z29uQXJlYVNpZ25lZCkocG9pbnRzKSk7XHJcbn07XHJcbmV4cG9ydHMucG9seWdvbkFyZWEgPSBwb2x5Z29uQXJlYTtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5nZXRMaW5lRXF1YXRpb24gPSB2b2lkIDA7XHJcbmNvbnN0IHBvaW50XzEgPSByZXF1aXJlKFwiLi4vbWF0aHMvcG9pbnRcIik7XHJcbmNvbnN0IGdldExpbmVFcXVhdGlvbiA9IChsaW5lKSA9PiB7XHJcbiAgICBjb25zdCBkaXJlY3Rpb24gPSAoMCwgcG9pbnRfMS5zdWIpKGxpbmUucDIsIGxpbmUucDEpO1xyXG4gICAgY29uc3QgZ3JhZGllbnQgPSBkaXJlY3Rpb25bMV0gLyBkaXJlY3Rpb25bMF07XHJcbiAgICBjb25zdCBpbnRlcnNlY3QgPSBsaW5lLnAxWzFdIC0gbGluZS5wMVswXSAqIGdyYWRpZW50O1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBncmFkaWVudCxcclxuICAgICAgICBpbnRlcnNlY3RcclxuICAgIH07XHJcbn07XHJcbmV4cG9ydHMuZ2V0TGluZUVxdWF0aW9uID0gZ2V0TGluZUVxdWF0aW9uO1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLnNvbHZlTGluZVggPSB2b2lkIDA7XHJcbmNvbnN0IHNvbHZlTGluZVggPSAoZXF1YXRpb24sIHkpID0+IHtcclxuICAgIGlmIChNYXRoLmFicyhlcXVhdGlvbi5ncmFkaWVudCkgIT0gMCkge1xyXG4gICAgICAgIHJldHVybiAoeSAtIGVxdWF0aW9uLmludGVyc2VjdCkgLyBlcXVhdGlvbi5ncmFkaWVudDtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHJldHVybiAtMS4wO1xyXG4gICAgfVxyXG59O1xyXG5leHBvcnRzLnNvbHZlTGluZVggPSBzb2x2ZUxpbmVYO1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLmxlcnAgPSBleHBvcnRzLnRpbWVBdFBvcyA9IGV4cG9ydHMuY2xhbXAgPSBleHBvcnRzLmZyYWN0ID0gZXhwb3J0cy5uZWdGcmFjdCA9IGV4cG9ydHMuRVBTSUxPTiA9IHZvaWQgMDtcclxuZXhwb3J0cy5FUFNJTE9OID0gMC4wMDAwMDE7XHJcbmNvbnN0IG5lZ0ZyYWN0ID0gKHgpID0+IDEuMCAtIHggKyBNYXRoLmZsb29yKHgpO1xyXG5leHBvcnRzLm5lZ0ZyYWN0ID0gbmVnRnJhY3Q7XHJcbmNvbnN0IGZyYWN0ID0gKHgpID0+IHggLSBNYXRoLmZsb29yKHgpO1xyXG5leHBvcnRzLmZyYWN0ID0gZnJhY3Q7XHJcbmNvbnN0IGNsYW1wID0gKGEsIG1pbiwgbWF4KSA9PiBNYXRoLm1heChNYXRoLm1pbihhLCBtYXgpLCBtaW4pO1xyXG5leHBvcnRzLmNsYW1wID0gY2xhbXA7XHJcbmNvbnN0IHRpbWVBdFBvcyA9IChzdGFydFBvcywgZGlyLCBuZXdQb3MpID0+IGRpciA/ICgwLCBleHBvcnRzLmNsYW1wKSgobmV3UG9zIC0gc3RhcnRQb3MpIC8gZGlyLCAwLCAxKSA6IDA7XHJcbmV4cG9ydHMudGltZUF0UG9zID0gdGltZUF0UG9zO1xyXG5jb25zdCBsZXJwID0gKGEsIGIsIHQpID0+IGEgKiAoMSAtIHQpICsgYiAqIHQ7XHJcbmV4cG9ydHMubGVycCA9IGxlcnA7XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuaW5SYW5nZSA9IGV4cG9ydHMuYXZnID0gZXhwb3J0cy5tYXgyID0gZXhwb3J0cy5taW4yID0gZXhwb3J0cy50b1ByZWNpc2lvbjIgPSBleHBvcnRzLmxlcnAyID0gZXhwb3J0cy5ub3JtYWxpemUgPSBleHBvcnRzLmxlbmd0aCA9IGV4cG9ydHMuZG90ID0gZXhwb3J0cy5zaWduID0gZXhwb3J0cy5hYnMgPSBleHBvcnRzLmNlaWwgPSBleHBvcnRzLmZsb29yID0gZXhwb3J0cy5zdWIgPSBleHBvcnRzLmFkZHMgPSBleHBvcnRzLmFkZCA9IGV4cG9ydHMuZGl2aWRlID0gZXhwb3J0cy5tdWx0aXBseSA9IGV4cG9ydHMuc2NhbGUgPSBleHBvcnRzLmVxdWFscyA9IGV4cG9ydHMuZGV0ZXJtaW5hbnQyID0gZXhwb3J0cy5jbGFtcDIgPSB2b2lkIDA7XHJcbmNvbnN0IGdsX21hdHJpeF8xID0gcmVxdWlyZShcImdsLW1hdHJpeFwiKTtcclxuY29uc3QgY2xhbXAyID0gKGEsIG1pbiwgbWF4KSA9PiB7XHJcbiAgICBjb25zdCBvdXQgPSBnbF9tYXRyaXhfMS52ZWMyLmNsb25lKGEpO1xyXG4gICAgZ2xfbWF0cml4XzEudmVjMi5taW4ob3V0LCBvdXQsIG1heCk7XHJcbiAgICBnbF9tYXRyaXhfMS52ZWMyLm1heChvdXQsIG91dCwgbWluKTtcclxuICAgIHJldHVybiBvdXQ7XHJcbn07XHJcbmV4cG9ydHMuY2xhbXAyID0gY2xhbXAyO1xyXG5jb25zdCBkZXRlcm1pbmFudDIgPSAocDEsIHAyKSA9PiBwMVswXSAqIHAyWzFdIC0gcDFbMV0gKiBwMlswXTtcclxuZXhwb3J0cy5kZXRlcm1pbmFudDIgPSBkZXRlcm1pbmFudDI7XHJcbmV4cG9ydHMuZXF1YWxzID0gZ2xfbWF0cml4XzEudmVjMi5lcXVhbHM7XHJcbmNvbnN0IHNjYWxlID0gKHAxLCBhKSA9PiBnbF9tYXRyaXhfMS52ZWMyLnNjYWxlKGdsX21hdHJpeF8xLnZlYzIuY3JlYXRlKCksIHAxLCBhKTtcclxuZXhwb3J0cy5zY2FsZSA9IHNjYWxlO1xyXG5jb25zdCBtdWx0aXBseSA9IChwMSwgcDIpID0+IGdsX21hdHJpeF8xLnZlYzIubXVsdGlwbHkoZ2xfbWF0cml4XzEudmVjMi5jcmVhdGUoKSwgcDEsIHAyKTtcclxuZXhwb3J0cy5tdWx0aXBseSA9IG11bHRpcGx5O1xyXG5jb25zdCBkaXZpZGUgPSAocDEsIHAyKSA9PiBnbF9tYXRyaXhfMS52ZWMyLmRpdmlkZShnbF9tYXRyaXhfMS52ZWMyLmNyZWF0ZSgpLCBwMSwgcDIpO1xyXG5leHBvcnRzLmRpdmlkZSA9IGRpdmlkZTtcclxuY29uc3QgYWRkID0gKHAxLCBwMikgPT4gZ2xfbWF0cml4XzEudmVjMi5hZGQoZ2xfbWF0cml4XzEudmVjMi5jcmVhdGUoKSwgcDEsIHAyKTtcclxuZXhwb3J0cy5hZGQgPSBhZGQ7XHJcbmNvbnN0IGFkZHMgPSAocDEsIGEpID0+IGdsX21hdHJpeF8xLnZlYzIuZnJvbVZhbHVlcyhwMVswXSArIGEsIHAxWzFdICsgYSk7XHJcbmV4cG9ydHMuYWRkcyA9IGFkZHM7XHJcbmNvbnN0IHN1YiA9IChwMSwgcDIpID0+IGdsX21hdHJpeF8xLnZlYzIuc3ViKGdsX21hdHJpeF8xLnZlYzIuY3JlYXRlKCksIHAxLCBwMik7XHJcbmV4cG9ydHMuc3ViID0gc3ViO1xyXG5jb25zdCBmbG9vciA9IChwMSkgPT4gZ2xfbWF0cml4XzEudmVjMi5mbG9vcihnbF9tYXRyaXhfMS52ZWMyLmNyZWF0ZSgpLCBwMSk7XHJcbmV4cG9ydHMuZmxvb3IgPSBmbG9vcjtcclxuY29uc3QgY2VpbCA9IChwMSkgPT4gZ2xfbWF0cml4XzEudmVjMi5jZWlsKGdsX21hdHJpeF8xLnZlYzIuY3JlYXRlKCksIHAxKTtcclxuZXhwb3J0cy5jZWlsID0gY2VpbDtcclxuY29uc3QgYWJzID0gKHAxKSA9PiBnbF9tYXRyaXhfMS52ZWMyLmZyb21WYWx1ZXMoTWF0aC5hYnMocDFbMF0pLCBNYXRoLmFicyhwMVsxXSkpO1xyXG5leHBvcnRzLmFicyA9IGFicztcclxuY29uc3Qgc2lnbiA9IChwMSkgPT4gZ2xfbWF0cml4XzEudmVjMi5mcm9tVmFsdWVzKE1hdGguc2lnbihwMVswXSksIE1hdGguc2lnbihwMVsxXSkpO1xyXG5leHBvcnRzLnNpZ24gPSBzaWduO1xyXG5jb25zdCBkb3QgPSAocDEsIHAyKSA9PiBnbF9tYXRyaXhfMS52ZWMyLmRvdChwMSwgcDIpO1xyXG5leHBvcnRzLmRvdCA9IGRvdDtcclxuY29uc3QgbGVuZ3RoID0gKHAxKSA9PiBnbF9tYXRyaXhfMS52ZWMyLmxlbmd0aChwMSk7XHJcbmV4cG9ydHMubGVuZ3RoID0gbGVuZ3RoO1xyXG5jb25zdCBub3JtYWxpemUgPSAocDEpID0+ICgwLCBleHBvcnRzLnNjYWxlKShwMSwgMSAvICgwLCBleHBvcnRzLmxlbmd0aCkocDEpKTtcclxuZXhwb3J0cy5ub3JtYWxpemUgPSBub3JtYWxpemU7XHJcbmNvbnN0IGxlcnAyID0gKGEsIGIsIHQpID0+IGdsX21hdHJpeF8xLnZlYzIubGVycChnbF9tYXRyaXhfMS52ZWMyLmNyZWF0ZSgpLCBhLCBiLCB0KTtcclxuZXhwb3J0cy5sZXJwMiA9IGxlcnAyO1xyXG4vL3dhcm5pbmc6IG11dGF0ZXMgYVxyXG5jb25zdCB0b1ByZWNpc2lvbjIgPSAoYSwgYW1vdW50KSA9PiB7XHJcbiAgICBhWzBdID0gcGFyc2VGbG9hdChhWzBdLnRvUHJlY2lzaW9uKGFtb3VudCkpO1xyXG4gICAgYVsxXSA9IHBhcnNlRmxvYXQoYVsxXS50b1ByZWNpc2lvbihhbW91bnQpKTtcclxuICAgIHJldHVybiBhO1xyXG59O1xyXG5leHBvcnRzLnRvUHJlY2lzaW9uMiA9IHRvUHJlY2lzaW9uMjtcclxuY29uc3QgbWluMiA9ICguLi5vYmpzKSA9PiB7XHJcbiAgICBjb25zdCBbZmlyc3QsIC4uLnJlc3RdID0gb2JqcztcclxuICAgIGNvbnN0IHJlc3VsdCA9IGdsX21hdHJpeF8xLnZlYzIuY2xvbmUoZmlyc3QpO1xyXG4gICAgcmVzdC5mb3JFYWNoKChvYmopID0+IHtcclxuICAgICAgICBnbF9tYXRyaXhfMS52ZWMyLm1pbihyZXN1bHQsIHJlc3VsdCwgb2JqKTtcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxufTtcclxuZXhwb3J0cy5taW4yID0gbWluMjtcclxuY29uc3QgbWF4MiA9ICguLi5vYmpzKSA9PiB7XHJcbiAgICBjb25zdCBbZmlyc3QsIC4uLnJlc3RdID0gb2JqcztcclxuICAgIGNvbnN0IHJlc3VsdCA9IGdsX21hdHJpeF8xLnZlYzIuY2xvbmUoZmlyc3QpO1xyXG4gICAgcmVzdC5mb3JFYWNoKChvYmopID0+IHtcclxuICAgICAgICBnbF9tYXRyaXhfMS52ZWMyLm1heChyZXN1bHQsIHJlc3VsdCwgb2JqKTtcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxufTtcclxuZXhwb3J0cy5tYXgyID0gbWF4MjtcclxuY29uc3QgYXZnID0gKC4uLm9ianMpID0+IHtcclxuICAgIGNvbnN0IHJlc3VsdCA9IGdsX21hdHJpeF8xLnZlYzIuY3JlYXRlKCk7XHJcbiAgICBpZiAob2Jqcy5sZW5ndGgpIHtcclxuICAgICAgICBvYmpzLmZvckVhY2goKG9iaikgPT4ge1xyXG4gICAgICAgICAgICBnbF9tYXRyaXhfMS52ZWMyLmFkZChyZXN1bHQsIHJlc3VsdCwgb2JqKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBnbF9tYXRyaXhfMS52ZWMyLnNjYWxlKHJlc3VsdCwgcmVzdWx0LCAxIC8gb2Jqcy5sZW5ndGgpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxufTtcclxuZXhwb3J0cy5hdmcgPSBhdmc7XHJcbmNvbnN0IGluUmFuZ2UgPSAocDEsIG1pbiwgbWF4KSA9PiB7XHJcbiAgICByZXR1cm4gIShwMVswXSA+IG1heFswXSB8fCBwMVswXSA8IG1pblswXSB8fCBwMVsxXSA+IG1heFsxXSB8fCBwMVsxXSA8IG1pblsxXSk7XHJcbn07XHJcbmV4cG9ydHMuaW5SYW5nZSA9IGluUmFuZ2U7XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMucmFzdGVyaXNlID0gdm9pZCAwO1xyXG5jb25zdCBnbF9tYXRyaXhfMSA9IHJlcXVpcmUoXCJnbC1tYXRyaXhcIik7XHJcbmNvbnN0IGNvbW1vbl8xID0gcmVxdWlyZShcIi4uL21hdGhzL2NvbW1vblwiKTtcclxuY29uc3Qgc29sdmVMaW5lWF8xID0gcmVxdWlyZShcIi4uL2xpbmUvc29sdmVMaW5lWFwiKTtcclxuY29uc3QgcG9pbnRfMSA9IHJlcXVpcmUoXCIuLi9tYXRocy9wb2ludFwiKTtcclxuY29uc3QgZ2V0TGluZUVxdWF0aW9uXzEgPSByZXF1aXJlKFwiLi4vbGluZS9nZXRMaW5lRXF1YXRpb25cIik7XHJcbmNvbnN0IGdldExpbmVSYW5nZSA9IChsaW5lKSA9PiB7XHJcbiAgICBsZXQgcFN0YXJ0O1xyXG4gICAgbGV0IHBFbmQ7XHJcbiAgICBpZiAobGluZS5wMVsxXSA8IGxpbmUucDJbMV0pIHtcclxuICAgICAgICBwU3RhcnQgPSBsaW5lLnAxO1xyXG4gICAgICAgIHBFbmQgPSBsaW5lLnAyO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAobGluZS5wMVsxXSA+IGxpbmUucDJbMV0pIHtcclxuICAgICAgICBwU3RhcnQgPSBsaW5lLnAyO1xyXG4gICAgICAgIHBFbmQgPSBsaW5lLnAxO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAobGluZS5wMVswXSA8IGxpbmUucDJbMF0pIHtcclxuICAgICAgICBwU3RhcnQgPSBsaW5lLnAxO1xyXG4gICAgICAgIHBFbmQgPSBsaW5lLnAyO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgcFN0YXJ0ID0gbGluZS5wMjtcclxuICAgICAgICBwRW5kID0gbGluZS5wMTtcclxuICAgIH1cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgcFN0YXJ0LFxyXG4gICAgICAgIHBFbmQsXHJcbiAgICAgICAgeFJhbmdlOiBnbF9tYXRyaXhfMS52ZWMyLmZyb21WYWx1ZXMoTWF0aC5taW4obGluZS5wMVswXSwgbGluZS5wMlswXSksIE1hdGgubWF4KGxpbmUucDFbMF0sIGxpbmUucDJbMF0pKSxcclxuICAgICAgICBlcXVhdGlvbjogKDAsIGdldExpbmVFcXVhdGlvbl8xLmdldExpbmVFcXVhdGlvbikobGluZSlcclxuICAgIH07XHJcbn07XHJcbmNvbnN0IHJhc3RlcmlzZSA9IChwb2ludHMsIGNhbGxiYWNrKSA9PiB7XHJcbiAgICBjb25zdCBsaW5lcyA9IFtcclxuICAgICAgICB7IHAxOiBwb2ludHNbMF0sIHAyOiBwb2ludHNbMV0gfSxcclxuICAgICAgICB7IHAxOiBwb2ludHNbMV0sIHAyOiBwb2ludHNbMl0gfSxcclxuICAgICAgICB7IHAxOiBwb2ludHNbMl0sIHAyOiBwb2ludHNbMF0gfVxyXG4gICAgXTtcclxuICAgIGNvbnN0IG1pblBvcyA9ICgwLCBwb2ludF8xLm1pbjIpKC4uLnBvaW50cyk7XHJcbiAgICBjb25zdCBtYXhQb3MgPSAoMCwgcG9pbnRfMS5tYXgyKSguLi5wb2ludHMpO1xyXG4gICAgY29uc3QgbGluZVJhbmdlcyA9IFtnZXRMaW5lUmFuZ2UobGluZXNbMF0pLCBnZXRMaW5lUmFuZ2UobGluZXNbMV0pLCBnZXRMaW5lUmFuZ2UobGluZXNbMl0pXTtcclxuICAgIGlmIChtYXhQb3NbMV0gLSBtaW5Qb3NbMV0gPCAxLjApIHtcclxuICAgICAgICBjYWxsYmFjayhtaW5Qb3NbMF0sIG1heFBvc1swXSwgbWluUG9zWzFdLCBmYWxzZSk7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgbGV0IHByZXZZID0gTWF0aC5mbG9vcihtaW5Qb3NbMV0pO1xyXG4gICAgZm9yIChsZXQgeSA9IHByZXZZICsgMTsgeSA8PSBNYXRoLmNlaWwobWF4UG9zWzFdKTsgeSsrKSB7XHJcbiAgICAgICAgLy93ZSBqdXN0IG5lZWQgdG8gZ2V0IGZvdXIgbnVtYmVycywgdGhlIG91dGVyIG1pbiBhbmQgbWF4IGFuZCBpbm5lciBtaW4gYW5kIG1heCB2YWx1ZXNcclxuICAgICAgICBjb25zdCByYW5nZSA9IFstMSwgLTEsIC0xLCAtMV07XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCAzOyBpKyspIHtcclxuICAgICAgICAgICAgY29uc3QgbGluZSA9IGxpbmVSYW5nZXNbaV07XHJcbiAgICAgICAgICAgIGlmIChsaW5lLnBFbmRbMV0gPj0gcHJldlkgJiYgbGluZS5wU3RhcnRbMV0gPCB5KSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgZnJvbVggPSAoMCwgc29sdmVMaW5lWF8xLnNvbHZlTGluZVgpKGxpbmUuZXF1YXRpb24sIHByZXZZKTtcclxuICAgICAgICAgICAgICAgIGlmIChmcm9tWCA+PSAwLjApIHtcclxuICAgICAgICAgICAgICAgICAgICBmcm9tWCA9ICgwLCBjb21tb25fMS5jbGFtcCkoZnJvbVgsIGxpbmUueFJhbmdlWzBdLCBsaW5lLnhSYW5nZVsxXSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBmcm9tWCA9IGxpbmUucFN0YXJ0WzBdO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgbGV0IHRvWCA9ICgwLCBzb2x2ZUxpbmVYXzEuc29sdmVMaW5lWCkobGluZS5lcXVhdGlvbiwgeSk7XHJcbiAgICAgICAgICAgICAgICBpZiAodG9YID49IDAuMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRvWCA9ICgwLCBjb21tb25fMS5jbGFtcCkodG9YLCBsaW5lLnhSYW5nZVswXSwgbGluZS54UmFuZ2VbMV0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdG9YID0gbGluZS5wRW5kWzBdO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29uc3QgeFJhbmdlID0gW01hdGgubWluKGZyb21YLCB0b1gpLCBNYXRoLm1heChmcm9tWCwgdG9YKV07XHJcbiAgICAgICAgICAgICAgICBpZiAocmFuZ2VbMF0gPCAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9maXJzdCBlbnRyeVxyXG4gICAgICAgICAgICAgICAgICAgIHJhbmdlWzBdID0geFJhbmdlWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgIHJhbmdlWzFdID0geFJhbmdlWzFdO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoKHhSYW5nZVswXSA8PSByYW5nZVsxXSArIDEgJiYgeFJhbmdlWzBdID49IHJhbmdlWzBdIC0gMSkgfHxcclxuICAgICAgICAgICAgICAgICAgICAoeFJhbmdlWzFdIDw9IHJhbmdlWzFdICsgMSAmJiB4UmFuZ2VbMV0gPj0gcmFuZ2VbMF0gLSAxKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vZXh0ZW5kcyB0aGUgZmlyc3QgZW50cnlcclxuICAgICAgICAgICAgICAgICAgICByYW5nZVswXSA9IE1hdGgubWluKHJhbmdlWzBdLCB4UmFuZ2VbMF0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHJhbmdlWzFdID0gTWF0aC5tYXgocmFuZ2VbMV0sIHhSYW5nZVsxXSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChyYW5nZVsyXSA8IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAvL211c3QgYmUgYSBuZXcgc2Vjb25kIHJhbmdlLCBkZXRlcm1pbmUgaWYgd2UgbmVlZCB0byBzd2FwIG9yIG5vdCB0byBrZWVwIHRoZW0gb3JkZXJlZFxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh4UmFuZ2VbMF0gPiByYW5nZVsxXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByYW5nZVsyXSA9IHhSYW5nZVswXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2VbM10gPSB4UmFuZ2VbMV07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByYW5nZVsyXSA9IHJhbmdlWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByYW5nZVszXSA9IHJhbmdlWzFdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByYW5nZVswXSA9IHhSYW5nZVswXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2VbMV0gPSB4UmFuZ2VbMV07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9leHRlbmRzIHRoZSBzZWNvbmQgcmFuZ2VcclxuICAgICAgICAgICAgICAgICAgICByYW5nZVsyXSA9IE1hdGgubWluKHJhbmdlWzJdLCB4UmFuZ2VbMF0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHJhbmdlWzNdID0gTWF0aC5tYXgocmFuZ2VbM10sIHhSYW5nZVsxXSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgY2FsbGJhY2socmFuZ2VbMF0sIHJhbmdlWzFdLCBwcmV2WSwgZmFsc2UpO1xyXG4gICAgICAgIC8vd2UgaGF2ZSBhbiBpbnNpZGVcclxuICAgICAgICBpZiAocmFuZ2VbMl0gPiByYW5nZVsxXSkge1xyXG4gICAgICAgICAgICBjYWxsYmFjayhyYW5nZVsxXSArIDEsIHJhbmdlWzJdIC0gMSwgcHJldlksIHRydWUpO1xyXG4gICAgICAgICAgICBjYWxsYmFjayhyYW5nZVsyXSwgcmFuZ2VbM10sIHByZXZZLCBmYWxzZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHByZXZZID0geTtcclxuICAgIH1cclxufTtcclxuZXhwb3J0cy5yYXN0ZXJpc2UgPSByYXN0ZXJpc2U7XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMudHJpYW5nbGVDb3ZlcmFnZSA9IHZvaWQgMDtcclxuY29uc3QgaW50ZXJzZWN0Q2VsbFRyaWFuZ2xlXzEgPSByZXF1aXJlKFwiLi4vZ2VvbWV0cnkvaW50ZXJzZWN0Q2VsbFRyaWFuZ2xlXCIpO1xyXG5jb25zdCBwb2x5Z29uQXJlYV8xID0gcmVxdWlyZShcIi4uL2dlb21ldHJ5L3BvbHlnb25BcmVhXCIpO1xyXG5jb25zdCByYXN0ZXJpc2VfMSA9IHJlcXVpcmUoXCIuL3Jhc3RlcmlzZVwiKTtcclxuY29uc3QgYWRkNE11dGF0ZV8xID0gcmVxdWlyZShcIi4uL3V0aWxzL2FkZDRNdXRhdGVcIik7XHJcbmNvbnN0IGZsb29yNE11dGF0ZV8xID0gcmVxdWlyZShcIi4uL3V0aWxzL2Zsb29yNE11dGF0ZVwiKTtcclxuY29uc3Qgc2NhbGU0TXV0YXRlXzEgPSByZXF1aXJlKFwiLi4vdXRpbHMvc2NhbGU0TXV0YXRlXCIpO1xyXG5jb25zdCBjYW52YXNfMSA9IHJlcXVpcmUoXCIuLi9kcmF3L2NhbnZhc1wiKTtcclxuY29uc3QgY29tbW9uXzEgPSByZXF1aXJlKFwiLi4vbWF0aHMvY29tbW9uXCIpO1xyXG5jb25zdCB0cmlhbmdsZUNvdmVyYWdlID0gKGltYWdlRGF0YSwgdHJpYW5nbGUpID0+IHtcclxuICAgIC8vcGxvdCBhIHRyaWFuZ2xlIG91dGxpbmUgb24gdG9wIG9mIHRoZSBpbWFnZVxyXG4gICAgY29uc3QgY29sb3VyID0gWzAsIDAsIDAsIDBdO1xyXG4gICAgY29uc3QgdHJpYW5nbGVDb3ZlcmFnZSA9IE51bWJlcigoMCwgcG9seWdvbkFyZWFfMS5wb2x5Z29uQXJlYSkodHJpYW5nbGUucG9pbnRzKS50b0ZpeGVkKDUpKTtcclxuICAgIC8vaWYgdGhlIHRyaWFuZ2xlIGlzIGRlZ2VuZXJhdGUgYW5kIGhhcyBubyBhcmVhIHRoZW4gd2UganVzdCBhdmVyYWdlIHRoZSBjb2xvdXJzIHRoZSBsaW5lcyBjb3ZlclxyXG4gICAgaWYgKHRyaWFuZ2xlQ292ZXJhZ2UgPCAxLjApIHtcclxuICAgICAgICBsZXQgbnVtUGl4ZWxzID0gMDtcclxuICAgICAgICAoMCwgcmFzdGVyaXNlXzEucmFzdGVyaXNlKSh0cmlhbmdsZS5wb2ludHMsIChtaW5YLCBtYXhYLCB5KSA9PiB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IHggPSBtaW5YOyB4IDw9IG1heFg7IHgrKykge1xyXG4gICAgICAgICAgICAgICAgKDAsIGFkZDRNdXRhdGVfMS5hZGQ0TXV0YXRlKShjb2xvdXIsICgwLCBjYW52YXNfMS5nZXRQaXhlbCkoaW1hZ2VEYXRhLCB4LCB5KSk7XHJcbiAgICAgICAgICAgICAgICBudW1QaXhlbHMrKztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiAoMCwgZmxvb3I0TXV0YXRlXzEuZmxvb3I0TXV0YXRlKSgoMCwgc2NhbGU0TXV0YXRlXzEuc2NhbGU0TXV0YXRlKShjb2xvdXIsIDEgLyBudW1QaXhlbHMpKTtcclxuICAgIH1cclxuICAgICgwLCByYXN0ZXJpc2VfMS5yYXN0ZXJpc2UpKHRyaWFuZ2xlLnBvaW50cywgKG1pblgsIG1heFgsIHksIGlzSW5zaWRlKSA9PiB7XHJcbiAgICAgICAgaWYgKGlzSW5zaWRlKSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IHggPSBtaW5YOyB4IDw9IG1heFg7IHgrKykge1xyXG4gICAgICAgICAgICAgICAgKDAsIGFkZDRNdXRhdGVfMS5hZGQ0TXV0YXRlKShjb2xvdXIsICgwLCBjYW52YXNfMS5nZXRQaXhlbCkoaW1hZ2VEYXRhLCB4LCB5KSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHlNYXggPSB5ICsgMTtcclxuICAgICAgICAgICAgZm9yIChsZXQgeCA9IG1pblg7IHggPD0gbWF4WDsgeCsrKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjZWxsRmlsbFBvbHlnb24gPSAoMCwgaW50ZXJzZWN0Q2VsbFRyaWFuZ2xlXzEuaW50ZXJzZWN0Q2VsbFRyaWFuZ2xlKSh0cmlhbmdsZSwgeyBtaW46IFt4LCB5XSwgbWF4OiBbeCArIDEsIHlNYXhdIH0pO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYXJlYUNvdmVyYWdlID0gKDAsIGNvbW1vbl8xLmNsYW1wKShOdW1iZXIoKDAsIHBvbHlnb25BcmVhXzEucG9seWdvbkFyZWEpKGNlbGxGaWxsUG9seWdvbikudG9GaXhlZCg1KSksIDAsIDEpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcGl4ZWwgPSAoMCwgY2FudmFzXzEuZ2V0UGl4ZWwpKGltYWdlRGF0YSwgeCwgeSk7XHJcbiAgICAgICAgICAgICAgICAoMCwgYWRkNE11dGF0ZV8xLmFkZDRNdXRhdGUpKGNvbG91ciwgKDAsIHNjYWxlNE11dGF0ZV8xLnNjYWxlNE11dGF0ZSkocGl4ZWwsIGFyZWFDb3ZlcmFnZSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICAvL2ZpbGwgdGhlIHRyaWFuZ2xlIHdpdGggdGhlIGNvbXB1dGVkIGF2ZXJhZ2UgdmFsdWVcclxuICAgIHJldHVybiAoMCwgZmxvb3I0TXV0YXRlXzEuZmxvb3I0TXV0YXRlKSgoMCwgc2NhbGU0TXV0YXRlXzEuc2NhbGU0TXV0YXRlKShjb2xvdXIsIDEgLyB0cmlhbmdsZUNvdmVyYWdlKSk7XHJcbn07XHJcbmV4cG9ydHMudHJpYW5nbGVDb3ZlcmFnZSA9IHRyaWFuZ2xlQ292ZXJhZ2U7XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuYWRkNE11dGF0ZSA9IHZvaWQgMDtcclxuY29uc3QgYWRkNE11dGF0ZSA9IChhLCBiKSA9PiB7XHJcbiAgICBhWzBdICs9IGJbMF07XHJcbiAgICBhWzFdICs9IGJbMV07XHJcbiAgICBhWzJdICs9IGJbMl07XHJcbiAgICBhWzNdICs9IGJbM107XHJcbiAgICByZXR1cm4gYTtcclxufTtcclxuZXhwb3J0cy5hZGQ0TXV0YXRlID0gYWRkNE11dGF0ZTtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5mbG9vcjRNdXRhdGUgPSB2b2lkIDA7XHJcbmNvbnN0IGZsb29yNE11dGF0ZSA9IChhKSA9PiB7XHJcbiAgICBhWzBdID0gTWF0aC5mbG9vcihhWzBdKTtcclxuICAgIGFbMV0gPSBNYXRoLmZsb29yKGFbMV0pO1xyXG4gICAgYVsyXSA9IE1hdGguZmxvb3IoYVsyXSk7XHJcbiAgICBhWzNdID0gTWF0aC5mbG9vcihhWzNdKTtcclxuICAgIHJldHVybiBhO1xyXG59O1xyXG5leHBvcnRzLmZsb29yNE11dGF0ZSA9IGZsb29yNE11dGF0ZTtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5nZXRJbWFnZURhdGEgPSB2b2lkIDA7XHJcbmNvbnN0IGdldEltYWdlRGF0YSA9IChpbWFnZSkgPT4ge1xyXG4gICAgY29uc3QgaW1hZ2VDYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcclxuICAgIGltYWdlQ2FudmFzLndpZHRoID0gaW1hZ2Uud2lkdGg7XHJcbiAgICBpbWFnZUNhbnZhcy5oZWlnaHQgPSBpbWFnZS5oZWlnaHQ7XHJcbiAgICBjb25zdCBpbWFnZUdyYXBoaWNzID0gaW1hZ2VDYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcclxuICAgIGlmICghaW1hZ2VHcmFwaGljcykge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignQ291bGQgbm90IGNyZWF0ZSBjYW52YXMgdG8gZXh0cmFjdCBpbWFnZSBkYXRhJyk7XHJcbiAgICB9XHJcbiAgICBpbWFnZUdyYXBoaWNzLmNsZWFyUmVjdCgwLCAwLCBpbWFnZUNhbnZhcy53aWR0aCwgaW1hZ2VDYW52YXMuaGVpZ2h0KTtcclxuICAgIGltYWdlR3JhcGhpY3MuZHJhd0ltYWdlKGltYWdlLCAwLCAwKTtcclxuICAgIHJldHVybiBpbWFnZUdyYXBoaWNzLmdldEltYWdlRGF0YSgwLCAwLCBpbWFnZUNhbnZhcy53aWR0aCwgaW1hZ2VDYW52YXMuaGVpZ2h0KTtcclxufTtcclxuZXhwb3J0cy5nZXRJbWFnZURhdGEgPSBnZXRJbWFnZURhdGE7XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuc2NhbGU0TXV0YXRlID0gdm9pZCAwO1xyXG5jb25zdCBzY2FsZTRNdXRhdGUgPSAoYSwgbWFnKSA9PiB7XHJcbiAgICBhWzBdICo9IG1hZztcclxuICAgIGFbMV0gKj0gbWFnO1xyXG4gICAgYVsyXSAqPSBtYWc7XHJcbiAgICBhWzNdICo9IG1hZztcclxuICAgIHJldHVybiBhO1xyXG59O1xyXG5leHBvcnRzLnNjYWxlNE11dGF0ZSA9IHNjYWxlNE11dGF0ZTtcclxuIl0sIm5hbWVzIjpbImdsX21hdHJpeF8xIiwidHJpYW5nbGVDb3ZlcmFnZV8xIiwicG9pbnRfMSIsImdldEltYWdlRGF0YV8xIiwiZ2FtZSIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJpbWFnZUlucHV0IiwidHJpYW5nbGVtYXAiLCJyZXNvbHV0aW9uIiwidGltZXRha2VuIiwiZyIsImdldENvbnRleHQiLCJzdGFydCIsImltYWdlIiwiSW1hZ2UiLCJjcmVhdGVNYXAiLCJudW1JdGVyYXRpb25zIiwicGFyc2VJbnQiLCJ2YWx1ZSIsImltYWdlRGF0YSIsImdldEltYWdlRGF0YSIsInN0YXJ0VGltZSIsIkRhdGUiLCJub3ciLCJzYW1wbGVHcmFwaGljcyIsInRleHR1cmVTaXplIiwiTWF0aCIsInBvdyIsInNhbXBsZUNhbnZhcyIsImNyZWF0ZUVsZW1lbnQiLCJ3aWR0aCIsImhlaWdodCIsInNhbXBsZURhdGEiLCJ4U3RlcCIsInlTdGVwIiwiaSIsIngxIiwieTEiLCJ4MiIsInkyIiwieDMiLCJ5MyIsInAxIiwidmVjMiIsImZyb21WYWx1ZXMiLCJwMiIsInAzIiwidHJpYW5nbGUiLCJlMSIsInN1YiIsImUyIiwiZTMiLCJwb2ludHMiLCJjb2xvdXIiLCJ0cmlhbmdsZUNvdmVyYWdlIiwiZGF0YSIsInNldCIsInB1dEltYWdlRGF0YSIsImNyZWF0ZVRyaWFuZ2xlRml0dGluZ01hcCIsImlubmVyVGV4dCIsImlubmVySFRNTCIsImFwcGVuZCIsImNhbnZhcyIsImNsZWFyUmVjdCIsImRyYXdJbWFnZSIsIm9uY2hhbmdlIiwib25sb2FkIiwic3JjIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwic2V0UGl4ZWwiLCJnZXRQaXhlbCIsIngiLCJ5Iiwic2FtcGxlSW5kZXgiLCJmbG9vciIsInNsaWNlIiwicmdiYSIsImludGVyc2VjdENlbGxUcmlhbmdsZSIsImNvbW1vbl8xIiwiY2VsbCIsInQxcyIsInRpbWVBdFBvcyIsIm1pbiIsIm1heCIsInNvcnQiLCJwdXNoIiwibWFwIiwidCIsImNsYW1wMiIsImFkZCIsInNjYWxlIiwidDJzIiwidDNzIiwicG9seWdvbkFyZWEiLCJwb2x5Z29uQXJlYVNpZ25lZCIsImxlbmd0aCIsImxhc3RJbmRleCIsImFyZWEiLCJkZXRlcm1pbmFudDIiLCJhYnMiLCJnZXRMaW5lRXF1YXRpb24iLCJsaW5lIiwiZGlyZWN0aW9uIiwiZ3JhZGllbnQiLCJpbnRlcnNlY3QiLCJzb2x2ZUxpbmVYIiwiZXF1YXRpb24iLCJsZXJwIiwiY2xhbXAiLCJmcmFjdCIsIm5lZ0ZyYWN0IiwiRVBTSUxPTiIsImEiLCJzdGFydFBvcyIsImRpciIsIm5ld1BvcyIsImIiLCJpblJhbmdlIiwiYXZnIiwibWF4MiIsIm1pbjIiLCJ0b1ByZWNpc2lvbjIiLCJsZXJwMiIsIm5vcm1hbGl6ZSIsImRvdCIsInNpZ24iLCJjZWlsIiwiYWRkcyIsImRpdmlkZSIsIm11bHRpcGx5IiwiZXF1YWxzIiwib3V0IiwiY2xvbmUiLCJjcmVhdGUiLCJhbW91bnQiLCJwYXJzZUZsb2F0IiwidG9QcmVjaXNpb24iLCJvYmpzIiwiZmlyc3QiLCJyZXN0IiwicmVzdWx0IiwiZm9yRWFjaCIsIm9iaiIsInJhc3RlcmlzZSIsInNvbHZlTGluZVhfMSIsImdldExpbmVFcXVhdGlvbl8xIiwiZ2V0TGluZVJhbmdlIiwicFN0YXJ0IiwicEVuZCIsInhSYW5nZSIsImNhbGxiYWNrIiwibGluZXMiLCJtaW5Qb3MiLCJtYXhQb3MiLCJsaW5lUmFuZ2VzIiwicHJldlkiLCJyYW5nZSIsImZyb21YIiwidG9YIiwiaW50ZXJzZWN0Q2VsbFRyaWFuZ2xlXzEiLCJwb2x5Z29uQXJlYV8xIiwicmFzdGVyaXNlXzEiLCJhZGQ0TXV0YXRlXzEiLCJmbG9vcjRNdXRhdGVfMSIsInNjYWxlNE11dGF0ZV8xIiwiY2FudmFzXzEiLCJOdW1iZXIiLCJ0b0ZpeGVkIiwibnVtUGl4ZWxzIiwibWluWCIsIm1heFgiLCJhZGQ0TXV0YXRlIiwiZmxvb3I0TXV0YXRlIiwic2NhbGU0TXV0YXRlIiwiaXNJbnNpZGUiLCJ5TWF4IiwiY2VsbEZpbGxQb2x5Z29uIiwiYXJlYUNvdmVyYWdlIiwicGl4ZWwiLCJpbWFnZUNhbnZhcyIsImltYWdlR3JhcGhpY3MiLCJFcnJvciIsIm1hZyJdLCJzb3VyY2VSb290IjoiIn0=