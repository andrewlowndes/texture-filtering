"use strict";(self.webpackChunksampling_coverage=self.webpackChunksampling_coverage||[]).push([[695],{4318:(e,t,a)=>{const o=a(887),n=a(9202),r=a(4669),i=a(8372),l=document.getElementById("game"),c=document.getElementById("chooseimage"),s=document.getElementById("trianglemap"),d=document.getElementById("resolution"),m=document.getElementById("timetaken"),p=l.getContext("2d"),u=()=>{const e=new Image,t=()=>{const t=parseInt(d.value,10),a=i.getImageData(e),c=Date.now(),[u]=((e,t)=>{const a=Math.pow(t,3),i=document.createElement("canvas");i.width=a,i.height=a;const l=i.getContext("2d"),c=l.getImageData(0,0,a,a),s=(e.width-1)/(t-1),d=(e.height-1)/(t-1);for(let t=0,a=0;a<e.width;a+=s)for(let i=0;i<e.height;i+=d)for(let l=0;l<e.width;l+=s)for(let m=0;m<e.height;m+=d)for(let p=0;p<e.width;p+=s)for(let s=0;s<e.height;s+=d,t+=4){const d=o.vec2.fromValues(a,i),u=o.vec2.fromValues(l,m),g=o.vec2.fromValues(p,s),v={p1:d,p2:u,p3:g,e1:r.sub(u,d),e2:r.sub(g,u),e3:r.sub(d,g),points:[d,u,g]},h=n.triangleCoverage(e,v);c.data.set(h,t)}return l.putImageData(c,0,0),[l,c]})(a,t);m.innerText=Date.now()-c+" ms",s.innerHTML="",s.append(u.canvas),(e=>{p.clearRect(0,0,l.width,l.height),p.putImageData(e,0,0)})(a)};d.onchange=t,e.onload=t,e.src=c.value};c.onchange=u,u()},975:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setPixel=t.getPixel=void 0,t.getPixel=(e,t,a)=>{const o=4*(e.width*Math.floor(a)+Math.floor(t));return e.data.slice(o,o+4)},t.setPixel=(e,t,a,o)=>{e.data.set(o,4*(Math.floor(a)*e.width+Math.floor(t)))}},6558:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.intersectCellTriangle=void 0;const o=a(4669),n=a(3345);t.intersectCellTriangle=(e,t)=>{const a=[],r=[n.timeAtPos(e.p1[0],e.e1[0],t.min[0]),n.timeAtPos(e.p1[0],e.e1[0],t.max[0]),n.timeAtPos(e.p1[1],e.e1[1],t.min[1]),n.timeAtPos(e.p1[1],e.e1[1],t.max[1])];r.sort(),a.push(...r.map((a=>o.clamp2(o.add(e.p1,o.scale(e.e1,a)),t.min,t.max))));const i=[n.timeAtPos(e.p2[0],e.e2[0],t.min[0]),n.timeAtPos(e.p2[0],e.e2[0],t.max[0]),n.timeAtPos(e.p2[1],e.e2[1],t.min[1]),n.timeAtPos(e.p2[1],e.e2[1],t.max[1])];i.sort(),a.push(...i.map((a=>o.clamp2(o.add(e.p2,o.scale(e.e2,a)),t.min,t.max))));const l=[n.timeAtPos(e.p3[0],e.e3[0],t.min[0]),n.timeAtPos(e.p3[0],e.e3[0],t.max[0]),n.timeAtPos(e.p3[1],e.e3[1],t.min[1]),n.timeAtPos(e.p3[1],e.e3[1],t.max[1])];return l.sort(),a.push(...l.map((a=>o.clamp2(o.add(e.p3,o.scale(e.e3,a)),t.min,t.max)))),a}},6923:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.polygonArea=t.polygonAreaSigned=void 0;const o=a(4669);t.polygonAreaSigned=e=>{if(!e.length)return 0;const t=e.length-1;let a=0;for(let n=0;n<t;n++)a+=o.determinant2(e[n],e[n+1]);return a+=o.determinant2(e[t],e[0]),a/2},t.polygonArea=e=>Math.abs(t.polygonAreaSigned(e))},2841:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.getLineEquation=void 0;const o=a(4669);t.getLineEquation=e=>{const t=o.sub(e.p2,e.p1),a=t[1]/t[0];return{gradient:a,intersect:e.p1[1]-e.p1[0]*a}}},2952:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.solveLineX=void 0,t.solveLineX=(e,t)=>0!=Math.abs(e.gradient)?(t-e.intersect)/e.gradient:-1},3345:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.lerp=t.timeAtPos=t.clamp=t.fract=t.negFract=t.EPSILON=void 0,t.EPSILON=1e-6,t.negFract=e=>1-e+Math.floor(e),t.fract=e=>e-Math.floor(e),t.clamp=(e,t,a)=>Math.max(Math.min(e,a),t),t.timeAtPos=(e,a,o)=>a?t.clamp((o-e)/a,0,1):0,t.lerp=(e,t,a)=>e*(1-a)+t*a},4669:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.inRange=t.avg=t.max2=t.min2=t.toPrecision2=t.lerp2=t.normalize=t.length=t.dot=t.sign=t.abs=t.ceil=t.floor=t.sub=t.adds=t.add=t.divide=t.multiply=t.scale=t.equals=t.determinant2=t.clamp2=void 0;const o=a(887);t.clamp2=(e,t,a)=>{const n=o.vec2.clone(e);return o.vec2.min(n,n,a),o.vec2.max(n,n,t),n},t.determinant2=(e,t)=>e[0]*t[1]-e[1]*t[0],t.equals=o.vec2.equals,t.scale=(e,t)=>o.vec2.scale(o.vec2.create(),e,t),t.multiply=(e,t)=>o.vec2.multiply(o.vec2.create(),e,t),t.divide=(e,t)=>o.vec2.divide(o.vec2.create(),e,t),t.add=(e,t)=>o.vec2.add(o.vec2.create(),e,t),t.adds=(e,t)=>o.vec2.fromValues(e[0]+t,e[1]+t),t.sub=(e,t)=>o.vec2.sub(o.vec2.create(),e,t),t.floor=e=>o.vec2.floor(o.vec2.create(),e),t.ceil=e=>o.vec2.ceil(o.vec2.create(),e),t.abs=e=>o.vec2.fromValues(Math.abs(e[0]),Math.abs(e[1])),t.sign=e=>o.vec2.fromValues(Math.sign(e[0]),Math.sign(e[1])),t.dot=(e,t)=>o.vec2.dot(e,t),t.length=e=>o.vec2.length(e),t.normalize=e=>t.scale(e,1/t.length(e)),t.lerp2=(e,t,a)=>o.vec2.lerp(o.vec2.create(),e,t,a),t.toPrecision2=(e,t)=>(e[0]=parseFloat(e[0].toPrecision(t)),e[1]=parseFloat(e[1].toPrecision(t)),e),t.min2=(...e)=>{const[t,...a]=e,n=o.vec2.clone(t);return a.forEach((e=>{o.vec2.min(n,n,e)})),n},t.max2=(...e)=>{const[t,...a]=e,n=o.vec2.clone(t);return a.forEach((e=>{o.vec2.max(n,n,e)})),n},t.avg=(...e)=>{const t=o.vec2.create();return e.length&&(e.forEach((e=>{o.vec2.add(t,t,e)})),o.vec2.scale(t,t,1/e.length)),t},t.inRange=(e,t,a)=>!(e[0]>a[0]||e[0]<t[0]||e[1]>a[1]||e[1]<t[1])},2916:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.rasterise=void 0;const o=a(887),n=a(3345),r=a(2952),i=a(4669),l=a(2841),c=e=>{let t,a;return e.p1[1]<e.p2[1]?(t=e.p1,a=e.p2):e.p1[1]>e.p2[1]?(t=e.p2,a=e.p1):e.p1[0]<e.p2[0]?(t=e.p1,a=e.p2):(t=e.p2,a=e.p1),{pStart:t,pEnd:a,xRange:o.vec2.fromValues(Math.min(e.p1[0],e.p2[0]),Math.max(e.p1[0],e.p2[0])),equation:l.getLineEquation(e)}};t.rasterise=(e,t)=>{const a=[{p1:e[0],p2:e[1]},{p1:e[1],p2:e[2]},{p1:e[2],p2:e[0]}],o=i.min2(...e),l=i.max2(...e),s=[c(a[0]),c(a[1]),c(a[2])];if(l[1]-o[1]<1)return void t(o[0],l[0],o[1],!1);let d=Math.floor(o[1]);for(let e=d+1;e<=Math.ceil(l[1]);e++){const a=[-1,-1,-1,-1];for(let t=0;t<3;t++){const o=s[t];if(o.pEnd[1]>=d&&o.pStart[1]<e){let t=r.solveLineX(o.equation,d);t=t>=0?n.clamp(t,o.xRange[0],o.xRange[1]):o.pStart[0];let i=r.solveLineX(o.equation,e);i=i>=0?n.clamp(i,o.xRange[0],o.xRange[1]):o.pEnd[0];const l=[Math.min(t,i),Math.max(t,i)];a[0]<0?(a[0]=l[0],a[1]=l[1]):l[0]<=a[1]+1&&l[0]>=a[0]-1||l[1]<=a[1]+1&&l[1]>=a[0]-1?(a[0]=Math.min(a[0],l[0]),a[1]=Math.max(a[1],l[1])):a[2]<0?l[0]>a[1]?(a[2]=l[0],a[3]=l[1]):(a[2]=a[0],a[3]=a[1],a[0]=l[0],a[1]=l[1]):(a[2]=Math.min(a[2],l[0]),a[3]=Math.max(a[3],l[1]))}}t(a[0],a[1],d,!1),a[2]>a[1]&&(t(a[1]+1,a[2]-1,d,!0),t(a[2],a[3],d,!1)),d=e}}},9202:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.triangleCoverage=void 0;const o=a(6558),n=a(6923),r=a(2916),i=a(9078),l=a(5062),c=a(8027),s=a(975),d=a(3345);t.triangleCoverage=(e,t)=>{const a=[0,0,0,0],m=Number(n.polygonArea(t.points).toFixed(5));if(m<1){let o=0;return r.rasterise(t.points,((t,n,r)=>{for(let l=t;l<=n;l++)i.add4Mutate(a,s.getPixel(e,l,r)),o++})),l.floor4Mutate(c.scale4Mutate(a,1/o))}return r.rasterise(t.points,((r,l,m,p)=>{if(p)for(let t=r;t<=l;t++)i.add4Mutate(a,s.getPixel(e,t,m));else{const p=m+1;for(let u=r;u<=l;u++){const r=o.intersectCellTriangle(t,{min:[u,m],max:[u+1,p]}),l=d.clamp(Number(n.polygonArea(r).toFixed(5)),0,1),g=s.getPixel(e,u,m);i.add4Mutate(a,c.scale4Mutate(g,l))}}})),l.floor4Mutate(c.scale4Mutate(a,1/m))}},9078:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.add4Mutate=void 0,t.add4Mutate=(e,t)=>(e[0]+=t[0],e[1]+=t[1],e[2]+=t[2],e[3]+=t[3],e)},5062:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.floor4Mutate=void 0,t.floor4Mutate=e=>(e[0]=Math.floor(e[0]),e[1]=Math.floor(e[1]),e[2]=Math.floor(e[2]),e[3]=Math.floor(e[3]),e)},8372:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.getImageData=void 0,t.getImageData=e=>{const t=document.createElement("canvas");t.width=e.width,t.height=e.height;const a=t.getContext("2d");if(!a)throw new Error("Could not create canvas to extract image data");return a.clearRect(0,0,t.width,t.height),a.drawImage(e,0,0),a.getImageData(0,0,t.width,t.height)}},8027:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.scale4Mutate=void 0,t.scale4Mutate=(e,t)=>(e[0]*=t,e[1]*=t,e[2]*=t,e[3]*=t,e)}},e=>{e(e.s=4318)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,