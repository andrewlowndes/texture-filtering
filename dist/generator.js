"use strict";(self.webpackChunksampling_coverage=self.webpackChunksampling_coverage||[]).push([[695],{4318:(e,t,a)=>{const o=a(887),r=a(1562),n=a(4669),l=a(8372),c=document.getElementById("game"),i=document.getElementById("chooseimage"),s=document.getElementById("trianglemap"),d=document.getElementById("resolution"),m=document.getElementById("timetaken"),u=c.getContext("2d"),h=()=>{const e=new Image,t=()=>{const t=parseInt(d.value,10),a=l.getImageData(e),i=Date.now(),[h]=((e,t)=>{const a=Math.pow(t,3),l=document.createElement("canvas");l.width=a,l.height=a;const c=l.getContext("2d"),i=c.getImageData(0,0,a,a),s=(e.width-1)/(t-1),d=(e.height-1)/(t-1),m=o.vec2.create(),u=o.vec2.create(),h=o.vec2.create(),g={p1:m,p2:u,p3:h,e1:o.vec2.create(),e2:o.vec2.create(),e3:o.vec2.create(),points:[m,u,h]};let v;for(let t=0,a=0;a<e.width;a+=s){m[0]=Math.floor(a);for(let a=0;a<e.height;a+=d){m[1]=Math.floor(a);for(let a=0;a<e.width;a+=s){u[0]=Math.floor(a);for(let o=0;o<e.height;o+=d){u[1]=Math.floor(o),n.equals(m,u)&&(u[0]=Math.floor(a)+1,u[1]+=1),g.e1=n.sub(u,m);for(let a=0;a<e.width;a+=s){h[0]=Math.floor(a);for(let o=0;o<e.height;o+=d,t+=4)h[1]=Math.floor(o),(n.equals(u,h)||n.equals(m,h))&&(h[0]=Math.floor(a)+2,h[1]+=2),g.e2=n.sub(h,u),g.e3=n.sub(m,h),v=r.getTriangleCoverage(e,g),i.data.set(v,t)}}}}}return c.putImageData(i,0,0),[c,i]})(a,t);m.innerText=Date.now()-i+" ms",s.innerHTML="",s.append(h.canvas),(e=>{u.clearRect(0,0,c.width,c.height),u.putImageData(e,0,0)})(a)};d.onchange=t,e.onload=t,e.src=i.value};i.onchange=h,h()},975:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setPixel=t.getPixel=void 0,t.getPixel=(e,t,a)=>{const o=4*(e.width*Math.floor(a)+Math.floor(t));return e.data.slice(o,o+4)},t.setPixel=(e,t,a,o)=>{e.data.set(o,4*(Math.floor(a)*e.width+Math.floor(t)))}},1562:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.getTriangleCoverage=void 0;const o=a(887),r=a(6558),n=a(6923),l=a(7848),c=a(9078),i=a(6086),s=a(5062),d=a(8027),m=a(975),u=a(4669);t.getTriangleCoverage=(e,t)=>{const a=[0,0,0,0];l.rasterizeTriangle(t.points,{pos:o.vec2.create(),cellSize:o.vec2.fromValues(1,1)},(l=>{const s={min:l,size:o.vec2.fromValues(1,1),max:u.adds(l,1)},h=r.intersectCellTriangle(t,s),g=i.clamp(Number(n.polygonArea(h).toFixed(5)),0,1),v=m.getPixel(e,l[0],l[1]);c.add4Mutate(a,d.scale4Mutate(v,g))}),(t=>{const o=m.getPixel(e,t[0],t[1]);c.add4Mutate(a,o)}));const h=Number(n.polygonArea(t.points).toFixed(5));return d.scale4Mutate(a,1/h),s.floor4Mutate(a)}},6558:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.intersectCellTriangle=void 0;const o=a(4669),r=a(3345);t.intersectCellTriangle=(e,t)=>{const a=[],n=[r.timeAtPos(e.p1[0],e.e1[0],t.min[0]),r.timeAtPos(e.p1[0],e.e1[0],t.max[0]),r.timeAtPos(e.p1[1],e.e1[1],t.min[1]),r.timeAtPos(e.p1[1],e.e1[1],t.max[1])];n.sort(),a.push(...n.map((a=>o.clamp2(o.add(e.p1,o.scale(e.e1,a)),t.min,t.max))));const l=[r.timeAtPos(e.p2[0],e.e2[0],t.min[0]),r.timeAtPos(e.p2[0],e.e2[0],t.max[0]),r.timeAtPos(e.p2[1],e.e2[1],t.min[1]),r.timeAtPos(e.p2[1],e.e2[1],t.max[1])];l.sort(),a.push(...l.map((a=>o.clamp2(o.add(e.p2,o.scale(e.e2,a)),t.min,t.max))));const c=[r.timeAtPos(e.p3[0],e.e3[0],t.min[0]),r.timeAtPos(e.p3[0],e.e3[0],t.max[0]),r.timeAtPos(e.p3[1],e.e3[1],t.min[1]),r.timeAtPos(e.p3[1],e.e3[1],t.max[1])];return c.sort(),a.push(...c.map((a=>o.clamp2(o.add(e.p3,o.scale(e.e3,a)),t.min,t.max)))),a}},6923:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.polygonArea=t.polygonAreaSigned=void 0;const o=a(4669);t.polygonAreaSigned=e=>{if(!e.length)return 0;const t=e.length-1;let a=0;for(let r=0;r<t;r++)a+=o.determinant2(e[r],e[r+1]);return a+=o.determinant2(e[t],e[0]),a/2},t.polygonArea=e=>Math.abs(t.polygonAreaSigned(e))},3345:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.lerp=t.timeAtPos=t.clamp=t.fract=t.negFract=t.EPSILON=void 0,t.EPSILON=1e-6,t.negFract=e=>1-e+Math.floor(e),t.fract=e=>e-Math.floor(e),t.clamp=(e,t,a)=>Math.max(Math.min(e,a),t),t.timeAtPos=(e,a,o)=>a?t.clamp((o-e)/a,0,1):0,t.lerp=(e,t,a)=>e*(1-a)+t*a},4669:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.inRange=t.avg=t.max2=t.min2=t.toPrecision2=t.lerp2=t.normalize=t.length=t.dot=t.sign=t.abs=t.ceil=t.floor=t.sub=t.adds=t.add=t.divide=t.multiply=t.scale=t.equals=t.determinant2=t.clamp2=void 0;const o=a(887);t.clamp2=(e,t,a)=>{const r=o.vec2.clone(e);return o.vec2.min(r,r,a),o.vec2.max(r,r,t),r},t.determinant2=(e,t)=>e[0]*t[1]-e[1]*t[0],t.equals=o.vec2.equals,t.scale=(e,t)=>o.vec2.scale(o.vec2.create(),e,t),t.multiply=(e,t)=>o.vec2.multiply(o.vec2.create(),e,t),t.divide=(e,t)=>o.vec2.divide(o.vec2.create(),e,t),t.add=(e,t)=>o.vec2.add(o.vec2.create(),e,t),t.adds=(e,t)=>o.vec2.fromValues(e[0]+t,e[1]+t),t.sub=(e,t)=>o.vec2.sub(o.vec2.create(),e,t),t.floor=e=>o.vec2.floor(o.vec2.create(),e),t.ceil=e=>o.vec2.ceil(o.vec2.create(),e),t.abs=e=>o.vec2.fromValues(Math.abs(e[0]),Math.abs(e[1])),t.sign=e=>o.vec2.fromValues(Math.sign(e[0]),Math.sign(e[1])),t.dot=(e,t)=>o.vec2.dot(e,t),t.length=e=>o.vec2.length(e),t.normalize=e=>t.scale(e,1/t.length(e)),t.lerp2=(e,t,a)=>o.vec2.lerp(o.vec2.create(),e,t,a),t.toPrecision2=(e,t)=>(e[0]=parseFloat(e[0].toPrecision(t)),e[1]=parseFloat(e[1].toPrecision(t)),e),t.min2=(...e)=>{const[t,...a]=e,r=o.vec2.clone(t);return a.forEach((e=>{o.vec2.min(r,r,e)})),r},t.max2=(...e)=>{const[t,...a]=e,r=o.vec2.clone(t);return a.forEach((e=>{o.vec2.max(r,r,e)})),r},t.avg=(...e)=>{const t=o.vec2.create();return e.length&&(e.forEach((e=>{o.vec2.add(t,t,e)})),o.vec2.scale(t,t,1/e.length)),t},t.inRange=(e,t,a)=>!(e[0]>a[0]||e[0]<t[0]||e[1]>a[1]||e[1]<t[1])},7848:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.rasterizeTriangle=void 0;const o=a(887),r=a(2264);t.rasterizeTriangle=(e,t,a,n)=>{const l=[{from:e[0],to:e[1]},{from:e[1],to:e[2]},{from:e[2],to:e[0]}],c={},i=new Set;l.forEach((e=>{r.traverse(e.from,e.to,t,(e=>{let t=c[e[1]];const o=e[0]+","+e[1];i.has(o)||(t?(t.min=Math.min(t.min,e[0]),t.max=Math.max(t.max,e[0])):t={min:e[0],max:e[0]},c[e[1]]=t,a(e),i.add(o))}))}));const s=o.vec2.create();for(let e in c)if(c.hasOwnProperty(e)){s[1]=parseInt(e,10);const t=c[e];for(s[0]=t.min+1;s[0]<t.max;s[0]++)i.has(s[0]+","+s[1])||n(s)}return c}},2264:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.traverse=void 0;const o=a(887),r=a(3345),n=a(4669);t.traverse=(e,t,a,l)=>{const c=n.sub(e,a.pos),i=n.sub(t,e),s=n.floor(n.divide(c,a.cellSize)),d=n.floor(n.divide(n.sub(t,a.pos),a.cellSize));if(Math.abs(i[1])<r.EPSILON){for(let e=Math.min(s[0],d[0]),t=Math.max(s[0],d[0]);e<=t;e++)if(s[0]=e,!1===l(s))return!1;return}if(Math.abs(i[0])<r.EPSILON){for(let e=Math.min(s[1],d[1]),t=Math.max(s[1],d[1]);e<=t;e++)if(s[1]=e,!1===l(s))return!1;return}const m=n.sign(i),u=n.multiply(n.divide(m,i),a.cellSize),h=n.divide(c,a.cellSize),g=o.vec2.fromValues(m[0]>0?u[0]*r.negFract(h[0]):u[0]*r.fract(h[0]),m[1]>0?u[1]*r.negFract(h[1]):u[1]*r.fract(h[1]));for(;;){if(!1===l(s))return!1;if(g[0]>1&&g[1]>1)return;g[0]<g[1]?(s[0]+=m[0],g[0]+=u[0]):(s[1]+=m[1],g[1]+=u[1])}}},9078:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.add4Mutate=void 0,t.add4Mutate=(e,t)=>(e[0]+=t[0],e[1]+=t[1],e[2]+=t[2],e[3]+=t[3],e)},6086:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.clamp=void 0,t.clamp=(e,t,a)=>Math.max(Math.min(e,a),t)},5062:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.floor4Mutate=void 0,t.floor4Mutate=e=>(e[0]=Math.floor(e[0]),e[1]=Math.floor(e[1]),e[2]=Math.floor(e[2]),e[3]=Math.floor(e[3]),e)},8372:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.getImageData=void 0,t.getImageData=e=>{const t=document.createElement("canvas");t.width=e.width,t.height=e.height;const a=t.getContext("2d");if(!a)throw new Error("Could not create canvas to extract image data");return a.clearRect(0,0,t.width,t.height),a.drawImage(e,0,0),a.getImageData(0,0,t.width,t.height)}},8027:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.scale4Mutate=void 0,t.scale4Mutate=(e,t)=>(e[0]*=t,e[1]*=t,e[2]*=t,e[3]*=t,e)}},e=>{e(e.s=4318)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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Z0ssRUFBZ0JELEVBQVluTCxXQUFXLE1BQzdDLElBQUtvTCxFQUNELE1BQU0sSUFBSUMsTUFBTSxpREFJcEIsT0FGQUQsRUFBYzlILFVBQVUsRUFBRyxFQUFHNkgsRUFBWWhLLE1BQU9nSyxFQUFZL0osUUFDN0RnSyxFQUFjN0gsVUFBVXJELEVBQU8sRUFBRyxHQUMzQmtMLEVBQWMzSyxhQUFhLEVBQUcsRUFBRzBLLEVBQVloSyxNQUFPZ0ssRUFBWS9KLFUsYUNaM0V1QyxPQUFPQyxlQUFlQyxFQUFTLGFBQWMsQ0FBRXRELE9BQU8sSUFDdERzRCxFQUFRb0Msa0JBQWUsRUFRdkJwQyxFQUFRb0MsYUFQYSxDQUFDMkIsRUFBRzBELEtBQ3JCMUQsRUFBRSxJQUFNMEQsRUFDUjFELEVBQUUsSUFBTTBELEVBQ1IxRCxFQUFFLElBQU0wRCxFQUNSMUQsRUFBRSxJQUFNMEQsRUFDRDFELEsiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zYW1wbGluZy1jb3ZlcmFnZS8uL3NyYy9kZW1vcy9nZW5lcmF0b3IudHMiLCJ3ZWJwYWNrOi8vc2FtcGxpbmctY292ZXJhZ2UvLi9zcmMvZHJhdy9jYW52YXMudHMiLCJ3ZWJwYWNrOi8vc2FtcGxpbmctY292ZXJhZ2UvLi9zcmMvZHJhdy9nZXRUcmlhbmdsZUNvdmVyYWdlLnRzIiwid2VicGFjazovL3NhbXBsaW5nLWNvdmVyYWdlLy4vc3JjL2dlb21ldHJ5L2ludGVyc2VjdENlbGxUcmlhbmdsZS50cyIsIndlYnBhY2s6Ly9zYW1wbGluZy1jb3ZlcmFnZS8uL3NyYy9nZW9tZXRyeS9wb2x5Z29uQXJlYS50cyIsIndlYnBhY2s6Ly9zYW1wbGluZy1jb3ZlcmFnZS8uL3NyYy9tYXRocy9jb21tb24udHMiLCJ3ZWJwYWNrOi8vc2FtcGxpbmctY292ZXJhZ2UvLi9zcmMvbWF0aHMvcG9pbnQudHMiLCJ3ZWJwYWNrOi8vc2FtcGxpbmctY292ZXJhZ2UvLi9zcmMvcmVuZGVyL3Jhc3Rlcml6ZVRyaWFuZ2xlLnRzIiwid2VicGFjazovL3NhbXBsaW5nLWNvdmVyYWdlLy4vc3JjL3JlbmRlci90cmF2ZXJzZS50cyIsIndlYnBhY2s6Ly9zYW1wbGluZy1jb3ZlcmFnZS8uL3NyYy91dGlscy9hZGQ0TXV0YXRlLnRzIiwid2VicGFjazovL3NhbXBsaW5nLWNvdmVyYWdlLy4vc3JjL3V0aWxzL2NsYW1wLnRzIiwid2VicGFjazovL3NhbXBsaW5nLWNvdmVyYWdlLy4vc3JjL3V0aWxzL2Zsb29yNE11dGF0ZS50cyIsIndlYnBhY2s6Ly9zYW1wbGluZy1jb3ZlcmFnZS8uL3NyYy91dGlscy9nZXRJbWFnZURhdGEudHMiLCJ3ZWJwYWNrOi8vc2FtcGxpbmctY292ZXJhZ2UvLi9zcmMvdXRpbHMvc2NhbGU0TXV0YXRlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IGdsX21hdHJpeF8xID0gcmVxdWlyZShcImdsLW1hdHJpeFwiKTtcclxuY29uc3QgZ2V0VHJpYW5nbGVDb3ZlcmFnZV8xID0gcmVxdWlyZShcIi4uL2RyYXcvZ2V0VHJpYW5nbGVDb3ZlcmFnZVwiKTtcclxuY29uc3QgcG9pbnRfMSA9IHJlcXVpcmUoXCIuLi9tYXRocy9wb2ludFwiKTtcclxuY29uc3QgZ2V0SW1hZ2VEYXRhXzEgPSByZXF1aXJlKFwiLi4vdXRpbHMvZ2V0SW1hZ2VEYXRhXCIpO1xyXG5jb25zdCBnYW1lID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJnYW1lXCIpO1xyXG5jb25zdCBpbWFnZUlucHV0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjaG9vc2VpbWFnZVwiKTtcclxuY29uc3QgdHJpYW5nbGVtYXAgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInRyaWFuZ2xlbWFwXCIpO1xyXG5jb25zdCByZXNvbHV0aW9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJyZXNvbHV0aW9uXCIpO1xyXG5jb25zdCB0aW1ldGFrZW4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInRpbWV0YWtlblwiKTtcclxuY29uc3QgZyA9IGdhbWUuZ2V0Q29udGV4dChcIjJkXCIpO1xyXG5jb25zdCBkcmF3SW1hZ2UgPSAoaW1hZ2VEYXRhKSA9PiB7XHJcbiAgICBnLmNsZWFyUmVjdCgwLCAwLCBnYW1lLndpZHRoLCBnYW1lLmhlaWdodCk7XHJcbiAgICBnLnB1dEltYWdlRGF0YShpbWFnZURhdGEsIDAsIDApO1xyXG59O1xyXG4vL3RoaXMgaXMgcHJldHR5IGludGVuc2l2ZSBhbmQgbmVlZHMgdG8gYmUgb2ZmbG9hZGVkIHRvIGFuIG9wdGltaXNlZCBwcm9ncmFtXHJcbmNvbnN0IGNyZWF0ZVRyaWFuZ2xlRml0dGluZ01hcCA9IChpbWFnZURhdGEsIG51bUl0ZXJhdGlvbnMpID0+IHtcclxuICAgIC8vZ2VuZXJhdGUgYSBtYXAgb2YgdGhlIHRyaWFuZ2xlcyA2IGVsZW1lbnRzICgzIHBvaW50cyBvZiB4LCB5KSB3aXRoaW4gMTYgcG9zc2libGUgdmFsdWVzIGFsb25nIHRoZSBpbWFnZVxyXG4gICAgY29uc3QgdGV4dHVyZVNpemUgPSBNYXRoLnBvdyhudW1JdGVyYXRpb25zLCAzKTtcclxuICAgIGNvbnN0IHNhbXBsZUNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xyXG4gICAgc2FtcGxlQ2FudmFzLndpZHRoID0gdGV4dHVyZVNpemU7XHJcbiAgICBzYW1wbGVDYW52YXMuaGVpZ2h0ID0gdGV4dHVyZVNpemU7XHJcbiAgICBjb25zdCBzYW1wbGVHcmFwaGljcyA9IHNhbXBsZUNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xyXG4gICAgY29uc3Qgc2FtcGxlRGF0YSA9IHNhbXBsZUdyYXBoaWNzLmdldEltYWdlRGF0YSgwLCAwLCB0ZXh0dXJlU2l6ZSwgdGV4dHVyZVNpemUpO1xyXG4gICAgLy93ZSBmb3JjZSBzYW1wbGVzIG9uIHRoZSBleHRyZW1lcyBvZiB0aGUgZGltZW5zaW9uc1xyXG4gICAgY29uc3QgeFN0ZXAgPSAoaW1hZ2VEYXRhLndpZHRoIC0gMSkgLyAobnVtSXRlcmF0aW9ucyAtIDEpO1xyXG4gICAgY29uc3QgeVN0ZXAgPSAoaW1hZ2VEYXRhLmhlaWdodCAtIDEpIC8gKG51bUl0ZXJhdGlvbnMgLSAxKTtcclxuICAgIGNvbnN0IHAxID0gZ2xfbWF0cml4XzEudmVjMi5jcmVhdGUoKTtcclxuICAgIGNvbnN0IHAyID0gZ2xfbWF0cml4XzEudmVjMi5jcmVhdGUoKTtcclxuICAgIGNvbnN0IHAzID0gZ2xfbWF0cml4XzEudmVjMi5jcmVhdGUoKTtcclxuICAgIGNvbnN0IHRyaWFuZ2xlID0ge1xyXG4gICAgICAgIHAxLFxyXG4gICAgICAgIHAyLFxyXG4gICAgICAgIHAzLFxyXG4gICAgICAgIGUxOiBnbF9tYXRyaXhfMS52ZWMyLmNyZWF0ZSgpLFxyXG4gICAgICAgIGUyOiBnbF9tYXRyaXhfMS52ZWMyLmNyZWF0ZSgpLFxyXG4gICAgICAgIGUzOiBnbF9tYXRyaXhfMS52ZWMyLmNyZWF0ZSgpLFxyXG4gICAgICAgIHBvaW50czogW3AxLCBwMiwgcDNdXHJcbiAgICB9O1xyXG4gICAgLy9jb3ZlciBhbGwgcG9zc2liaWxpdGllcyBmb3IgYWxsIDYgY29vcmRpbmF0ZXMgb2YgdGhlIHRyaWFuZ2xlXHJcbiAgICBjb25zdCBqaXR0ZXJBbW91bnQgPSAxO1xyXG4gICAgY29uc3Qgaml0dGVyQW1vdW50MiA9IDI7XHJcbiAgICBsZXQgY29sb3VyO1xyXG4gICAgZm9yIChsZXQgaSA9IDAsIHgxID0gMDsgeDEgPCBpbWFnZURhdGEud2lkdGg7IHgxICs9IHhTdGVwKSB7XHJcbiAgICAgICAgcDFbMF0gPSBNYXRoLmZsb29yKHgxKTtcclxuICAgICAgICBmb3IgKGxldCB5MSA9IDA7IHkxIDwgaW1hZ2VEYXRhLmhlaWdodDsgeTEgKz0geVN0ZXApIHtcclxuICAgICAgICAgICAgcDFbMV0gPSBNYXRoLmZsb29yKHkxKTtcclxuICAgICAgICAgICAgZm9yIChsZXQgeDIgPSAwOyB4MiA8IGltYWdlRGF0YS53aWR0aDsgeDIgKz0geFN0ZXApIHtcclxuICAgICAgICAgICAgICAgIHAyWzBdID0gTWF0aC5mbG9vcih4Mik7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCB5MiA9IDA7IHkyIDwgaW1hZ2VEYXRhLmhlaWdodDsgeTIgKz0geVN0ZXApIHtcclxuICAgICAgICAgICAgICAgICAgICBwMlsxXSA9IE1hdGguZmxvb3IoeTIpO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vY29udmVydCBkZWdlbmVyYXRlIHRyaWFuZ2xlcyB0byB2YWxpZCB0cmlhbmdsZXMgYnkgb2Zmc2V0dGluZyB0aGUgY29vcmRzIHNsaWdodGx5XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBvaW50XzEuZXF1YWxzKHAxLCBwMikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcDJbMF0gPSBNYXRoLmZsb29yKHgyKSArIGppdHRlckFtb3VudDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcDJbMV0gKz0gaml0dGVyQW1vdW50O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB0cmlhbmdsZS5lMSA9IHBvaW50XzEuc3ViKHAyLCBwMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgeDMgPSAwOyB4MyA8IGltYWdlRGF0YS53aWR0aDsgeDMgKz0geFN0ZXApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcDNbMF0gPSBNYXRoLmZsb29yKHgzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgeTMgPSAwOyB5MyA8IGltYWdlRGF0YS5oZWlnaHQ7IHkzICs9IHlTdGVwLCBpICs9IDQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHAzWzFdID0gTWF0aC5mbG9vcih5Myk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2NvbnZlcnQgZGVnZW5lcmF0ZSB0cmlhbmdsZXMgdG8gdmFsaWQgdHJpYW5nbGVzIGJ5IG9mZnNldHRpbmcgdGhlIGNvb3JkcyBzbGlnaHRseVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBvaW50XzEuZXF1YWxzKHAyLCBwMykgfHwgcG9pbnRfMS5lcXVhbHMocDEsIHAzKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHAzWzBdID0gTWF0aC5mbG9vcih4MykgKyBqaXR0ZXJBbW91bnQyO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHAzWzFdICs9IGppdHRlckFtb3VudDI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmlhbmdsZS5lMiA9IHBvaW50XzEuc3ViKHAzLCBwMik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmlhbmdsZS5lMyA9IHBvaW50XzEuc3ViKHAxLCBwMyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvdXIgPSBnZXRUcmlhbmdsZUNvdmVyYWdlXzEuZ2V0VHJpYW5nbGVDb3ZlcmFnZShpbWFnZURhdGEsIHRyaWFuZ2xlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNhbXBsZURhdGEuZGF0YS5zZXQoY29sb3VyLCBpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHNhbXBsZUdyYXBoaWNzLnB1dEltYWdlRGF0YShzYW1wbGVEYXRhLCAwLCAwKTtcclxuICAgIHJldHVybiBbc2FtcGxlR3JhcGhpY3MsIHNhbXBsZURhdGFdO1xyXG59O1xyXG5jb25zdCBzdGFydCA9ICgpID0+IHtcclxuICAgIGNvbnN0IGltYWdlID0gbmV3IEltYWdlKCk7XHJcbiAgICBjb25zdCBjcmVhdGVNYXAgPSAoKSA9PiB7XHJcbiAgICAgICAgY29uc3QgbnVtSXRlcmF0aW9ucyA9IHBhcnNlSW50KHJlc29sdXRpb24udmFsdWUsIDEwKTtcclxuICAgICAgICBjb25zdCBpbWFnZURhdGEgPSBnZXRJbWFnZURhdGFfMS5nZXRJbWFnZURhdGEoaW1hZ2UpO1xyXG4gICAgICAgIC8vb3V0cHV0IHRoZSBnZW5lcmF0ZWQgbWFwIHNvIHdlIGNhbiBzYXZlIGl0IGFuZCBzZWUgd2hhdCB0aGUgY2FjaGUgbG9va3MgbGlrZVxyXG4gICAgICAgIGNvbnN0IHN0YXJ0VGltZSA9IERhdGUubm93KCk7XHJcbiAgICAgICAgY29uc3QgW3NhbXBsZUdyYXBoaWNzXSA9IGNyZWF0ZVRyaWFuZ2xlRml0dGluZ01hcChpbWFnZURhdGEsIG51bUl0ZXJhdGlvbnMpO1xyXG4gICAgICAgIHRpbWV0YWtlbi5pbm5lclRleHQgPSBgJHsoRGF0ZS5ub3coKSAtIHN0YXJ0VGltZSl9IG1zYDtcclxuICAgICAgICB0cmlhbmdsZW1hcC5pbm5lckhUTUwgPSAnJztcclxuICAgICAgICB0cmlhbmdsZW1hcC5hcHBlbmQoc2FtcGxlR3JhcGhpY3MuY2FudmFzKTtcclxuICAgICAgICBkcmF3SW1hZ2UoaW1hZ2VEYXRhKTtcclxuICAgIH07XHJcbiAgICByZXNvbHV0aW9uLm9uY2hhbmdlID0gY3JlYXRlTWFwO1xyXG4gICAgaW1hZ2Uub25sb2FkID0gY3JlYXRlTWFwO1xyXG4gICAgaW1hZ2Uuc3JjID0gaW1hZ2VJbnB1dC52YWx1ZTtcclxufTtcclxuaW1hZ2VJbnB1dC5vbmNoYW5nZSA9IHN0YXJ0O1xyXG5zdGFydCgpO1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLnNldFBpeGVsID0gZXhwb3J0cy5nZXRQaXhlbCA9IHZvaWQgMDtcclxuY29uc3QgZ2V0UGl4ZWwgPSAoaW1hZ2VEYXRhLCB4LCB5KSA9PiB7XHJcbiAgICBjb25zdCBzYW1wbGVJbmRleCA9IChpbWFnZURhdGEud2lkdGggKiBNYXRoLmZsb29yKHkpICsgTWF0aC5mbG9vcih4KSkgKiA0O1xyXG4gICAgcmV0dXJuIGltYWdlRGF0YS5kYXRhLnNsaWNlKHNhbXBsZUluZGV4LCBzYW1wbGVJbmRleCArIDQpO1xyXG59O1xyXG5leHBvcnRzLmdldFBpeGVsID0gZ2V0UGl4ZWw7XHJcbmNvbnN0IHNldFBpeGVsID0gKGltYWdlRGF0YSwgeCwgeSwgcmdiYSkgPT4ge1xyXG4gICAgaW1hZ2VEYXRhLmRhdGEuc2V0KHJnYmEsIChNYXRoLmZsb29yKHkpICogaW1hZ2VEYXRhLndpZHRoICsgTWF0aC5mbG9vcih4KSkgKiA0KTtcclxufTtcclxuZXhwb3J0cy5zZXRQaXhlbCA9IHNldFBpeGVsO1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLmdldFRyaWFuZ2xlQ292ZXJhZ2UgPSB2b2lkIDA7XHJcbmNvbnN0IGdsX21hdHJpeF8xID0gcmVxdWlyZShcImdsLW1hdHJpeFwiKTtcclxuY29uc3QgaW50ZXJzZWN0Q2VsbFRyaWFuZ2xlXzEgPSByZXF1aXJlKFwiLi4vZ2VvbWV0cnkvaW50ZXJzZWN0Q2VsbFRyaWFuZ2xlXCIpO1xyXG5jb25zdCBwb2x5Z29uQXJlYV8xID0gcmVxdWlyZShcIi4uL2dlb21ldHJ5L3BvbHlnb25BcmVhXCIpO1xyXG5jb25zdCByYXN0ZXJpemVUcmlhbmdsZV8xID0gcmVxdWlyZShcIi4uL3JlbmRlci9yYXN0ZXJpemVUcmlhbmdsZVwiKTtcclxuY29uc3QgYWRkNE11dGF0ZV8xID0gcmVxdWlyZShcIi4uL3V0aWxzL2FkZDRNdXRhdGVcIik7XHJcbmNvbnN0IGNsYW1wXzEgPSByZXF1aXJlKFwiLi4vdXRpbHMvY2xhbXBcIik7XHJcbmNvbnN0IGZsb29yNE11dGF0ZV8xID0gcmVxdWlyZShcIi4uL3V0aWxzL2Zsb29yNE11dGF0ZVwiKTtcclxuY29uc3Qgc2NhbGU0TXV0YXRlXzEgPSByZXF1aXJlKFwiLi4vdXRpbHMvc2NhbGU0TXV0YXRlXCIpO1xyXG5jb25zdCBjYW52YXNfMSA9IHJlcXVpcmUoXCIuL2NhbnZhc1wiKTtcclxuY29uc3QgcG9pbnRfMSA9IHJlcXVpcmUoXCIuLi9tYXRocy9wb2ludFwiKTtcclxuY29uc3QgZ2V0VHJpYW5nbGVDb3ZlcmFnZSA9IChpbWFnZURhdGEsIHRyaWFuZ2xlKSA9PiB7XHJcbiAgICAvL3Bsb3QgYSB0cmlhbmdsZSBvdXRsaW5lIG9uIHRvcCBvZiB0aGUgaW1hZ2VcclxuICAgIGNvbnN0IHRyaWFuZ2xlQ29sb3VyID0gWzAsIDAsIDAsIDBdO1xyXG4gICAgcmFzdGVyaXplVHJpYW5nbGVfMS5yYXN0ZXJpemVUcmlhbmdsZSh0cmlhbmdsZS5wb2ludHMsIHtcclxuICAgICAgICBwb3M6IGdsX21hdHJpeF8xLnZlYzIuY3JlYXRlKCksXHJcbiAgICAgICAgY2VsbFNpemU6IGdsX21hdHJpeF8xLnZlYzIuZnJvbVZhbHVlcygxLCAxKVxyXG4gICAgfSwgKGJvdW5kYXJ5Q2VsbCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGNlbGxCb3VuZHMgPSB7XHJcbiAgICAgICAgICAgIG1pbjogYm91bmRhcnlDZWxsLFxyXG4gICAgICAgICAgICBzaXplOiBnbF9tYXRyaXhfMS52ZWMyLmZyb21WYWx1ZXMoMSwgMSksXHJcbiAgICAgICAgICAgIG1heDogcG9pbnRfMS5hZGRzKGJvdW5kYXJ5Q2VsbCwgMSlcclxuICAgICAgICB9O1xyXG4gICAgICAgIGNvbnN0IGNlbGxGaWxsUG9seWdvbiA9IGludGVyc2VjdENlbGxUcmlhbmdsZV8xLmludGVyc2VjdENlbGxUcmlhbmdsZSh0cmlhbmdsZSwgY2VsbEJvdW5kcyk7XHJcbiAgICAgICAgY29uc3QgYXJlYUNvdmVyYWdlID0gY2xhbXBfMS5jbGFtcChOdW1iZXIocG9seWdvbkFyZWFfMS5wb2x5Z29uQXJlYShjZWxsRmlsbFBvbHlnb24pLnRvRml4ZWQoNSkpLCAwLCAxKTtcclxuICAgICAgICBjb25zdCBwaXhlbCA9IGNhbnZhc18xLmdldFBpeGVsKGltYWdlRGF0YSwgYm91bmRhcnlDZWxsWzBdLCBib3VuZGFyeUNlbGxbMV0pO1xyXG4gICAgICAgIGFkZDRNdXRhdGVfMS5hZGQ0TXV0YXRlKHRyaWFuZ2xlQ29sb3VyLCBzY2FsZTRNdXRhdGVfMS5zY2FsZTRNdXRhdGUocGl4ZWwsIGFyZWFDb3ZlcmFnZSkpO1xyXG4gICAgfSwgKHNvbGlkQ2VsbCkgPT4ge1xyXG4gICAgICAgIC8vdGhpcyBjYW4gYmUgYWNjZWxlcmF0ZWQgYnkgdXNpbmcgYSBzdW1tZWQgdGV4dHVyZSB0aGF0IG9wZXJhdGVzIGluIG9uZSBkaW1lbnNpb24gc28gd2UgY2FuIHByb2Nlc3MgZW50aXJlIHNjYW5saW5lc1xyXG4gICAgICAgIGNvbnN0IHBpeGVsID0gY2FudmFzXzEuZ2V0UGl4ZWwoaW1hZ2VEYXRhLCBzb2xpZENlbGxbMF0sIHNvbGlkQ2VsbFsxXSk7XHJcbiAgICAgICAgYWRkNE11dGF0ZV8xLmFkZDRNdXRhdGUodHJpYW5nbGVDb2xvdXIsIHBpeGVsKTtcclxuICAgIH0pO1xyXG4gICAgLy9maWxsIHRoZSB0cmlhbmdsZSB3aXRoIHRoZSBjb21wdXRlZCBhdmVyYWdlIHZhbHVlXHJcbiAgICBjb25zdCB0cmlhbmdsZUNvdmVyYWdlID0gTnVtYmVyKHBvbHlnb25BcmVhXzEucG9seWdvbkFyZWEodHJpYW5nbGUucG9pbnRzKS50b0ZpeGVkKDUpKTtcclxuICAgIHNjYWxlNE11dGF0ZV8xLnNjYWxlNE11dGF0ZSh0cmlhbmdsZUNvbG91ciwgMSAvIHRyaWFuZ2xlQ292ZXJhZ2UpO1xyXG4gICAgcmV0dXJuIGZsb29yNE11dGF0ZV8xLmZsb29yNE11dGF0ZSh0cmlhbmdsZUNvbG91cik7XHJcbn07XHJcbmV4cG9ydHMuZ2V0VHJpYW5nbGVDb3ZlcmFnZSA9IGdldFRyaWFuZ2xlQ292ZXJhZ2U7XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuaW50ZXJzZWN0Q2VsbFRyaWFuZ2xlID0gdm9pZCAwO1xyXG5jb25zdCBwb2ludF8xID0gcmVxdWlyZShcIi4uL21hdGhzL3BvaW50XCIpO1xyXG5jb25zdCBjb21tb25fMSA9IHJlcXVpcmUoXCIuLi9tYXRocy9jb21tb25cIik7XHJcbmNvbnN0IGludGVyc2VjdENlbGxUcmlhbmdsZSA9ICh0cmlhbmdsZSwgY2VsbCkgPT4ge1xyXG4gICAgLy9icmFuY2gtbGVzcyBjcmVhdGlvbiBvZiB0aGUgaW50ZXJzZWN0ZWQgcG9pbnRzIG9mIHRoZSB0cmlhbmdsZSB3aXRoaW4gdGhlIHBpeGVsXHJcbiAgICBjb25zdCBwb2ludHMgPSBbXTtcclxuICAgIGNvbnN0IHQxcyA9IFtcclxuICAgICAgICBjb21tb25fMS50aW1lQXRQb3ModHJpYW5nbGUucDFbMF0sIHRyaWFuZ2xlLmUxWzBdLCBjZWxsLm1pblswXSksXHJcbiAgICAgICAgY29tbW9uXzEudGltZUF0UG9zKHRyaWFuZ2xlLnAxWzBdLCB0cmlhbmdsZS5lMVswXSwgY2VsbC5tYXhbMF0pLFxyXG4gICAgICAgIGNvbW1vbl8xLnRpbWVBdFBvcyh0cmlhbmdsZS5wMVsxXSwgdHJpYW5nbGUuZTFbMV0sIGNlbGwubWluWzFdKSxcclxuICAgICAgICBjb21tb25fMS50aW1lQXRQb3ModHJpYW5nbGUucDFbMV0sIHRyaWFuZ2xlLmUxWzFdLCBjZWxsLm1heFsxXSlcclxuICAgIF07XHJcbiAgICB0MXMuc29ydCgpO1xyXG4gICAgcG9pbnRzLnB1c2goLi4udDFzLm1hcCh0ID0+IHBvaW50XzEuY2xhbXAyKHBvaW50XzEuYWRkKHRyaWFuZ2xlLnAxLCBwb2ludF8xLnNjYWxlKHRyaWFuZ2xlLmUxLCB0KSksIGNlbGwubWluLCBjZWxsLm1heCkpKTtcclxuICAgIGNvbnN0IHQycyA9IFtcclxuICAgICAgICBjb21tb25fMS50aW1lQXRQb3ModHJpYW5nbGUucDJbMF0sIHRyaWFuZ2xlLmUyWzBdLCBjZWxsLm1pblswXSksXHJcbiAgICAgICAgY29tbW9uXzEudGltZUF0UG9zKHRyaWFuZ2xlLnAyWzBdLCB0cmlhbmdsZS5lMlswXSwgY2VsbC5tYXhbMF0pLFxyXG4gICAgICAgIGNvbW1vbl8xLnRpbWVBdFBvcyh0cmlhbmdsZS5wMlsxXSwgdHJpYW5nbGUuZTJbMV0sIGNlbGwubWluWzFdKSxcclxuICAgICAgICBjb21tb25fMS50aW1lQXRQb3ModHJpYW5nbGUucDJbMV0sIHRyaWFuZ2xlLmUyWzFdLCBjZWxsLm1heFsxXSlcclxuICAgIF07XHJcbiAgICB0MnMuc29ydCgpO1xyXG4gICAgcG9pbnRzLnB1c2goLi4udDJzLm1hcCh0ID0+IHBvaW50XzEuY2xhbXAyKHBvaW50XzEuYWRkKHRyaWFuZ2xlLnAyLCBwb2ludF8xLnNjYWxlKHRyaWFuZ2xlLmUyLCB0KSksIGNlbGwubWluLCBjZWxsLm1heCkpKTtcclxuICAgIGNvbnN0IHQzcyA9IFtcclxuICAgICAgICBjb21tb25fMS50aW1lQXRQb3ModHJpYW5nbGUucDNbMF0sIHRyaWFuZ2xlLmUzWzBdLCBjZWxsLm1pblswXSksXHJcbiAgICAgICAgY29tbW9uXzEudGltZUF0UG9zKHRyaWFuZ2xlLnAzWzBdLCB0cmlhbmdsZS5lM1swXSwgY2VsbC5tYXhbMF0pLFxyXG4gICAgICAgIGNvbW1vbl8xLnRpbWVBdFBvcyh0cmlhbmdsZS5wM1sxXSwgdHJpYW5nbGUuZTNbMV0sIGNlbGwubWluWzFdKSxcclxuICAgICAgICBjb21tb25fMS50aW1lQXRQb3ModHJpYW5nbGUucDNbMV0sIHRyaWFuZ2xlLmUzWzFdLCBjZWxsLm1heFsxXSlcclxuICAgIF07XHJcbiAgICB0M3Muc29ydCgpO1xyXG4gICAgcG9pbnRzLnB1c2goLi4udDNzLm1hcCh0ID0+IHBvaW50XzEuY2xhbXAyKHBvaW50XzEuYWRkKHRyaWFuZ2xlLnAzLCBwb2ludF8xLnNjYWxlKHRyaWFuZ2xlLmUzLCB0KSksIGNlbGwubWluLCBjZWxsLm1heCkpKTtcclxuICAgIHJldHVybiBwb2ludHM7XHJcbn07XHJcbmV4cG9ydHMuaW50ZXJzZWN0Q2VsbFRyaWFuZ2xlID0gaW50ZXJzZWN0Q2VsbFRyaWFuZ2xlO1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLnBvbHlnb25BcmVhID0gZXhwb3J0cy5wb2x5Z29uQXJlYVNpZ25lZCA9IHZvaWQgMDtcclxuY29uc3QgcG9pbnRfMSA9IHJlcXVpcmUoXCIuLi9tYXRocy9wb2ludFwiKTtcclxuY29uc3QgcG9seWdvbkFyZWFTaWduZWQgPSAocG9pbnRzKSA9PiB7XHJcbiAgICBpZiAoIXBvaW50cy5sZW5ndGgpIHtcclxuICAgICAgICByZXR1cm4gMDtcclxuICAgIH1cclxuICAgIGNvbnN0IGxhc3RJbmRleCA9IHBvaW50cy5sZW5ndGggLSAxO1xyXG4gICAgbGV0IGFyZWEgPSAwO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsYXN0SW5kZXg7IGkrKykge1xyXG4gICAgICAgIGFyZWEgKz0gcG9pbnRfMS5kZXRlcm1pbmFudDIocG9pbnRzW2ldLCBwb2ludHNbaSArIDFdKTtcclxuICAgIH1cclxuICAgIGFyZWEgKz0gcG9pbnRfMS5kZXRlcm1pbmFudDIocG9pbnRzW2xhc3RJbmRleF0sIHBvaW50c1swXSk7XHJcbiAgICByZXR1cm4gYXJlYSAvIDI7XHJcbn07XHJcbmV4cG9ydHMucG9seWdvbkFyZWFTaWduZWQgPSBwb2x5Z29uQXJlYVNpZ25lZDtcclxuY29uc3QgcG9seWdvbkFyZWEgPSAocG9pbnRzKSA9PiB7XHJcbiAgICByZXR1cm4gTWF0aC5hYnMoZXhwb3J0cy5wb2x5Z29uQXJlYVNpZ25lZChwb2ludHMpKTtcclxufTtcclxuZXhwb3J0cy5wb2x5Z29uQXJlYSA9IHBvbHlnb25BcmVhO1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLmxlcnAgPSBleHBvcnRzLnRpbWVBdFBvcyA9IGV4cG9ydHMuY2xhbXAgPSBleHBvcnRzLmZyYWN0ID0gZXhwb3J0cy5uZWdGcmFjdCA9IGV4cG9ydHMuRVBTSUxPTiA9IHZvaWQgMDtcclxuZXhwb3J0cy5FUFNJTE9OID0gMC4wMDAwMDE7XHJcbmNvbnN0IG5lZ0ZyYWN0ID0gKHgpID0+IDEuMCAtIHggKyBNYXRoLmZsb29yKHgpO1xyXG5leHBvcnRzLm5lZ0ZyYWN0ID0gbmVnRnJhY3Q7XHJcbmNvbnN0IGZyYWN0ID0gKHgpID0+IHggLSBNYXRoLmZsb29yKHgpO1xyXG5leHBvcnRzLmZyYWN0ID0gZnJhY3Q7XHJcbmNvbnN0IGNsYW1wID0gKGEsIG1pbiwgbWF4KSA9PiBNYXRoLm1heChNYXRoLm1pbihhLCBtYXgpLCBtaW4pO1xyXG5leHBvcnRzLmNsYW1wID0gY2xhbXA7XHJcbmNvbnN0IHRpbWVBdFBvcyA9IChzdGFydFBvcywgZGlyLCBuZXdQb3MpID0+IGRpciA/IGV4cG9ydHMuY2xhbXAoKG5ld1BvcyAtIHN0YXJ0UG9zKSAvIGRpciwgMCwgMSkgOiAwO1xyXG5leHBvcnRzLnRpbWVBdFBvcyA9IHRpbWVBdFBvcztcclxuY29uc3QgbGVycCA9IChhLCBiLCB0KSA9PiBhICogKDEgLSB0KSArIGIgKiB0O1xyXG5leHBvcnRzLmxlcnAgPSBsZXJwO1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLmluUmFuZ2UgPSBleHBvcnRzLmF2ZyA9IGV4cG9ydHMubWF4MiA9IGV4cG9ydHMubWluMiA9IGV4cG9ydHMudG9QcmVjaXNpb24yID0gZXhwb3J0cy5sZXJwMiA9IGV4cG9ydHMubm9ybWFsaXplID0gZXhwb3J0cy5sZW5ndGggPSBleHBvcnRzLmRvdCA9IGV4cG9ydHMuc2lnbiA9IGV4cG9ydHMuYWJzID0gZXhwb3J0cy5jZWlsID0gZXhwb3J0cy5mbG9vciA9IGV4cG9ydHMuc3ViID0gZXhwb3J0cy5hZGRzID0gZXhwb3J0cy5hZGQgPSBleHBvcnRzLmRpdmlkZSA9IGV4cG9ydHMubXVsdGlwbHkgPSBleHBvcnRzLnNjYWxlID0gZXhwb3J0cy5lcXVhbHMgPSBleHBvcnRzLmRldGVybWluYW50MiA9IGV4cG9ydHMuY2xhbXAyID0gdm9pZCAwO1xyXG5jb25zdCBnbF9tYXRyaXhfMSA9IHJlcXVpcmUoXCJnbC1tYXRyaXhcIik7XHJcbmNvbnN0IGNsYW1wMiA9IChhLCBtaW4sIG1heCkgPT4ge1xyXG4gICAgY29uc3Qgb3V0ID0gZ2xfbWF0cml4XzEudmVjMi5jbG9uZShhKTtcclxuICAgIGdsX21hdHJpeF8xLnZlYzIubWluKG91dCwgb3V0LCBtYXgpO1xyXG4gICAgZ2xfbWF0cml4XzEudmVjMi5tYXgob3V0LCBvdXQsIG1pbik7XHJcbiAgICByZXR1cm4gb3V0O1xyXG59O1xyXG5leHBvcnRzLmNsYW1wMiA9IGNsYW1wMjtcclxuY29uc3QgZGV0ZXJtaW5hbnQyID0gKHAxLCBwMikgPT4gKHAxWzBdICogcDJbMV0pIC0gKHAxWzFdICogcDJbMF0pO1xyXG5leHBvcnRzLmRldGVybWluYW50MiA9IGRldGVybWluYW50MjtcclxuZXhwb3J0cy5lcXVhbHMgPSBnbF9tYXRyaXhfMS52ZWMyLmVxdWFscztcclxuY29uc3Qgc2NhbGUgPSAocDEsIGEpID0+IGdsX21hdHJpeF8xLnZlYzIuc2NhbGUoZ2xfbWF0cml4XzEudmVjMi5jcmVhdGUoKSwgcDEsIGEpO1xyXG5leHBvcnRzLnNjYWxlID0gc2NhbGU7XHJcbmNvbnN0IG11bHRpcGx5ID0gKHAxLCBwMikgPT4gZ2xfbWF0cml4XzEudmVjMi5tdWx0aXBseShnbF9tYXRyaXhfMS52ZWMyLmNyZWF0ZSgpLCBwMSwgcDIpO1xyXG5leHBvcnRzLm11bHRpcGx5ID0gbXVsdGlwbHk7XHJcbmNvbnN0IGRpdmlkZSA9IChwMSwgcDIpID0+IGdsX21hdHJpeF8xLnZlYzIuZGl2aWRlKGdsX21hdHJpeF8xLnZlYzIuY3JlYXRlKCksIHAxLCBwMik7XHJcbmV4cG9ydHMuZGl2aWRlID0gZGl2aWRlO1xyXG5jb25zdCBhZGQgPSAocDEsIHAyKSA9PiBnbF9tYXRyaXhfMS52ZWMyLmFkZChnbF9tYXRyaXhfMS52ZWMyLmNyZWF0ZSgpLCBwMSwgcDIpO1xyXG5leHBvcnRzLmFkZCA9IGFkZDtcclxuY29uc3QgYWRkcyA9IChwMSwgYSkgPT4gZ2xfbWF0cml4XzEudmVjMi5mcm9tVmFsdWVzKHAxWzBdICsgYSwgcDFbMV0gKyBhKTtcclxuZXhwb3J0cy5hZGRzID0gYWRkcztcclxuY29uc3Qgc3ViID0gKHAxLCBwMikgPT4gZ2xfbWF0cml4XzEudmVjMi5zdWIoZ2xfbWF0cml4XzEudmVjMi5jcmVhdGUoKSwgcDEsIHAyKTtcclxuZXhwb3J0cy5zdWIgPSBzdWI7XHJcbmNvbnN0IGZsb29yID0gKHAxKSA9PiBnbF9tYXRyaXhfMS52ZWMyLmZsb29yKGdsX21hdHJpeF8xLnZlYzIuY3JlYXRlKCksIHAxKTtcclxuZXhwb3J0cy5mbG9vciA9IGZsb29yO1xyXG5jb25zdCBjZWlsID0gKHAxKSA9PiBnbF9tYXRyaXhfMS52ZWMyLmNlaWwoZ2xfbWF0cml4XzEudmVjMi5jcmVhdGUoKSwgcDEpO1xyXG5leHBvcnRzLmNlaWwgPSBjZWlsO1xyXG5jb25zdCBhYnMgPSAocDEpID0+IGdsX21hdHJpeF8xLnZlYzIuZnJvbVZhbHVlcyhNYXRoLmFicyhwMVswXSksIE1hdGguYWJzKHAxWzFdKSk7XHJcbmV4cG9ydHMuYWJzID0gYWJzO1xyXG5jb25zdCBzaWduID0gKHAxKSA9PiBnbF9tYXRyaXhfMS52ZWMyLmZyb21WYWx1ZXMoTWF0aC5zaWduKHAxWzBdKSwgTWF0aC5zaWduKHAxWzFdKSk7XHJcbmV4cG9ydHMuc2lnbiA9IHNpZ247XHJcbmNvbnN0IGRvdCA9IChwMSwgcDIpID0+IGdsX21hdHJpeF8xLnZlYzIuZG90KHAxLCBwMik7XHJcbmV4cG9ydHMuZG90ID0gZG90O1xyXG5jb25zdCBsZW5ndGggPSAocDEpID0+IGdsX21hdHJpeF8xLnZlYzIubGVuZ3RoKHAxKTtcclxuZXhwb3J0cy5sZW5ndGggPSBsZW5ndGg7XHJcbmNvbnN0IG5vcm1hbGl6ZSA9IChwMSkgPT4gZXhwb3J0cy5zY2FsZShwMSwgMSAvIGV4cG9ydHMubGVuZ3RoKHAxKSk7XHJcbmV4cG9ydHMubm9ybWFsaXplID0gbm9ybWFsaXplO1xyXG5jb25zdCBsZXJwMiA9IChhLCBiLCB0KSA9PiBnbF9tYXRyaXhfMS52ZWMyLmxlcnAoZ2xfbWF0cml4XzEudmVjMi5jcmVhdGUoKSwgYSwgYiwgdCk7XHJcbmV4cG9ydHMubGVycDIgPSBsZXJwMjtcclxuLy93YXJuaW5nOiBtdXRhdGVzIGFcclxuY29uc3QgdG9QcmVjaXNpb24yID0gKGEsIGFtb3VudCkgPT4ge1xyXG4gICAgYVswXSA9IHBhcnNlRmxvYXQoYVswXS50b1ByZWNpc2lvbihhbW91bnQpKTtcclxuICAgIGFbMV0gPSBwYXJzZUZsb2F0KGFbMV0udG9QcmVjaXNpb24oYW1vdW50KSk7XHJcbiAgICByZXR1cm4gYTtcclxufTtcclxuZXhwb3J0cy50b1ByZWNpc2lvbjIgPSB0b1ByZWNpc2lvbjI7XHJcbmNvbnN0IG1pbjIgPSAoLi4ub2JqcykgPT4ge1xyXG4gICAgY29uc3QgW2ZpcnN0LCAuLi5yZXN0XSA9IG9ianM7XHJcbiAgICBjb25zdCByZXN1bHQgPSBnbF9tYXRyaXhfMS52ZWMyLmNsb25lKGZpcnN0KTtcclxuICAgIHJlc3QuZm9yRWFjaCgob2JqKSA9PiB7XHJcbiAgICAgICAgZ2xfbWF0cml4XzEudmVjMi5taW4ocmVzdWx0LCByZXN1bHQsIG9iaik7XHJcbiAgICB9KTtcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn07XHJcbmV4cG9ydHMubWluMiA9IG1pbjI7XHJcbmNvbnN0IG1heDIgPSAoLi4ub2JqcykgPT4ge1xyXG4gICAgY29uc3QgW2ZpcnN0LCAuLi5yZXN0XSA9IG9ianM7XHJcbiAgICBjb25zdCByZXN1bHQgPSBnbF9tYXRyaXhfMS52ZWMyLmNsb25lKGZpcnN0KTtcclxuICAgIHJlc3QuZm9yRWFjaCgob2JqKSA9PiB7XHJcbiAgICAgICAgZ2xfbWF0cml4XzEudmVjMi5tYXgocmVzdWx0LCByZXN1bHQsIG9iaik7XHJcbiAgICB9KTtcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn07XHJcbmV4cG9ydHMubWF4MiA9IG1heDI7XHJcbmNvbnN0IGF2ZyA9ICguLi5vYmpzKSA9PiB7XHJcbiAgICBjb25zdCByZXN1bHQgPSBnbF9tYXRyaXhfMS52ZWMyLmNyZWF0ZSgpO1xyXG4gICAgaWYgKG9ianMubGVuZ3RoKSB7XHJcbiAgICAgICAgb2Jqcy5mb3JFYWNoKChvYmopID0+IHtcclxuICAgICAgICAgICAgZ2xfbWF0cml4XzEudmVjMi5hZGQocmVzdWx0LCByZXN1bHQsIG9iaik7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgZ2xfbWF0cml4XzEudmVjMi5zY2FsZShyZXN1bHQsIHJlc3VsdCwgMSAvIG9ianMubGVuZ3RoKTtcclxuICAgIH1cclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn07XHJcbmV4cG9ydHMuYXZnID0gYXZnO1xyXG5jb25zdCBpblJhbmdlID0gKHAxLCBtaW4sIG1heCkgPT4ge1xyXG4gICAgcmV0dXJuICEocDFbMF0gPiBtYXhbMF0gfHwgcDFbMF0gPCBtaW5bMF0gfHwgcDFbMV0gPiBtYXhbMV0gfHwgcDFbMV0gPCBtaW5bMV0pO1xyXG59O1xyXG5leHBvcnRzLmluUmFuZ2UgPSBpblJhbmdlO1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLnJhc3Rlcml6ZVRyaWFuZ2xlID0gdm9pZCAwO1xyXG5jb25zdCBnbF9tYXRyaXhfMSA9IHJlcXVpcmUoXCJnbC1tYXRyaXhcIik7XHJcbmNvbnN0IHRyYXZlcnNlXzEgPSByZXF1aXJlKFwiLi90cmF2ZXJzZVwiKTtcclxuY29uc3QgcmFzdGVyaXplVHJpYW5nbGUgPSAocG9pbnRzLCBvcHRzLCBzdHJva2VDYWxsYmFjaywgZmlsbENhbGxiYWNrKSA9PiB7XHJcbiAgICBjb25zdCBsaW5lcyA9IFtcclxuICAgICAgICB7IGZyb206IHBvaW50c1swXSwgdG86IHBvaW50c1sxXSB9LFxyXG4gICAgICAgIHsgZnJvbTogcG9pbnRzWzFdLCB0bzogcG9pbnRzWzJdIH0sXHJcbiAgICAgICAgeyBmcm9tOiBwb2ludHNbMl0sIHRvOiBwb2ludHNbMF0gfVxyXG4gICAgXTtcclxuICAgIGNvbnN0IHNjYW5saW5lcyA9IHt9O1xyXG4gICAgY29uc3QgdmlzaXRlZENlbGxzID0gbmV3IFNldCgpO1xyXG4gICAgbGluZXMuZm9yRWFjaCgobGluZSkgPT4ge1xyXG4gICAgICAgIHRyYXZlcnNlXzEudHJhdmVyc2UobGluZS5mcm9tLCBsaW5lLnRvLCBvcHRzLCAocG9zKSA9PiB7XHJcbiAgICAgICAgICAgIGxldCBzY2FubGluZSA9IHNjYW5saW5lc1twb3NbMV1dO1xyXG4gICAgICAgICAgICBjb25zdCBjZWxsSW5kZXggPSBwb3NbMF0gKyAnLCcgKyBwb3NbMV07XHJcbiAgICAgICAgICAgIGlmICh2aXNpdGVkQ2VsbHMuaGFzKGNlbGxJbmRleCkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoIXNjYW5saW5lKSB7XHJcbiAgICAgICAgICAgICAgICBzY2FubGluZSA9IHsgbWluOiBwb3NbMF0sIG1heDogcG9zWzBdIH07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBzY2FubGluZS5taW4gPSBNYXRoLm1pbihzY2FubGluZS5taW4sIHBvc1swXSk7XHJcbiAgICAgICAgICAgICAgICBzY2FubGluZS5tYXggPSBNYXRoLm1heChzY2FubGluZS5tYXgsIHBvc1swXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgc2NhbmxpbmVzW3Bvc1sxXV0gPSBzY2FubGluZTtcclxuICAgICAgICAgICAgc3Ryb2tlQ2FsbGJhY2socG9zKTtcclxuICAgICAgICAgICAgdmlzaXRlZENlbGxzLmFkZChjZWxsSW5kZXgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgICBjb25zdCBjb29yZCA9IGdsX21hdHJpeF8xLnZlYzIuY3JlYXRlKCk7XHJcbiAgICBmb3IgKGxldCB5IGluIHNjYW5saW5lcykge1xyXG4gICAgICAgIGlmIChzY2FubGluZXMuaGFzT3duUHJvcGVydHkoeSkpIHtcclxuICAgICAgICAgICAgY29vcmRbMV0gPSBwYXJzZUludCh5LCAxMCk7XHJcbiAgICAgICAgICAgIGNvbnN0IHNjYW5saW5lID0gc2NhbmxpbmVzW3ldO1xyXG4gICAgICAgICAgICAvL3J1biBhIGNhbGxiYWNrIGZvciBhbGwgb2YgdGhlIGJsb2NrcyB0aGF0IGFyZSBiZXR3ZWVuIG91ciBwb2ludHMgYW5kIG5vdCBhIGJvdW5kYXJ5XHJcbiAgICAgICAgICAgIGZvciAoY29vcmRbMF0gPSBzY2FubGluZS5taW4gKyAxOyBjb29yZFswXSA8IHNjYW5saW5lLm1heDsgY29vcmRbMF0rKykge1xyXG4gICAgICAgICAgICAgICAgaWYgKCF2aXNpdGVkQ2VsbHMuaGFzKGNvb3JkWzBdICsgJywnICsgY29vcmRbMV0pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZmlsbENhbGxiYWNrKGNvb3JkKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBzY2FubGluZXM7XHJcbn07XHJcbmV4cG9ydHMucmFzdGVyaXplVHJpYW5nbGUgPSByYXN0ZXJpemVUcmlhbmdsZTtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy50cmF2ZXJzZSA9IHZvaWQgMDtcclxuY29uc3QgZ2xfbWF0cml4XzEgPSByZXF1aXJlKFwiZ2wtbWF0cml4XCIpO1xyXG5jb25zdCBjb21tb25fMSA9IHJlcXVpcmUoXCIuLi9tYXRocy9jb21tb25cIik7XHJcbmNvbnN0IHBvaW50XzEgPSByZXF1aXJlKFwiLi4vbWF0aHMvcG9pbnRcIik7XHJcbmNvbnN0IHRyYXZlcnNlID0gKGZyb20sIHRvLCBvcHRpb25zLCBjYikgPT4ge1xyXG4gICAgY29uc3QgcG9zID0gcG9pbnRfMS5zdWIoZnJvbSwgb3B0aW9ucy5wb3MpO1xyXG4gICAgY29uc3QgZGlyID0gcG9pbnRfMS5zdWIodG8sIGZyb20pO1xyXG4gICAgY29uc3QgY2VsbCA9IHBvaW50XzEuZmxvb3IocG9pbnRfMS5kaXZpZGUocG9zLCBvcHRpb25zLmNlbGxTaXplKSk7XHJcbiAgICBjb25zdCBzdG9wX2NlbGwgPSBwb2ludF8xLmZsb29yKHBvaW50XzEuZGl2aWRlKHBvaW50XzEuc3ViKHRvLCBvcHRpb25zLnBvcyksIG9wdGlvbnMuY2VsbFNpemUpKTtcclxuICAgIGlmIChNYXRoLmFicyhkaXJbMV0pIDwgY29tbW9uXzEuRVBTSUxPTikge1xyXG4gICAgICAgIGZvciAobGV0IHggPSBNYXRoLm1pbihjZWxsWzBdLCBzdG9wX2NlbGxbMF0pLCBtYXhYID0gTWF0aC5tYXgoY2VsbFswXSwgc3RvcF9jZWxsWzBdKTsgeCA8PSBtYXhYOyB4KyspIHtcclxuICAgICAgICAgICAgY2VsbFswXSA9IHg7XHJcbiAgICAgICAgICAgIGlmIChjYihjZWxsKSA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBpZiAoTWF0aC5hYnMoZGlyWzBdKSA8IGNvbW1vbl8xLkVQU0lMT04pIHtcclxuICAgICAgICBmb3IgKGxldCB5ID0gTWF0aC5taW4oY2VsbFsxXSwgc3RvcF9jZWxsWzFdKSwgbWF4WSA9IE1hdGgubWF4KGNlbGxbMV0sIHN0b3BfY2VsbFsxXSk7IHkgPD0gbWF4WTsgeSsrKSB7XHJcbiAgICAgICAgICAgIGNlbGxbMV0gPSB5O1xyXG4gICAgICAgICAgICBpZiAoY2IoY2VsbCkgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgY29uc3Qgc3RlcCA9IHBvaW50XzEuc2lnbihkaXIpO1xyXG4gICAgY29uc3QgdF9kZWx0YSA9IHBvaW50XzEubXVsdGlwbHkocG9pbnRfMS5kaXZpZGUoc3RlcCwgZGlyKSwgb3B0aW9ucy5jZWxsU2l6ZSk7XHJcbiAgICBjb25zdCB0X3BvcyA9IHBvaW50XzEuZGl2aWRlKHBvcywgb3B0aW9ucy5jZWxsU2l6ZSk7XHJcbiAgICBjb25zdCB0X21heCA9IGdsX21hdHJpeF8xLnZlYzIuZnJvbVZhbHVlcygoc3RlcFswXSA+IDAuMCA/IHRfZGVsdGFbMF0gKiBjb21tb25fMS5uZWdGcmFjdCh0X3Bvc1swXSkgOiB0X2RlbHRhWzBdICogY29tbW9uXzEuZnJhY3QodF9wb3NbMF0pKSwgKHN0ZXBbMV0gPiAwLjAgPyB0X2RlbHRhWzFdICogY29tbW9uXzEubmVnRnJhY3QodF9wb3NbMV0pIDogdF9kZWx0YVsxXSAqIGNvbW1vbl8xLmZyYWN0KHRfcG9zWzFdKSkpO1xyXG4gICAgd2hpbGUgKHRydWUpIHtcclxuICAgICAgICBpZiAoY2IoY2VsbCkgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRfbWF4WzBdID4gMS4wICYmIHRfbWF4WzFdID4gMS4wKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRfbWF4WzBdIDwgdF9tYXhbMV0pIHtcclxuICAgICAgICAgICAgY2VsbFswXSArPSBzdGVwWzBdO1xyXG4gICAgICAgICAgICB0X21heFswXSArPSB0X2RlbHRhWzBdO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgY2VsbFsxXSArPSBzdGVwWzFdO1xyXG4gICAgICAgICAgICB0X21heFsxXSArPSB0X2RlbHRhWzFdO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufTtcclxuZXhwb3J0cy50cmF2ZXJzZSA9IHRyYXZlcnNlO1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLmFkZDRNdXRhdGUgPSB2b2lkIDA7XHJcbmNvbnN0IGFkZDRNdXRhdGUgPSAoYSwgYikgPT4ge1xyXG4gICAgYVswXSArPSBiWzBdO1xyXG4gICAgYVsxXSArPSBiWzFdO1xyXG4gICAgYVsyXSArPSBiWzJdO1xyXG4gICAgYVszXSArPSBiWzNdO1xyXG4gICAgcmV0dXJuIGE7XHJcbn07XHJcbmV4cG9ydHMuYWRkNE11dGF0ZSA9IGFkZDRNdXRhdGU7XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuY2xhbXAgPSB2b2lkIDA7XHJcbmNvbnN0IGNsYW1wID0gKHZhbCwgbWluLCBtYXgpID0+IHtcclxuICAgIHJldHVybiBNYXRoLm1heChNYXRoLm1pbih2YWwsIG1heCksIG1pbik7XHJcbn07XHJcbmV4cG9ydHMuY2xhbXAgPSBjbGFtcDtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5mbG9vcjRNdXRhdGUgPSB2b2lkIDA7XHJcbmNvbnN0IGZsb29yNE11dGF0ZSA9IChhKSA9PiB7XHJcbiAgICBhWzBdID0gTWF0aC5mbG9vcihhWzBdKTtcclxuICAgIGFbMV0gPSBNYXRoLmZsb29yKGFbMV0pO1xyXG4gICAgYVsyXSA9IE1hdGguZmxvb3IoYVsyXSk7XHJcbiAgICBhWzNdID0gTWF0aC5mbG9vcihhWzNdKTtcclxuICAgIHJldHVybiBhO1xyXG59O1xyXG5leHBvcnRzLmZsb29yNE11dGF0ZSA9IGZsb29yNE11dGF0ZTtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5nZXRJbWFnZURhdGEgPSB2b2lkIDA7XHJcbmNvbnN0IGdldEltYWdlRGF0YSA9IChpbWFnZSkgPT4ge1xyXG4gICAgY29uc3QgaW1hZ2VDYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcclxuICAgIGltYWdlQ2FudmFzLndpZHRoID0gaW1hZ2Uud2lkdGg7XHJcbiAgICBpbWFnZUNhbnZhcy5oZWlnaHQgPSBpbWFnZS5oZWlnaHQ7XHJcbiAgICBjb25zdCBpbWFnZUdyYXBoaWNzID0gaW1hZ2VDYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcclxuICAgIGlmICghaW1hZ2VHcmFwaGljcykge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignQ291bGQgbm90IGNyZWF0ZSBjYW52YXMgdG8gZXh0cmFjdCBpbWFnZSBkYXRhJyk7XHJcbiAgICB9XHJcbiAgICBpbWFnZUdyYXBoaWNzLmNsZWFyUmVjdCgwLCAwLCBpbWFnZUNhbnZhcy53aWR0aCwgaW1hZ2VDYW52YXMuaGVpZ2h0KTtcclxuICAgIGltYWdlR3JhcGhpY3MuZHJhd0ltYWdlKGltYWdlLCAwLCAwKTtcclxuICAgIHJldHVybiBpbWFnZUdyYXBoaWNzLmdldEltYWdlRGF0YSgwLCAwLCBpbWFnZUNhbnZhcy53aWR0aCwgaW1hZ2VDYW52YXMuaGVpZ2h0KTtcclxufTtcclxuZXhwb3J0cy5nZXRJbWFnZURhdGEgPSBnZXRJbWFnZURhdGE7XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuc2NhbGU0TXV0YXRlID0gdm9pZCAwO1xyXG5jb25zdCBzY2FsZTRNdXRhdGUgPSAoYSwgbWFnKSA9PiB7XHJcbiAgICBhWzBdICo9IG1hZztcclxuICAgIGFbMV0gKj0gbWFnO1xyXG4gICAgYVsyXSAqPSBtYWc7XHJcbiAgICBhWzNdICo9IG1hZztcclxuICAgIHJldHVybiBhO1xyXG59O1xyXG5leHBvcnRzLnNjYWxlNE11dGF0ZSA9IHNjYWxlNE11dGF0ZTtcclxuIl0sIm5hbWVzIjpbImdsX21hdHJpeF8xIiwiZ2V0VHJpYW5nbGVDb3ZlcmFnZV8xIiwicG9pbnRfMSIsImdldEltYWdlRGF0YV8xIiwiZ2FtZSIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJpbWFnZUlucHV0IiwidHJpYW5nbGVtYXAiLCJyZXNvbHV0aW9uIiwidGltZXRha2VuIiwiZyIsImdldENvbnRleHQiLCJzdGFydCIsImltYWdlIiwiSW1hZ2UiLCJjcmVhdGVNYXAiLCJudW1JdGVyYXRpb25zIiwicGFyc2VJbnQiLCJ2YWx1ZSIsImltYWdlRGF0YSIsImdldEltYWdlRGF0YSIsInN0YXJ0VGltZSIsIkRhdGUiLCJub3ciLCJzYW1wbGVHcmFwaGljcyIsInRleHR1cmVTaXplIiwiTWF0aCIsInBvdyIsInNhbXBsZUNhbnZhcyIsImNyZWF0ZUVsZW1lbnQiLCJ3aWR0aCIsImhlaWdodCIsInNhbXBsZURhdGEiLCJ4U3RlcCIsInlTdGVwIiwicDEiLCJ2ZWMyIiwiY3JlYXRlIiwicDIiLCJwMyIsInRyaWFuZ2xlIiwiZTEiLCJlMiIsImUzIiwicG9pbnRzIiwiY29sb3VyIiwiaSIsIngxIiwiZmxvb3IiLCJ5MSIsIngyIiwieTIiLCJlcXVhbHMiLCJzdWIiLCJ4MyIsInkzIiwiZ2V0VHJpYW5nbGVDb3ZlcmFnZSIsImRhdGEiLCJzZXQiLCJwdXRJbWFnZURhdGEiLCJjcmVhdGVUcmlhbmdsZUZpdHRpbmdNYXAiLCJpbm5lclRleHQiLCJpbm5lckhUTUwiLCJhcHBlbmQiLCJjYW52YXMiLCJjbGVhclJlY3QiLCJkcmF3SW1hZ2UiLCJvbmNoYW5nZSIsIm9ubG9hZCIsInNyYyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInNldFBpeGVsIiwiZ2V0UGl4ZWwiLCJ4IiwieSIsInNhbXBsZUluZGV4Iiwic2xpY2UiLCJyZ2JhIiwiaW50ZXJzZWN0Q2VsbFRyaWFuZ2xlXzEiLCJwb2x5Z29uQXJlYV8xIiwicmFzdGVyaXplVHJpYW5nbGVfMSIsImFkZDRNdXRhdGVfMSIsImNsYW1wXzEiLCJmbG9vcjRNdXRhdGVfMSIsInNjYWxlNE11dGF0ZV8xIiwiY2FudmFzXzEiLCJ0cmlhbmdsZUNvbG91ciIsInJhc3Rlcml6ZVRyaWFuZ2xlIiwicG9zIiwiY2VsbFNpemUiLCJmcm9tVmFsdWVzIiwiYm91bmRhcnlDZWxsIiwiY2VsbEJvdW5kcyIsIm1pbiIsInNpemUiLCJtYXgiLCJhZGRzIiwiY2VsbEZpbGxQb2x5Z29uIiwiaW50ZXJzZWN0Q2VsbFRyaWFuZ2xlIiwiYXJlYUNvdmVyYWdlIiwiY2xhbXAiLCJOdW1iZXIiLCJwb2x5Z29uQXJlYSIsInRvRml4ZWQiLCJwaXhlbCIsImFkZDRNdXRhdGUiLCJzY2FsZTRNdXRhdGUiLCJzb2xpZENlbGwiLCJ0cmlhbmdsZUNvdmVyYWdlIiwiZmxvb3I0TXV0YXRlIiwiY29tbW9uXzEiLCJjZWxsIiwidDFzIiwidGltZUF0UG9zIiwic29ydCIsInB1c2giLCJtYXAiLCJ0IiwiY2xhbXAyIiwiYWRkIiwic2NhbGUiLCJ0MnMiLCJ0M3MiLCJwb2x5Z29uQXJlYVNpZ25lZCIsImxlbmd0aCIsImxhc3RJbmRleCIsImFyZWEiLCJkZXRlcm1pbmFudDIiLCJhYnMiLCJsZXJwIiwiZnJhY3QiLCJuZWdGcmFjdCIsIkVQU0lMT04iLCJhIiwic3RhcnRQb3MiLCJkaXIiLCJuZXdQb3MiLCJiIiwiaW5SYW5nZSIsImF2ZyIsIm1heDIiLCJtaW4yIiwidG9QcmVjaXNpb24yIiwibGVycDIiLCJub3JtYWxpemUiLCJkb3QiLCJzaWduIiwiY2VpbCIsImRpdmlkZSIsIm11bHRpcGx5Iiwib3V0IiwiY2xvbmUiLCJhbW91bnQiLCJwYXJzZUZsb2F0IiwidG9QcmVjaXNpb24iLCJvYmpzIiwiZmlyc3QiLCJyZXN0IiwicmVzdWx0IiwiZm9yRWFjaCIsIm9iaiIsInRyYXZlcnNlXzEiLCJvcHRzIiwic3Ryb2tlQ2FsbGJhY2siLCJmaWxsQ2FsbGJhY2siLCJsaW5lcyIsImZyb20iLCJ0byIsInNjYW5saW5lcyIsInZpc2l0ZWRDZWxscyIsIlNldCIsImxpbmUiLCJ0cmF2ZXJzZSIsInNjYW5saW5lIiwiY2VsbEluZGV4IiwiaGFzIiwiY29vcmQiLCJoYXNPd25Qcm9wZXJ0eSIsIm9wdGlvbnMiLCJjYiIsInN0b3BfY2VsbCIsIm1heFgiLCJtYXhZIiwic3RlcCIsInRfZGVsdGEiLCJ0X3BvcyIsInRfbWF4IiwidmFsIiwiaW1hZ2VDYW52YXMiLCJpbWFnZUdyYXBoaWNzIiwiRXJyb3IiLCJtYWciXSwic291cmNlUm9vdCI6IiJ9