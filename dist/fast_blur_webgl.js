(()=>{"use strict";var e={851:function(e,r,t){var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(r,"__esModule",{value:!0});const o=t(787),i=t(278),a=t(601),l=t(372),u=t(549),c=t(795),m=n(t(467)),d=n(t(803)),s=document.getElementById("game"),x=document.getElementById("image"),f=document.getElementById("amount"),g=document.getElementById("amountvalue"),v=document.getElementById("timetaken"),C=s.getContext("webgl2");if(!C)throw new Error("No WebGL2 Support :(");let h,_=8;const E=()=>{const e=a.makeLogScale(0,512);C.clearColor(0,0,0,0);const r=u.loadShader(C,m.default,C.VERTEX_SHADER),t=u.loadShader(C,d.default,C.FRAGMENT_SHADER),n=c.createProgram(C,r,t),s=C.createVertexArray();if(null===s)throw new Error("Could not create screen triangle");C.bindVertexArray(s);const E=C.createBuffer();C.bindBuffer(C.ARRAY_BUFFER,E),C.bufferData(C.ARRAY_BUFFER,new Float32Array([-1,-1,3,-1,-1,3]),C.STATIC_DRAW);const p=C.createTexture();if(C.bindTexture(C.TEXTURE_2D,p),C.pixelStorei(C.UNPACK_FLIP_Y_WEBGL,!0),C.texImage2D(C.TEXTURE_2D,0,C.RGBA,C.RGBA,C.UNSIGNED_BYTE,x),C.generateMipmap(C.TEXTURE_2D),x.width*x.height>16777216)throw new Error("Image too big, up to 4096 x 4096 supported");const T=i.createSummedTextureWebgl(l.getImageData(x)),y=C.createTexture();C.bindTexture(C.TEXTURE_2D,y),C.texImage2D(C.TEXTURE_2D,0,C.RGBA32UI,x.width,x.height,0,C.RGBA_INTEGER,C.UNSIGNED_INT,T),C.texParameteri(C.TEXTURE_2D,C.TEXTURE_MAG_FILTER,C.NEAREST),C.texParameteri(C.TEXTURE_2D,C.TEXTURE_MIN_FILTER,C.NEAREST),C.texParameteri(C.TEXTURE_2D,C.TEXTURE_WRAP_S,C.CLAMP_TO_EDGE),C.texParameteri(C.TEXTURE_2D,C.TEXTURE_WRAP_T,C.CLAMP_TO_EDGE),C.useProgram(n);const D=C.getAttribLocation(n,"a_position");C.bindBuffer(C.ARRAY_BUFFER,E),C.enableVertexAttribArray(D),C.vertexAttribPointer(D,2,C.FLOAT,!1,0,0);const A=C.getUniformLocation(n,"u_texture");C.uniform1i(A,0),C.activeTexture(C.TEXTURE0),C.bindTexture(C.TEXTURE_2D,p),h=C.getUniformLocation(n,"u_bluramount");const R=C.getUniformLocation(n,"u_summedtexture");C.uniform1i(R,1),C.activeTexture(C.TEXTURE1),C.bindTexture(C.TEXTURE_2D,y);const w=o.createRenderer((()=>{g.value=_.toString(),f.value=e.toLinear(_).toString(),((e,r)=>{const t=Date.now();C.viewport(0,0,C.canvas.width,C.canvas.height),C.clear(C.COLOR_BUFFER_BIT|C.DEPTH_BUFFER_BIT),C.useProgram(e),C.uniform1f(h,_),C.bindVertexArray(r),C.drawArrays(C.TRIANGLES,0,3),v.innerText=Date.now()-t+" ms"})(n,s)}));f.oninput=()=>{_=parseFloat(e.fromLinear(parseFloat(f.value)).toFixed(1)),w()},g.onchange=()=>{_=parseFloat(g.value),w()},w()};x.complete?E():x.onload=E},787:(e,r)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.createRenderer=void 0,r.createRenderer=(e,r)=>{let t=!1;return()=>{t||(t=!0,requestAnimationFrame((()=>{e(),t=!1,null==r||r()})))}}},278:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.createSummedTextureWebgl=void 0;const n=t(78),o=t(196);r.createSummedTextureWebgl=e=>{const r=new Array(e.height);for(let t=0;t<e.height;t++){r[t]=new Array(e.width);for(let i=0;i<e.width;i++){const a=4*((e.height-1-t)*e.width+i),l=new Uint32Array(e.data.slice(a,a+4));i>0&&n.add4Mutate(l,r[t][i-1]),t>0&&n.add4Mutate(l,r[t-1][i]),i>0&&t>0&&o.subtract4Mutate(l,r[t-1][i-1]),r[t][i]=l}}const t=new Uint32Array(e.width*e.height*4);for(let n=0,o=e.height-1;o>=0;o--){const i=r[o];for(let r=0;r<e.width;r++,n+=4){const e=i[r];t[n]=e[0],t[n+1]=e[1],t[n+2]=e[2],t[n+3]=e[3]}}return t}},601:(e,r)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.makeLogScale=void 0,r.makeLogScale=(e,r)=>{const t=e?Math.log(e):0,n=Math.log(r)-t;return{fromLinear:e=>Math.exp(t+n*e),toLinear:e=>(Math.log(e)-t)/n}}},78:(e,r)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.add4Mutate=void 0,r.add4Mutate=(e,r)=>(e[0]+=r[0],e[1]+=r[1],e[2]+=r[2],e[3]+=r[3],e)},372:(e,r)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.getImageData=void 0,r.getImageData=e=>{const r=document.createElement("canvas");r.width=e.width,r.height=e.height;const t=r.getContext("2d");if(!t)throw new Error("Could not create canvas to extract image data");return t.clearRect(0,0,r.width,r.height),t.drawImage(e,0,0),t.getImageData(0,0,r.width,r.height)}},196:(e,r)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.subtract4Mutate=void 0,r.subtract4Mutate=(e,r)=>(e[0]-=r[0],e[1]-=r[1],e[2]-=r[2],e[3]-=r[3],e)},795:(e,r)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.createProgram=void 0,r.createProgram=(e,r,t)=>{const n=e.createProgram();if(null===n)throw new Error("Could not create program");if(e.attachShader(n,r),e.attachShader(n,t),e.linkProgram(n),!e.getProgramParameter(n,e.LINK_STATUS)){const r=e.getProgramInfoLog(n);throw e.deleteProgram(n),new Error(`Error linking program : ${r}`)}return n}},549:(e,r)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.loadShader=void 0,r.loadShader=(e,r,t)=>{const n=e.createShader(t);if(null===n)throw new Error("Could not create shader");if(e.shaderSource(n,r),e.compileShader(n),!e.getShaderParameter(n,e.COMPILE_STATUS)){const r=e.getShaderInfoLog(n);throw e.deleteShader(n),new Error(`Error compiling shader: ${r}`)}return n}},803:e=>{e.exports="#version 300 es\r\nprecision highp float;\r\nprecision highp usampler2D;\r\n\r\nuniform float u_bluramount;\r\nuniform sampler2D u_texture;\r\nuniform usampler2D u_summedtexture;\r\n\r\nout vec4 outColor;\r\n\r\nvec4 getSummedArea(const in ivec2 minCoord, const in ivec2 maxCoord) {\r\n    return vec4(texelFetch(u_summedtexture, maxCoord, 0) - \r\n        texelFetch(u_summedtexture, ivec2(minCoord.x, maxCoord.y), 0) + \r\n        texelFetch(u_summedtexture, minCoord, 0) -\r\n        texelFetch(u_summedtexture, ivec2(maxCoord.x, minCoord.y), 0));\r\n}\r\n\r\nvec4 getPixel(const in ivec2 pos) {\r\n    return texelFetch(u_texture, pos, 0) * 255.0;\r\n}\r\n\r\n//results in up to 24 texture lookups based on complexity of range, whatever size the image is\r\nvec4 averageSummed(const in vec2 minCoord, const in vec2 maxCoord) {\r\n    ivec2 startCell = ivec2(floor(minCoord));\r\n    ivec2 endCell = ivec2(floor(maxCoord));\r\n\r\n    //range contained in one pixel\r\n    if (startCell == endCell) {\r\n        return texelFetch(u_texture, ivec2(startCell), 0);\r\n    }\r\n    \r\n    vec2 size = maxCoord - minCoord;\r\n    float pixelArea = size.x * size.y;\r\n    float colourNormaliser = 1.0 / pixelArea;\r\n    \r\n    ivec2 innerCell = ivec2(ceil(minCoord));\r\n    ivec2 innerCell2 = ivec2(floor(maxCoord));\r\n\r\n    vec2 minDiff = vec2(innerCell) - minCoord;\r\n    vec2 maxDiff = maxCoord - vec2(innerCell2);\r\n\r\n    vec4 colour = vec4(0.0);\r\n\r\n    //TODO: optimise by removing branches\r\n    \r\n    //single horizontal strip\r\n    if (startCell.x == endCell.x) {\r\n        if (minDiff.y > 0.0) {\r\n            colour += getPixel(startCell) * size.x * minDiff.y;\r\n        }\r\n\r\n        if (maxDiff.y > 0.0) {\r\n            colour += getPixel(endCell) * size.x * maxDiff.y;\r\n        }\r\n\r\n        colour += getSummedArea(ivec2(startCell.x, innerCell.y)-1, ivec2(startCell.x, innerCell2.y-1)) * size.x;\r\n        return floor(colour * colourNormaliser);\r\n    }\r\n    \r\n    //single vertical strip\r\n    if (startCell.y == endCell.y) {\r\n        if (minDiff.x > 0.0) {\r\n            colour += getPixel(startCell) * size.y * minDiff.x;\r\n        }\r\n\r\n        if (maxDiff.x > 0.0) {\r\n            colour += getPixel(endCell) * size.y * maxDiff.x;\r\n        }\r\n\r\n        colour += getSummedArea(ivec2(innerCell.x, startCell.y)-1, ivec2(innerCell2.x-1, startCell.y)) * size.y;\r\n        return floor(colour * colourNormaliser);\r\n    }\r\n\r\n    //corner cells\r\n    if (minDiff.y > 0.0) {\r\n        if (minDiff.x > 0.0) {\r\n            colour += getPixel(startCell) * minDiff.x * minDiff.y;\r\n        }\r\n\r\n        if (maxDiff.x > 0.0) {\r\n            colour += getPixel(ivec2(endCell.x, startCell.y)) * maxDiff.x * minDiff.y;\r\n        }\r\n    }\r\n\r\n    if (maxDiff.y > 0.0) {\r\n        if (minDiff.x > 0.0) {\r\n            colour += getPixel(ivec2(startCell.x, endCell.y)) * minDiff.x * maxDiff.y;\r\n        }\r\n\r\n        if (maxDiff.x > 0.0) {\r\n            colour += getPixel(endCell) * maxDiff.x * maxDiff.y;\r\n        }\r\n    }\r\n\r\n    //fractional strips\r\n    if (minDiff.y > 0.0) {\r\n        colour += getSummedArea(ivec2(innerCell.x, startCell.y)-1, ivec2(innerCell2.x-1, startCell.y)) * minDiff.y;\r\n    }\r\n\r\n    if (minDiff.x > 0.0) {\r\n        colour += getSummedArea(ivec2(startCell.x, innerCell.y)-1, ivec2(startCell.x, innerCell2.y-1)) * minDiff.x;\r\n    }\r\n\r\n    if (maxDiff.y > 0.0) {\r\n        colour += getSummedArea(ivec2(innerCell.x, endCell.y)-1, ivec2(innerCell2.x-1, endCell.y)) * maxDiff.y;\r\n    }\r\n\r\n    if (maxDiff.x > 0.0) {\r\n        colour += getSummedArea(ivec2(endCell.x, innerCell.y)-1, ivec2(endCell.x, innerCell2.y-1)) * maxDiff.x;\r\n    }\r\n\r\n    //inner parts\r\n    colour += getSummedArea(ivec2(innerCell)-1, ivec2(innerCell2)-1);\r\n    \r\n    //now we have an accumulative pixel value that covers the whole area so just average it\r\n    return floor(colour * colourNormaliser);\r\n}\r\n\r\nvoid main() {\r\n    ivec2 fragCoord = ivec2(gl_FragCoord.xy);\r\n    vec2 tex_size = vec2(textureSize(u_summedtexture, 0));\r\n\r\n    vec2 minCoord = clamp(vec2(fragCoord) - u_bluramount, vec2(0.0), tex_size);\r\n    vec2 maxCoord = clamp(vec2(fragCoord) + u_bluramount, vec2(0.0), tex_size);\r\n\r\n    vec4 pixelColour = averageSummed(minCoord, maxCoord);\r\n\r\n    /*\r\n    //simple test - show the original image pixel using the summed texture (requires 4 lookups - that is why we upload both to the gpu)\r\n    vec4 pixelColour = vec4(\r\n        texelFetch(u_summedtexture, fragCoord, 0) - \r\n        texelFetch(u_summedtexture, ivec2(fragCoord.x - 1, fragCoord.y), 0) + \r\n        texelFetch(u_summedtexture, fragCoord - 1, 0) -\r\n        texelFetch(u_summedtexture, ivec2(fragCoord.x, fragCoord.y - 1), 0)\r\n    );\r\n    */\r\n\r\n    outColor = pixelColour / 255.0;\r\n}\r\n"},467:e=>{e.exports="#version 300 es\r\nin vec2 a_position;\r\n\r\nvoid main() {\r\n    gl_Position = vec4(a_position, 0.0, 1.0);\r\n}\r\n"}},r={};!function t(n){var o=r[n];if(void 0!==o)return o.exports;var i=r[n]={exports:{}};return e[n].call(i.exports,i,i.exports,t),i.exports}(851)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,