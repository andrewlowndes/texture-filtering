"use strict";(self.webpackChunksampling_coverage=self.webpackChunksampling_coverage||[]).push([[420],{851:(e,t,r)=>{const n=r(7787),o=r(3278),i=r(7601),a=r(8372),l=r(9864),u=r(5350),d=document.getElementById("game"),m=document.getElementById("image"),c=document.getElementById("amount"),s=document.getElementById("amountvalue"),x=document.getElementById("timetaken"),f=d.getContext("webgl2");if(!f)throw new Error("No WebGL2 Support :(");let v,g=8;const p=()=>{const e=i.makeLogScale(0,512);f.clearColor(0,0,0,0);const t=l.createProgramFromShader(f,u.blur),r=f.createVertexArray();if(null===r)throw new Error("Could not create screen triangle");f.bindVertexArray(r);const d=f.createBuffer();f.bindBuffer(f.ARRAY_BUFFER,d),f.bufferData(f.ARRAY_BUFFER,new Float32Array([-1,-1,3,-1,-1,3]),f.STATIC_DRAW);const p=f.createTexture();if(f.bindTexture(f.TEXTURE_2D,p),f.pixelStorei(f.UNPACK_FLIP_Y_WEBGL,!0),f.texImage2D(f.TEXTURE_2D,0,f.RGBA,f.RGBA,f.UNSIGNED_BYTE,m),f.generateMipmap(f.TEXTURE_2D),m.width*m.height>16777216)throw new Error("Image too big, up to 4096 x 4096 supported");const h=o.createSummedTextureWebgl(a.getImageData(m)),_=f.createTexture();f.bindTexture(f.TEXTURE_2D,_),f.texImage2D(f.TEXTURE_2D,0,f.RGBA32UI,m.width,m.height,0,f.RGBA_INTEGER,f.UNSIGNED_INT,h),f.texParameteri(f.TEXTURE_2D,f.TEXTURE_MAG_FILTER,f.NEAREST),f.texParameteri(f.TEXTURE_2D,f.TEXTURE_MIN_FILTER,f.NEAREST),f.texParameteri(f.TEXTURE_2D,f.TEXTURE_WRAP_S,f.CLAMP_TO_EDGE),f.texParameteri(f.TEXTURE_2D,f.TEXTURE_WRAP_T,f.CLAMP_TO_EDGE),f.useProgram(t);const C=f.getAttribLocation(t,"a_position");f.bindBuffer(f.ARRAY_BUFFER,d),f.enableVertexAttribArray(C),f.vertexAttribPointer(C,2,f.FLOAT,!1,0,0);const T=f.getUniformLocation(t,"u_texture");f.uniform1i(T,0),f.activeTexture(f.TEXTURE0),f.bindTexture(f.TEXTURE_2D,p),v=f.getUniformLocation(t,"u_bluramount");const E=f.getUniformLocation(t,"u_summedtexture");f.uniform1i(E,1),f.activeTexture(f.TEXTURE1),f.bindTexture(f.TEXTURE_2D,_);const y=n.createRenderer((()=>{s.value=g.toString(),c.value=e.toLinear(g).toString(),((e,t)=>{const r=Date.now();f.viewport(0,0,f.canvas.width,f.canvas.height),f.clear(f.COLOR_BUFFER_BIT|f.DEPTH_BUFFER_BIT),f.useProgram(e),f.uniform1f(v,g),f.bindVertexArray(t),f.drawArrays(f.TRIANGLES,0,3),f.readPixels(0,0,1,1,f.RGBA,f.UNSIGNED_BYTE,new Uint8Array(4)),x.innerText=Date.now()-r+" ms"})(t,r)}));c.oninput=()=>{g=parseFloat(e.fromLinear(parseFloat(c.value)).toFixed(1)),y()},s.onchange=()=>{g=parseFloat(s.value),y()},y()};m.complete?p():m.onload=p},7787:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.createRenderer=void 0,t.createRenderer=(e,t)=>{let r=!1;return()=>{r||(r=!0,requestAnimationFrame((()=>{e(),r=!1,null==t||t()})))}}},3278:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.createSummedTextureWebgl=void 0;const n=r(9078),o=r(6196);t.createSummedTextureWebgl=e=>{const t=new Array(e.height);for(let r=0;r<e.height;r++){t[r]=new Array(e.width);for(let i=0;i<e.width;i++){const a=4*((e.height-1-r)*e.width+i),l=new Uint32Array(e.data.slice(a,a+4));i>0&&n.add4Mutate(l,t[r][i-1]),r>0&&n.add4Mutate(l,t[r-1][i]),i>0&&r>0&&o.subtract4Mutate(l,t[r-1][i-1]),t[r][i]=l}}const r=new Uint32Array(e.width*e.height*4);for(let n=0,o=e.height-1;o>=0;o--){const i=t[o];for(let t=0;t<e.width;t++,n+=4){const e=i[t];r[n]=e[0],r[n+1]=e[1],r[n+2]=e[2],r[n+3]=e[3]}}return r}},7601:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.makeLogScale=void 0,t.makeLogScale=(e,t)=>{const r=e?Math.log(e):0,n=Math.log(t)-r;return{fromLinear:e=>Math.exp(r+n*e),toLinear:e=>(Math.log(e)-r)/n}}},5350:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.blur=void 0;const n=r(8053);t.blur={version:"300 es",vertex:{head:"\n            in vec2 a_position;\n        ",main:"\n            gl_Position = vec4(a_position, 0.0, 1.0);\n        "},fragment:{dependencies:[n.averageSummed],head:"\n            precision highp float;\n            precision highp usampler2D;\n\n            uniform float u_bluramount;\n            uniform sampler2D u_texture;\n            uniform usampler2D u_summedtexture;\n\n            out vec4 outColor;\n        ",main:"\n            ivec2 fragCoord = ivec2(gl_FragCoord.xy);\n            vec2 tex_size = vec2(textureSize(u_summedtexture, 0));\n\n            vec2 minCoord = clamp(vec2(fragCoord) - u_bluramount, vec2(0.0), tex_size);\n            vec2 maxCoord = clamp(vec2(fragCoord) + u_bluramount, vec2(0.0), tex_size);\n\n            vec4 pixelColour = averageSummed(u_summedtexture, u_texture, minCoord, maxCoord);\n\n            outColor = pixelColour / 255.0;\n        "}}},8053:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.averageSummed=void 0;const n=r(4768),o=r(967);t.averageSummed={dependencies:[n.getPixel,o.getSummedArea],text:"\n        //results in up to 24 texture lookups based on complexity of range, whatever size the image is\n        vec4 averageSummed(const in usampler2D summedTexture, const in sampler2D texture, const in vec2 minCoord, const in vec2 maxCoord) {\n            ivec2 startCell = ivec2(floor(minCoord));\n            ivec2 endCell = ivec2(floor(maxCoord));\n\n            //range contained in one pixel\n            if (startCell == endCell) {\n                return texelFetch(texture, ivec2(startCell), 0);\n            }\n            \n            vec2 size = maxCoord - minCoord;\n            float pixelArea = size.x * size.y;\n            float colourNormaliser = 1.0 / pixelArea;\n            \n            ivec2 innerCell = ivec2(ceil(minCoord));\n            ivec2 innerCell2 = ivec2(floor(maxCoord));\n\n            vec2 minDiff = vec2(innerCell) - minCoord;\n            vec2 maxDiff = maxCoord - vec2(innerCell2);\n\n            vec4 colour = vec4(0.0);\n\n            //TODO: optimise by removing branches\n            \n            //single horizontal strip\n            if (startCell.x == endCell.x) {\n                if (minDiff.y > 0.0) {\n                    colour += getPixel(texture, startCell) * size.x * minDiff.y;\n                }\n\n                if (maxDiff.y > 0.0) {\n                    colour += getPixel(texture, endCell) * size.x * maxDiff.y;\n                }\n\n                colour += getSummedArea(summedTexture, ivec2(startCell.x, innerCell.y)-1, ivec2(startCell.x, innerCell2.y-1)) * size.x;\n                return floor(colour * colourNormaliser);\n            }\n            \n            //single vertical strip\n            if (startCell.y == endCell.y) {\n                if (minDiff.x > 0.0) {\n                    colour += getPixel(texture, startCell) * size.y * minDiff.x;\n                }\n\n                if (maxDiff.x > 0.0) {\n                    colour += getPixel(texture, endCell) * size.y * maxDiff.x;\n                }\n\n                colour += getSummedArea(summedTexture, ivec2(innerCell.x, startCell.y)-1, ivec2(innerCell2.x-1, startCell.y)) * size.y;\n                return floor(colour * colourNormaliser);\n            }\n\n            //corner cells\n            if (minDiff.y > 0.0) {\n                if (minDiff.x > 0.0) {\n                    colour += getPixel(texture, startCell) * minDiff.x * minDiff.y;\n                }\n\n                if (maxDiff.x > 0.0) {\n                    colour += getPixel(texture, ivec2(endCell.x, startCell.y)) * maxDiff.x * minDiff.y;\n                }\n            }\n\n            if (maxDiff.y > 0.0) {\n                if (minDiff.x > 0.0) {\n                    colour += getPixel(texture, ivec2(startCell.x, endCell.y)) * minDiff.x * maxDiff.y;\n                }\n\n                if (maxDiff.x > 0.0) {\n                    colour += getPixel(texture, endCell) * maxDiff.x * maxDiff.y;\n                }\n            }\n\n            //fractional strips\n            if (minDiff.y > 0.0) {\n                colour += getSummedArea(summedTexture, ivec2(innerCell.x, startCell.y)-1, ivec2(innerCell2.x-1, startCell.y)) * minDiff.y;\n            }\n\n            if (minDiff.x > 0.0) {\n                colour += getSummedArea(summedTexture, ivec2(startCell.x, innerCell.y)-1, ivec2(startCell.x, innerCell2.y-1)) * minDiff.x;\n            }\n\n            if (maxDiff.y > 0.0) {\n                colour += getSummedArea(summedTexture, ivec2(innerCell.x, endCell.y)-1, ivec2(innerCell2.x-1, endCell.y)) * maxDiff.y;\n            }\n\n            if (maxDiff.x > 0.0) {\n                colour += getSummedArea(summedTexture, ivec2(endCell.x, innerCell.y)-1, ivec2(endCell.x, innerCell2.y-1)) * maxDiff.x;\n            }\n\n            //inner parts\n            colour += getSummedArea(summedTexture, ivec2(innerCell)-1, ivec2(innerCell2)-1);\n            \n            //now we have an accumulative pixel value that covers the whole area so just average it\n            return floor(colour * colourNormaliser);\n        }\n    "}},4768:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.getPixel=void 0,t.getPixel={text:"\n        vec4 getPixel(const in sampler2D texture, const in ivec2 pos) {\n            return texelFetch(texture, pos, 0) * 255.0;\n        }\n    "}},967:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.getSummedArea=void 0,t.getSummedArea={text:"\n        vec4 getSummedArea(const in usampler2D summedTexture, const in ivec2 minCoord, const in ivec2 maxCoord) {\n            return vec4(texelFetch(summedTexture, maxCoord, 0) - \n                texelFetch(summedTexture, ivec2(minCoord.x, maxCoord.y), 0) + \n                texelFetch(summedTexture, minCoord, 0) -\n                texelFetch(summedTexture, ivec2(maxCoord.x, minCoord.y), 0));\n        }\n    "}},9078:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.add4Mutate=void 0,t.add4Mutate=(e,t)=>(e[0]+=t[0],e[1]+=t[1],e[2]+=t[2],e[3]+=t[3],e)},8372:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.getImageData=void 0,t.getImageData=e=>{const t=document.createElement("canvas");t.width=e.width,t.height=e.height;const r=t.getContext("2d");if(!r)throw new Error("Could not create canvas to extract image data");return r.clearRect(0,0,t.width,t.height),r.drawImage(e,0,0),r.getImageData(0,0,t.width,t.height)}},6196:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.subtract4Mutate=void 0,t.subtract4Mutate=(e,t)=>(e[0]-=t[0],e[1]-=t[1],e[2]-=t[2],e[3]-=t[3],e)},5498:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.buildShaderStage=void 0;const n=r(5941);t.buildShaderStage=(e,t)=>{var r;let o=new Set(e.dependencies||[]);const i=new Set(o);let a;const l=e=>{if(e)for(const t of e)i.has(t)?i.delete(t):a.add(t),i.add(t)};for(;o.size;){a=new Set;for(const e of o){if("snippet"in e){const t=e;l(t.snippet.dependencies),l(t.params)}l(e.dependencies)}o=a}const u=Array.from(i.values()).reverse();return`#version ${t}\n\n        ${null!==(r=e.head)&&void 0!==r?r:""}\n\n        ${u.map((e=>{const t=e;return"snippet"in t?n.defineShaderSnippet(t):t.text})).join("\n")}\n    \n        void main(void) {\n            ${e.main}\n        }\n    `}},3795:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.createProgram=void 0,t.createProgram=(e,t,r)=>{const n=e.createProgram();if(null===n)throw new Error("Could not create program");if(e.attachShader(n,t),e.attachShader(n,r),e.linkProgram(n),!e.getProgramParameter(n,e.LINK_STATUS)){const t=e.getProgramInfoLog(n);throw e.deleteProgram(n),new Error(`Error linking program : ${t}`)}return n}},9864:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.createProgramFromShader=void 0;const n=r(5498),o=r(3795),i=r(5549);t.createProgramFromShader=(e,t)=>{const r=n.buildShaderStage(t.vertex,t.version),a=n.buildShaderStage(t.fragment,t.version),l=i.loadShader(e,r,e.VERTEX_SHADER),u=i.loadShader(e,a,e.FRAGMENT_SHADER);return o.createProgram(e,l,u)}},5941:(e,t,r)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.defineShaderSnippet=void 0;const n=r(2072);t.defineShaderSnippet=e=>{var t,r;const o=[...e.snippet.params,...e.resultObjs.map((e=>Object.assign(Object.assign({},e),{name:`${n.snippetResult}${e.name}`})))].map((e=>`${e.qualifier} ${e.type} ${e.name}`));return`${null!==(t=e.snippet.returnType)&&void 0!==t?t:"void"} ${e.name}(${o.join(",")}) {\n        ${e.snippet.text(...null!==(r=e.params)&&void 0!==r?r:[])}\n    }`}},5549:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.loadShader=void 0,t.loadShader=(e,t,r)=>{const n=e.createShader(r);if(null===n)throw new Error("Could not create shader");if(e.shaderSource(n,t),e.compileShader(n),!e.getShaderParameter(n,e.COMPILE_STATUS)){const r=e.getShaderInfoLog(n);throw e.deleteShader(n),new Error(`Error compiling shader: ${r}\n${t.split("\n").map(((e,t)=>`${t+1}:${e}`)).join("\n")}`)}return n}},2072:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.snippetResult=void 0,t.snippetResult="_result_"}},e=>{e(e.s=851)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,