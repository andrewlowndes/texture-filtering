"use strict";(self.webpackChunksampling_coverage=self.webpackChunksampling_coverage||[]).push([[110],{3776:(e,t,a)=>{const o=a(2086),l=a(5676),u=a(975),d=a(7787),r=a(6374),c=a(6086),M=a(8372),n=document.getElementById("game"),i=document.getElementById("image"),s=document.getElementById("method"),g=document.getElementById("chooseimage"),h=document.getElementById("scale"),f=document.getElementById("xoffset"),m=document.getElementById("yoffset"),v=document.getElementById("scalevalue"),x=document.getElementById("xoffsetvalue"),P=document.getElementById("yoffsetvalue"),p=document.getElementById("timetaken"),w=n.getContext("2d");let y=.33,_=0,b=0;const I=()=>{const e=M.getImageData(i),t=r.createSummedTexture(e),a=d.createRenderer((()=>{h.value=v.value=y.toString(),f.value=x.value=_.toString(),m.value=P.value=b.toString(),((e,t)=>{w.clearRect(0,0,n.width,n.height);const a=w.getImageData(0,0,n.width,n.height);let d;switch(s.value){case"summed":d=(a,o,u,d)=>l.averageSummed(e,t,a,o,u,d);break;case"naive":d=(e,a,l,u)=>o.averageNaive(t,e,a,l,u);break;case"none":d=(e,a)=>u.getPixel(t,e,a);break;default:throw new Error("Unknown method")}const r=Date.now(),M=n.height-1,i=n.width-1;for(let e=Math.max(0,b);e<Math.min(n.height*y+b,n.height);e++)for(let t=Math.max(0,_);t<Math.min(n.width*y+_,n.width);t++){const o=c.clamp((t-_)/y,0,i),l=c.clamp((e-b)/y,0,M),r=c.clamp((t+1-_)/y,0,i),n=c.clamp((e+1-b)/y,0,M);u.setPixel(a,t,e,d(o,l,r,n))}w.putImageData(a,0,0),p.innerText=Date.now()-r+" ms"})(t,e)}));h.oninput=()=>{y=parseFloat(h.value),a()},f.oninput=()=>{_=parseFloat(f.value),a()},m.oninput=()=>{b=parseFloat(m.value),a()},v.onchange=()=>{y=parseFloat(v.value),a()},x.onchange=()=>{_=parseFloat(x.value),a()},P.onchange=()=>{b=parseFloat(P.value),a()},s.oninput=a,a()},E=()=>{i.src=g.value,i.complete?I():i.onload=I};g.onchange=()=>{E()},E()},2086:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.averageNaive=void 0;const o=a(9078),l=a(5062),u=a(8027),d=a(975);t.averageNaive=(e,t,a,r,c)=>{const M=Math.floor(t),n=Math.floor(a),i=Math.floor(r),s=Math.floor(c);if(M==i&&n==s)return l.floor4Mutate(d.getPixel(e,M,n));const g=r-t,h=c-a,f=1/(g*h),m=Math.ceil(t),v=Math.ceil(a),x=Math.floor(r),P=Math.floor(c),p=m-t,w=v-a,y=r-x,_=c-P,b=[0,0,0,0];if(M==i){w&&o.add4Mutate(b,u.scale4Mutate(d.getPixel(e,M,n),g*w)),_&&o.add4Mutate(b,u.scale4Mutate(d.getPixel(e,i,s),g*_));const t=[0,0,0,0];for(let a=v;a<P;a++)o.add4Mutate(t,d.getPixel(e,M,a));return o.add4Mutate(b,u.scale4Mutate(t,g)),l.floor4Mutate(u.scale4Mutate(b,f))}if(n==s){p&&o.add4Mutate(b,u.scale4Mutate(d.getPixel(e,M,n),h*p)),y&&o.add4Mutate(b,u.scale4Mutate(d.getPixel(e,i,s),h*y));const t=[0,0,0,0];for(let a=m;a<x;a++)o.add4Mutate(t,d.getPixel(e,a,n));return o.add4Mutate(b,u.scale4Mutate(t,h)),l.floor4Mutate(u.scale4Mutate(b,f))}if(w&&(p&&o.add4Mutate(b,u.scale4Mutate(d.getPixel(e,M,n),p*w)),y&&o.add4Mutate(b,u.scale4Mutate(d.getPixel(e,i,n),y*w))),_&&(p&&o.add4Mutate(b,u.scale4Mutate(d.getPixel(e,M,s),p*_)),y&&o.add4Mutate(b,u.scale4Mutate(d.getPixel(e,i,s),y*_))),w){const t=[0,0,0,0];for(let a=m;a<x;a++)o.add4Mutate(t,d.getPixel(e,a,n));o.add4Mutate(b,u.scale4Mutate(t,w))}if(p){const t=[0,0,0,0];for(let a=v;a<P;a++)o.add4Mutate(t,d.getPixel(e,M,a));o.add4Mutate(b,u.scale4Mutate(t,p))}if(_){const t=[0,0,0,0];for(let a=m;a<x;a++)o.add4Mutate(t,d.getPixel(e,a,s));o.add4Mutate(b,u.scale4Mutate(t,_))}if(y){const t=[0,0,0,0];for(let a=v;a<P;a++)o.add4Mutate(t,d.getPixel(e,i,a));o.add4Mutate(b,u.scale4Mutate(t,y))}for(let t=m;t<x;t++)for(let a=v;a<P;a++)o.add4Mutate(b,d.getPixel(e,t,a));return l.floor4Mutate(u.scale4Mutate(b,f))}},5676:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.averageSummed=void 0;const o=a(9078),l=a(5062),u=a(8027),d=a(6196),r=a(975),c=(e,t,a)=>{try{const o=t>=0&&a>=0?e[a][t]:[0,0,0,0];if(void 0===o)throw Error("No summed texture value");return o}catch(e){throw console.error(t,a),e}},M=(e,t,a,l,u)=>{const r=[0,0,0,0];try{o.add4Mutate(r,c(e,l,u)),d.subtract4Mutate(r,c(e,t,u)),d.subtract4Mutate(r,c(e,l,a)),o.add4Mutate(r,c(e,t,a))}catch(o){throw console.error([r,c(e,l,u),c(e,t,u),c(e,l,a),c(e,t,a)]),o}return r};t.averageSummed=(e,t,a,d,c,n)=>{const i=Math.floor(a),s=Math.floor(d),g=Math.floor(c),h=Math.floor(n);if(i==g&&s==h)return l.floor4Mutate(r.getPixel(t,i,s));const f=c-a,m=n-d,v=1/(f*m),x=Math.ceil(a),P=Math.ceil(d),p=Math.floor(c),w=Math.floor(n),y=x-a,_=P-d,b=c-p,I=n-w,E=[0,0,0,0];return i==g?(_&&o.add4Mutate(E,u.scale4Mutate(r.getPixel(t,i,s),f*_)),I&&o.add4Mutate(E,u.scale4Mutate(r.getPixel(t,g,h),f*I)),o.add4Mutate(E,u.scale4Mutate(M(e,i-1,P-1,i,w-1),f)),l.floor4Mutate(u.scale4Mutate(E,v))):s==h?(y&&o.add4Mutate(E,u.scale4Mutate(r.getPixel(t,i,s),m*y)),b&&o.add4Mutate(E,u.scale4Mutate(r.getPixel(t,g,h),m*b)),o.add4Mutate(E,u.scale4Mutate(M(e,x-1,s-1,p-1,s),m)),l.floor4Mutate(u.scale4Mutate(E,v))):(_&&(y&&o.add4Mutate(E,u.scale4Mutate(r.getPixel(t,i,s),y*_)),b&&o.add4Mutate(E,u.scale4Mutate(r.getPixel(t,g,s),b*_))),I&&(y&&o.add4Mutate(E,u.scale4Mutate(r.getPixel(t,i,h),y*I)),b&&o.add4Mutate(E,u.scale4Mutate(r.getPixel(t,g,h),b*I))),_&&o.add4Mutate(E,u.scale4Mutate(M(e,x-1,s-1,p-1,s),_)),y&&o.add4Mutate(E,u.scale4Mutate(M(e,i-1,P-1,i,w-1),y)),I&&o.add4Mutate(E,u.scale4Mutate(M(e,x-1,h-1,p-1,h),I)),b&&o.add4Mutate(E,u.scale4Mutate(M(e,g-1,P-1,g,w-1),b)),o.add4Mutate(E,M(e,x-1,P-1,p-1,w-1)),l.floor4Mutate(u.scale4Mutate(E,v)))}},975:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setPixel=t.getPixel=void 0,t.getPixel=(e,t,a)=>{const o=4*(e.width*Math.floor(a)+Math.floor(t));return e.data.slice(o,o+4)},t.setPixel=(e,t,a,o)=>{e.data.set(o,4*(Math.floor(a)*e.width+Math.floor(t)))}},7787:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.createRenderer=void 0,t.createRenderer=(e,t)=>{let a=!1;return()=>{a||(a=!0,requestAnimationFrame((()=>{e(),a=!1,null==t||t()})))}}},6374:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.createSummedTexture=void 0;const o=a(9078),l=a(6196);t.createSummedTexture=e=>{const t=new Array(e.height);for(let a=0,u=0;u<e.height;u++){t[u]=new Array(e.width);for(let d=0;d<e.width;d++,a+=4){const r=new Uint32Array(e.data.slice(a,a+4));d>0&&o.add4Mutate(r,t[u][d-1]),u>0&&o.add4Mutate(r,t[u-1][d]),d>0&&u>0&&l.subtract4Mutate(r,t[u-1][d-1]),t[u][d]=r}}return t}},9078:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.add4Mutate=void 0,t.add4Mutate=(e,t)=>(e[0]+=t[0],e[1]+=t[1],e[2]+=t[2],e[3]+=t[3],e)},6086:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.clamp=void 0,t.clamp=(e,t,a)=>Math.max(Math.min(e,a),t)},5062:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.floor4Mutate=void 0,t.floor4Mutate=e=>(e[0]=Math.floor(e[0]),e[1]=Math.floor(e[1]),e[2]=Math.floor(e[2]),e[3]=Math.floor(e[3]),e)},8372:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.getImageData=void 0,t.getImageData=e=>{const t=document.createElement("canvas");t.width=e.width,t.height=e.height;const a=t.getContext("2d");if(!a)throw new Error("Could not create canvas to extract image data");return a.clearRect(0,0,t.width,t.height),a.drawImage(e,0,0),a.getImageData(0,0,t.width,t.height)}},8027:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.scale4Mutate=void 0,t.scale4Mutate=(e,t)=>(e[0]*=t,e[1]*=t,e[2]*=t,e[3]*=t,e)},6196:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.subtract4Mutate=void 0,t.subtract4Mutate=(e,t)=>(e[0]-=t[0],e[1]-=t[1],e[2]-=t[2],e[3]-=t[3],e)}},e=>{e(e.s=3776)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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MEIsTUFBTThDLEVBQUUsSUFDYkEsSSxhQ1BYckQsT0FBT0MsZUFBZUMsRUFBUyxhQUFjLENBQUV6QyxPQUFPLElBQ3REeUMsRUFBUTlDLGtCQUFlLEVBYXZCOEMsRUFBUTlDLGFBWmNqQixJQUNsQixNQUFNcUgsRUFBY3ZILFNBQVN3SCxjQUFjLFVBQzNDRCxFQUFZNUYsTUFBUXpCLEVBQU15QixNQUMxQjRGLEVBQVkzRixPQUFTMUIsRUFBTTBCLE9BQzNCLE1BQU02RixFQUFnQkYsRUFBWTFHLFdBQVcsTUFDN0MsSUFBSzRHLEVBQ0QsTUFBTSxJQUFJbkYsTUFBTSxpREFJcEIsT0FGQW1GLEVBQWMvRixVQUFVLEVBQUcsRUFBRzZGLEVBQVk1RixNQUFPNEYsRUFBWTNGLFFBQzdENkYsRUFBY2xFLFVBQVVyRCxFQUFPLEVBQUcsR0FDM0J1SCxFQUFjdEcsYUFBYSxFQUFHLEVBQUdvRyxFQUFZNUYsTUFBTzRGLEVBQVkzRixVLGFDWjNFbUMsT0FBT0MsZUFBZUMsRUFBUyxhQUFjLENBQUV6QyxPQUFPLElBQ3REeUMsRUFBUXNCLGtCQUFlLEVBUXZCdEIsRUFBUXNCLGFBUGEsQ0FBQzZCLEVBQUdNLEtBQ3JCTixFQUFFLElBQU1NLEVBQ1JOLEVBQUUsSUFBTU0sRUFDUk4sRUFBRSxJQUFNTSxFQUNSTixFQUFFLElBQU1NLEVBQ0ROLEksYUNQWHJELE9BQU9DLGVBQWVDLEVBQVMsYUFBYyxDQUFFekMsT0FBTyxJQUN0RHlDLEVBQVFzQyxxQkFBa0IsRUFRMUJ0QyxFQUFRc0MsZ0JBUGdCLENBQUNhLEVBQUdDLEtBQ3hCRCxFQUFFLElBQU1DLEVBQUUsR0FDVkQsRUFBRSxJQUFNQyxFQUFFLEdBQ1ZELEVBQUUsSUFBTUMsRUFBRSxHQUNWRCxFQUFFLElBQU1DLEVBQUUsR0FDSEQsSyIsInNvdXJjZXMiOlsid2VicGFjazovL3NhbXBsaW5nLWNvdmVyYWdlLy4vc3JjL2RlbW9zL3NhbXBsZVN1bW1pbmdDcHUudHMiLCJ3ZWJwYWNrOi8vc2FtcGxpbmctY292ZXJhZ2UvLi9zcmMvZHJhdy9hdmVyYWdlTmFpdmUudHMiLCJ3ZWJwYWNrOi8vc2FtcGxpbmctY292ZXJhZ2UvLi9zcmMvZHJhdy9hdmVyYWdlU3VtbWVkLnRzIiwid2VicGFjazovL3NhbXBsaW5nLWNvdmVyYWdlLy4vc3JjL2RyYXcvY2FudmFzLnRzIiwid2VicGFjazovL3NhbXBsaW5nLWNvdmVyYWdlLy4vc3JjL2RyYXcvY3JlYXRlUmVuZGVyZXIudHMiLCJ3ZWJwYWNrOi8vc2FtcGxpbmctY292ZXJhZ2UvLi9zcmMvZHJhdy9jcmVhdGVTdW1tZWRUZXh0dXJlLnRzIiwid2VicGFjazovL3NhbXBsaW5nLWNvdmVyYWdlLy4vc3JjL3V0aWxzL2FkZDRNdXRhdGUudHMiLCJ3ZWJwYWNrOi8vc2FtcGxpbmctY292ZXJhZ2UvLi9zcmMvdXRpbHMvY2xhbXAudHMiLCJ3ZWJwYWNrOi8vc2FtcGxpbmctY292ZXJhZ2UvLi9zcmMvdXRpbHMvZmxvb3I0TXV0YXRlLnRzIiwid2VicGFjazovL3NhbXBsaW5nLWNvdmVyYWdlLy4vc3JjL3V0aWxzL2dldEltYWdlRGF0YS50cyIsIndlYnBhY2s6Ly9zYW1wbGluZy1jb3ZlcmFnZS8uL3NyYy91dGlscy9zY2FsZTRNdXRhdGUudHMiLCJ3ZWJwYWNrOi8vc2FtcGxpbmctY292ZXJhZ2UvLi9zcmMvdXRpbHMvc3VidHJhY3Q0TXV0YXRlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IGF2ZXJhZ2VOYWl2ZV8xID0gcmVxdWlyZShcIi4uL2RyYXcvYXZlcmFnZU5haXZlXCIpO1xyXG5jb25zdCBhdmVyYWdlU3VtbWVkXzEgPSByZXF1aXJlKFwiLi4vZHJhdy9hdmVyYWdlU3VtbWVkXCIpO1xyXG5jb25zdCBjYW52YXNfMSA9IHJlcXVpcmUoXCIuLi9kcmF3L2NhbnZhc1wiKTtcclxuY29uc3QgY3JlYXRlUmVuZGVyZXJfMSA9IHJlcXVpcmUoXCIuLi9kcmF3L2NyZWF0ZVJlbmRlcmVyXCIpO1xyXG5jb25zdCBjcmVhdGVTdW1tZWRUZXh0dXJlXzEgPSByZXF1aXJlKFwiLi4vZHJhdy9jcmVhdGVTdW1tZWRUZXh0dXJlXCIpO1xyXG5jb25zdCBjbGFtcF8xID0gcmVxdWlyZShcIi4uL3V0aWxzL2NsYW1wXCIpO1xyXG5jb25zdCBnZXRJbWFnZURhdGFfMSA9IHJlcXVpcmUoXCIuLi91dGlscy9nZXRJbWFnZURhdGFcIik7XHJcbmNvbnN0IGdhbWUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImdhbWVcIik7XHJcbmNvbnN0IGltYWdlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJpbWFnZVwiKTtcclxuY29uc3QgbWV0aG9kID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJtZXRob2RcIik7XHJcbmNvbnN0IGltYWdlSW5wdXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNob29zZWltYWdlXCIpO1xyXG5jb25zdCBzY2FsZUlucHV0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzY2FsZVwiKTtcclxuY29uc3QgeG9mZnNldElucHV0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ4b2Zmc2V0XCIpO1xyXG5jb25zdCB5b2Zmc2V0SW5wdXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInlvZmZzZXRcIik7XHJcbmNvbnN0IHNjYWxlVmFsdWVJbnB1dCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic2NhbGV2YWx1ZVwiKTtcclxuY29uc3QgeG9mZnNldFZhbHVlSW5wdXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInhvZmZzZXR2YWx1ZVwiKTtcclxuY29uc3QgeW9mZnNldFZhbHVlSW5wdXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInlvZmZzZXR2YWx1ZVwiKTtcclxuY29uc3QgdGltZXRha2VuID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ0aW1ldGFrZW5cIik7XHJcbmNvbnN0IGcgPSBnYW1lLmdldENvbnRleHQoXCIyZFwiKTtcclxubGV0IHNjYWxlID0gMC4zMztcclxubGV0IHhvZmZzZXQgPSAwO1xyXG5sZXQgeW9mZnNldCA9IDA7XHJcbmNvbnN0IGRyYXdJbWFnZSA9IChzdW1tZWRUZXh0dXJlLCBpbWFnZURhdGEpID0+IHtcclxuICAgIC8vbm93IHJlbmRlciBhIHNjYWxlZCBkb3duIHNpemUgb2YgdGhlIHRleHR1cmUgb24gdGhlIGNhbnZhcyAocGVyLXBpeGVsKSB1c2luZyB0aGUgc2FtcGxlIHN1bW1pbmcgYXBwcm9hY2hcclxuICAgIGcuY2xlYXJSZWN0KDAsIDAsIGdhbWUud2lkdGgsIGdhbWUuaGVpZ2h0KTtcclxuICAgIGNvbnN0IGNhbnZhc0ltYWdlID0gZy5nZXRJbWFnZURhdGEoMCwgMCwgZ2FtZS53aWR0aCwgZ2FtZS5oZWlnaHQpO1xyXG4gICAgbGV0IHBpeGVsRnVuYztcclxuICAgIHN3aXRjaCAobWV0aG9kLnZhbHVlKSB7XHJcbiAgICAgICAgY2FzZSAnc3VtbWVkJzpcclxuICAgICAgICAgICAgcGl4ZWxGdW5jID0gKHgsIHksIHgyLCB5MikgPT4gYXZlcmFnZVN1bW1lZF8xLmF2ZXJhZ2VTdW1tZWQoc3VtbWVkVGV4dHVyZSwgaW1hZ2VEYXRhLCB4LCB5LCB4MiwgeTIpO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlICduYWl2ZSc6XHJcbiAgICAgICAgICAgIHBpeGVsRnVuYyA9ICh4LCB5LCB4MiwgeTIpID0+IGF2ZXJhZ2VOYWl2ZV8xLmF2ZXJhZ2VOYWl2ZShpbWFnZURhdGEsIHgsIHksIHgyLCB5Mik7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgJ25vbmUnOlxyXG4gICAgICAgICAgICBwaXhlbEZ1bmMgPSAoeCwgeSkgPT4gY2FudmFzXzEuZ2V0UGl4ZWwoaW1hZ2VEYXRhLCB4LCB5KTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIG1ldGhvZCcpO1xyXG4gICAgfVxyXG4gICAgY29uc3Qgc3RhcnRUaW1lID0gRGF0ZS5ub3coKTtcclxuICAgIGNvbnN0IG1heFkgPSBnYW1lLmhlaWdodCAtIDE7XHJcbiAgICBjb25zdCBtYXhYID0gZ2FtZS53aWR0aCAtIDE7XHJcbiAgICBmb3IgKGxldCB5ID0gTWF0aC5tYXgoMCwgeW9mZnNldCk7IHkgPCBNYXRoLm1pbihnYW1lLmhlaWdodCAqIHNjYWxlICsgeW9mZnNldCwgZ2FtZS5oZWlnaHQpOyB5KyspIHtcclxuICAgICAgICBmb3IgKGxldCB4ID0gTWF0aC5tYXgoMCwgeG9mZnNldCk7IHggPCBNYXRoLm1pbihnYW1lLndpZHRoICogc2NhbGUgKyB4b2Zmc2V0LCBnYW1lLndpZHRoKTsgeCsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHBsb3RYID0gY2xhbXBfMS5jbGFtcCgoeCAtIHhvZmZzZXQpIC8gc2NhbGUsIDAsIG1heFgpO1xyXG4gICAgICAgICAgICBjb25zdCBwbG90WSA9IGNsYW1wXzEuY2xhbXAoKHkgLSB5b2Zmc2V0KSAvIHNjYWxlLCAwLCBtYXhZKTtcclxuICAgICAgICAgICAgY29uc3QgcGxvdFgyID0gY2xhbXBfMS5jbGFtcCgoeCArIDEgLSB4b2Zmc2V0KSAvIHNjYWxlLCAwLCBtYXhYKTtcclxuICAgICAgICAgICAgY29uc3QgcGxvdFkyID0gY2xhbXBfMS5jbGFtcCgoeSArIDEgLSB5b2Zmc2V0KSAvIHNjYWxlLCAwLCBtYXhZKTtcclxuICAgICAgICAgICAgY2FudmFzXzEuc2V0UGl4ZWwoY2FudmFzSW1hZ2UsIHgsIHksIHBpeGVsRnVuYyhwbG90WCwgcGxvdFksIHBsb3RYMiwgcGxvdFkyKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZy5wdXRJbWFnZURhdGEoY2FudmFzSW1hZ2UsIDAsIDApO1xyXG4gICAgdGltZXRha2VuLmlubmVyVGV4dCA9IGAkeyhEYXRlLm5vdygpIC0gc3RhcnRUaW1lKX0gbXNgO1xyXG59O1xyXG5jb25zdCBzdGFydCA9ICgpID0+IHtcclxuICAgIGNvbnN0IGltYWdlRGF0YSA9IGdldEltYWdlRGF0YV8xLmdldEltYWdlRGF0YShpbWFnZSk7XHJcbiAgICBjb25zdCBzdW1tZWRUZXh0dXJlID0gY3JlYXRlU3VtbWVkVGV4dHVyZV8xLmNyZWF0ZVN1bW1lZFRleHR1cmUoaW1hZ2VEYXRhKTtcclxuICAgIGNvbnN0IGRyYXcgPSBjcmVhdGVSZW5kZXJlcl8xLmNyZWF0ZVJlbmRlcmVyKCgpID0+IHtcclxuICAgICAgICBzY2FsZUlucHV0LnZhbHVlID0gc2NhbGVWYWx1ZUlucHV0LnZhbHVlID0gc2NhbGUudG9TdHJpbmcoKTtcclxuICAgICAgICB4b2Zmc2V0SW5wdXQudmFsdWUgPSB4b2Zmc2V0VmFsdWVJbnB1dC52YWx1ZSA9IHhvZmZzZXQudG9TdHJpbmcoKTtcclxuICAgICAgICB5b2Zmc2V0SW5wdXQudmFsdWUgPSB5b2Zmc2V0VmFsdWVJbnB1dC52YWx1ZSA9IHlvZmZzZXQudG9TdHJpbmcoKTtcclxuICAgICAgICBkcmF3SW1hZ2Uoc3VtbWVkVGV4dHVyZSwgaW1hZ2VEYXRhKTtcclxuICAgIH0pO1xyXG4gICAgc2NhbGVJbnB1dC5vbmlucHV0ID0gKCkgPT4ge1xyXG4gICAgICAgIHNjYWxlID0gcGFyc2VGbG9hdChzY2FsZUlucHV0LnZhbHVlKTtcclxuICAgICAgICBkcmF3KCk7XHJcbiAgICB9O1xyXG4gICAgeG9mZnNldElucHV0Lm9uaW5wdXQgPSAoKSA9PiB7XHJcbiAgICAgICAgeG9mZnNldCA9IHBhcnNlRmxvYXQoeG9mZnNldElucHV0LnZhbHVlKTtcclxuICAgICAgICBkcmF3KCk7XHJcbiAgICB9O1xyXG4gICAgeW9mZnNldElucHV0Lm9uaW5wdXQgPSAoKSA9PiB7XHJcbiAgICAgICAgeW9mZnNldCA9IHBhcnNlRmxvYXQoeW9mZnNldElucHV0LnZhbHVlKTtcclxuICAgICAgICBkcmF3KCk7XHJcbiAgICB9O1xyXG4gICAgc2NhbGVWYWx1ZUlucHV0Lm9uY2hhbmdlID0gKCkgPT4ge1xyXG4gICAgICAgIHNjYWxlID0gcGFyc2VGbG9hdChzY2FsZVZhbHVlSW5wdXQudmFsdWUpO1xyXG4gICAgICAgIGRyYXcoKTtcclxuICAgIH07XHJcbiAgICB4b2Zmc2V0VmFsdWVJbnB1dC5vbmNoYW5nZSA9ICgpID0+IHtcclxuICAgICAgICB4b2Zmc2V0ID0gcGFyc2VGbG9hdCh4b2Zmc2V0VmFsdWVJbnB1dC52YWx1ZSk7XHJcbiAgICAgICAgZHJhdygpO1xyXG4gICAgfTtcclxuICAgIHlvZmZzZXRWYWx1ZUlucHV0Lm9uY2hhbmdlID0gKCkgPT4ge1xyXG4gICAgICAgIHlvZmZzZXQgPSBwYXJzZUZsb2F0KHlvZmZzZXRWYWx1ZUlucHV0LnZhbHVlKTtcclxuICAgICAgICBkcmF3KCk7XHJcbiAgICB9O1xyXG4gICAgbWV0aG9kLm9uaW5wdXQgPSBkcmF3O1xyXG4gICAgZHJhdygpO1xyXG59O1xyXG5jb25zdCBsb2FkSW1hZ2UgPSAoKSA9PiB7XHJcbiAgICBpbWFnZS5zcmMgPSBpbWFnZUlucHV0LnZhbHVlO1xyXG4gICAgaWYgKGltYWdlLmNvbXBsZXRlKSB7XHJcbiAgICAgICAgc3RhcnQoKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGltYWdlLm9ubG9hZCA9IHN0YXJ0O1xyXG4gICAgfVxyXG59O1xyXG5pbWFnZUlucHV0Lm9uY2hhbmdlID0gKCkgPT4ge1xyXG4gICAgbG9hZEltYWdlKCk7XHJcbn07XHJcbmxvYWRJbWFnZSgpO1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLmF2ZXJhZ2VOYWl2ZSA9IHZvaWQgMDtcclxuY29uc3QgYWRkNE11dGF0ZV8xID0gcmVxdWlyZShcIi4uL3V0aWxzL2FkZDRNdXRhdGVcIik7XHJcbmNvbnN0IGZsb29yNE11dGF0ZV8xID0gcmVxdWlyZShcIi4uL3V0aWxzL2Zsb29yNE11dGF0ZVwiKTtcclxuY29uc3Qgc2NhbGU0TXV0YXRlXzEgPSByZXF1aXJlKFwiLi4vdXRpbHMvc2NhbGU0TXV0YXRlXCIpO1xyXG5jb25zdCBjYW52YXNfMSA9IHJlcXVpcmUoXCIuL2NhbnZhc1wiKTtcclxuY29uc3QgYXZlcmFnZU5haXZlID0gKGltYWdlRGF0YSwgeCwgeSwgeDIsIHkyKSA9PiB7XHJcbiAgICBjb25zdCBzdGFydENlbGxYID0gTWF0aC5mbG9vcih4KTtcclxuICAgIGNvbnN0IHN0YXJ0Q2VsbFkgPSBNYXRoLmZsb29yKHkpO1xyXG4gICAgY29uc3QgZW5kQ2VsbFggPSBNYXRoLmZsb29yKHgyKTtcclxuICAgIGNvbnN0IGVuZENlbGxZID0gTWF0aC5mbG9vcih5Mik7XHJcbiAgICAvL3JhbmdlIGNvbnRhaW5lZCBpbiBvbmUgcGl4ZWxcclxuICAgIGlmIChzdGFydENlbGxYID09IGVuZENlbGxYICYmIHN0YXJ0Q2VsbFkgPT0gZW5kQ2VsbFkpIHtcclxuICAgICAgICByZXR1cm4gZmxvb3I0TXV0YXRlXzEuZmxvb3I0TXV0YXRlKGNhbnZhc18xLmdldFBpeGVsKGltYWdlRGF0YSwgc3RhcnRDZWxsWCwgc3RhcnRDZWxsWSkpO1xyXG4gICAgfVxyXG4gICAgY29uc3Qgd2lkdGggPSB4MiAtIHg7XHJcbiAgICBjb25zdCBoZWlnaHQgPSB5MiAtIHk7XHJcbiAgICBjb25zdCBwaXhlbEFyZWEgPSB3aWR0aCAqIGhlaWdodDtcclxuICAgIGNvbnN0IGNvbG91ck5vcm1hbGlzZXIgPSAxIC8gcGl4ZWxBcmVhO1xyXG4gICAgY29uc3QgaW5uZXJDZWxsWCA9IE1hdGguY2VpbCh4KTtcclxuICAgIGNvbnN0IGlubmVyQ2VsbFkgPSBNYXRoLmNlaWwoeSk7XHJcbiAgICBjb25zdCBpbm5lckNlbGxYMiA9IE1hdGguZmxvb3IoeDIpO1xyXG4gICAgY29uc3QgaW5uZXJDZWxsWTIgPSBNYXRoLmZsb29yKHkyKTtcclxuICAgIGNvbnN0IGxlZnREaWZmID0gaW5uZXJDZWxsWCAtIHg7XHJcbiAgICBjb25zdCB0b3BEaWZmID0gaW5uZXJDZWxsWSAtIHk7XHJcbiAgICBjb25zdCByaWdodERpZmYgPSB4MiAtIGlubmVyQ2VsbFgyO1xyXG4gICAgY29uc3QgYm90dG9tRGlmZiA9IHkyIC0gaW5uZXJDZWxsWTI7XHJcbiAgICBjb25zdCBjb2xvdXIgPSBbMCwgMCwgMCwgMF07XHJcbiAgICAvL3BlcmhhcHMgd2Ugc2hvdWxkIGJlIGJsZW5kaW5nIGFub3RoZXIgd2F5IChhbHBoYSkgaW5zdGVhZCBvZiBhZGRpbmc/XHJcbiAgICAvL3NpbmdsZSBob3Jpem9udGFsIHN0cmlwXHJcbiAgICBpZiAoc3RhcnRDZWxsWCA9PSBlbmRDZWxsWCkge1xyXG4gICAgICAgIGlmICh0b3BEaWZmKSB7XHJcbiAgICAgICAgICAgIGFkZDRNdXRhdGVfMS5hZGQ0TXV0YXRlKGNvbG91ciwgc2NhbGU0TXV0YXRlXzEuc2NhbGU0TXV0YXRlKGNhbnZhc18xLmdldFBpeGVsKGltYWdlRGF0YSwgc3RhcnRDZWxsWCwgc3RhcnRDZWxsWSksIHdpZHRoICogdG9wRGlmZikpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoYm90dG9tRGlmZikge1xyXG4gICAgICAgICAgICBhZGQ0TXV0YXRlXzEuYWRkNE11dGF0ZShjb2xvdXIsIHNjYWxlNE11dGF0ZV8xLnNjYWxlNE11dGF0ZShjYW52YXNfMS5nZXRQaXhlbChpbWFnZURhdGEsIGVuZENlbGxYLCBlbmRDZWxsWSksIHdpZHRoICogYm90dG9tRGlmZikpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBtaWRDb2xvdXIgPSBbMCwgMCwgMCwgMF07XHJcbiAgICAgICAgZm9yIChsZXQgaiA9IGlubmVyQ2VsbFk7IGogPCBpbm5lckNlbGxZMjsgaisrKSB7XHJcbiAgICAgICAgICAgIGFkZDRNdXRhdGVfMS5hZGQ0TXV0YXRlKG1pZENvbG91ciwgY2FudmFzXzEuZ2V0UGl4ZWwoaW1hZ2VEYXRhLCBzdGFydENlbGxYLCBqKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGFkZDRNdXRhdGVfMS5hZGQ0TXV0YXRlKGNvbG91ciwgc2NhbGU0TXV0YXRlXzEuc2NhbGU0TXV0YXRlKG1pZENvbG91ciwgd2lkdGgpKTtcclxuICAgICAgICByZXR1cm4gZmxvb3I0TXV0YXRlXzEuZmxvb3I0TXV0YXRlKHNjYWxlNE11dGF0ZV8xLnNjYWxlNE11dGF0ZShjb2xvdXIsIGNvbG91ck5vcm1hbGlzZXIpKTtcclxuICAgIH1cclxuICAgIC8vc2luZ2xlIHZlcnRpY2FsIHN0cmlwXHJcbiAgICBpZiAoc3RhcnRDZWxsWSA9PSBlbmRDZWxsWSkge1xyXG4gICAgICAgIGlmIChsZWZ0RGlmZikge1xyXG4gICAgICAgICAgICBhZGQ0TXV0YXRlXzEuYWRkNE11dGF0ZShjb2xvdXIsIHNjYWxlNE11dGF0ZV8xLnNjYWxlNE11dGF0ZShjYW52YXNfMS5nZXRQaXhlbChpbWFnZURhdGEsIHN0YXJ0Q2VsbFgsIHN0YXJ0Q2VsbFkpLCBoZWlnaHQgKiBsZWZ0RGlmZikpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAocmlnaHREaWZmKSB7XHJcbiAgICAgICAgICAgIGFkZDRNdXRhdGVfMS5hZGQ0TXV0YXRlKGNvbG91ciwgc2NhbGU0TXV0YXRlXzEuc2NhbGU0TXV0YXRlKGNhbnZhc18xLmdldFBpeGVsKGltYWdlRGF0YSwgZW5kQ2VsbFgsIGVuZENlbGxZKSwgaGVpZ2h0ICogcmlnaHREaWZmKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IG1pZENvbG91ciA9IFswLCAwLCAwLCAwXTtcclxuICAgICAgICBmb3IgKGxldCBpID0gaW5uZXJDZWxsWDsgaSA8IGlubmVyQ2VsbFgyOyBpKyspIHtcclxuICAgICAgICAgICAgYWRkNE11dGF0ZV8xLmFkZDRNdXRhdGUobWlkQ29sb3VyLCBjYW52YXNfMS5nZXRQaXhlbChpbWFnZURhdGEsIGksIHN0YXJ0Q2VsbFkpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgYWRkNE11dGF0ZV8xLmFkZDRNdXRhdGUoY29sb3VyLCBzY2FsZTRNdXRhdGVfMS5zY2FsZTRNdXRhdGUobWlkQ29sb3VyLCBoZWlnaHQpKTtcclxuICAgICAgICByZXR1cm4gZmxvb3I0TXV0YXRlXzEuZmxvb3I0TXV0YXRlKHNjYWxlNE11dGF0ZV8xLnNjYWxlNE11dGF0ZShjb2xvdXIsIGNvbG91ck5vcm1hbGlzZXIpKTtcclxuICAgIH1cclxuICAgIC8vY29ybmVyIGNlbGxzXHJcbiAgICBpZiAodG9wRGlmZikge1xyXG4gICAgICAgIGlmIChsZWZ0RGlmZikge1xyXG4gICAgICAgICAgICBhZGQ0TXV0YXRlXzEuYWRkNE11dGF0ZShjb2xvdXIsIHNjYWxlNE11dGF0ZV8xLnNjYWxlNE11dGF0ZShjYW52YXNfMS5nZXRQaXhlbChpbWFnZURhdGEsIHN0YXJ0Q2VsbFgsIHN0YXJ0Q2VsbFkpLCBsZWZ0RGlmZiAqIHRvcERpZmYpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHJpZ2h0RGlmZikge1xyXG4gICAgICAgICAgICBhZGQ0TXV0YXRlXzEuYWRkNE11dGF0ZShjb2xvdXIsIHNjYWxlNE11dGF0ZV8xLnNjYWxlNE11dGF0ZShjYW52YXNfMS5nZXRQaXhlbChpbWFnZURhdGEsIGVuZENlbGxYLCBzdGFydENlbGxZKSwgcmlnaHREaWZmICogdG9wRGlmZikpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGlmIChib3R0b21EaWZmKSB7XHJcbiAgICAgICAgaWYgKGxlZnREaWZmKSB7XHJcbiAgICAgICAgICAgIGFkZDRNdXRhdGVfMS5hZGQ0TXV0YXRlKGNvbG91ciwgc2NhbGU0TXV0YXRlXzEuc2NhbGU0TXV0YXRlKGNhbnZhc18xLmdldFBpeGVsKGltYWdlRGF0YSwgc3RhcnRDZWxsWCwgZW5kQ2VsbFkpLCBsZWZ0RGlmZiAqIGJvdHRvbURpZmYpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHJpZ2h0RGlmZikge1xyXG4gICAgICAgICAgICBhZGQ0TXV0YXRlXzEuYWRkNE11dGF0ZShjb2xvdXIsIHNjYWxlNE11dGF0ZV8xLnNjYWxlNE11dGF0ZShjYW52YXNfMS5nZXRQaXhlbChpbWFnZURhdGEsIGVuZENlbGxYLCBlbmRDZWxsWSksIHJpZ2h0RGlmZiAqIGJvdHRvbURpZmYpKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvL2ZyYWN0aW9uYWwgc3RyaXBzXHJcbiAgICBpZiAodG9wRGlmZikge1xyXG4gICAgICAgIGNvbnN0IHRvcENvbG91ciA9IFswLCAwLCAwLCAwXTtcclxuICAgICAgICBmb3IgKGxldCBpID0gaW5uZXJDZWxsWDsgaSA8IGlubmVyQ2VsbFgyOyBpKyspIHtcclxuICAgICAgICAgICAgYWRkNE11dGF0ZV8xLmFkZDRNdXRhdGUodG9wQ29sb3VyLCBjYW52YXNfMS5nZXRQaXhlbChpbWFnZURhdGEsIGksIHN0YXJ0Q2VsbFkpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgYWRkNE11dGF0ZV8xLmFkZDRNdXRhdGUoY29sb3VyLCBzY2FsZTRNdXRhdGVfMS5zY2FsZTRNdXRhdGUodG9wQ29sb3VyLCB0b3BEaWZmKSk7XHJcbiAgICB9XHJcbiAgICBpZiAobGVmdERpZmYpIHtcclxuICAgICAgICBjb25zdCBsZWZ0Q29sb3VyID0gWzAsIDAsIDAsIDBdO1xyXG4gICAgICAgIGZvciAobGV0IGogPSBpbm5lckNlbGxZOyBqIDwgaW5uZXJDZWxsWTI7IGorKykge1xyXG4gICAgICAgICAgICBhZGQ0TXV0YXRlXzEuYWRkNE11dGF0ZShsZWZ0Q29sb3VyLCBjYW52YXNfMS5nZXRQaXhlbChpbWFnZURhdGEsIHN0YXJ0Q2VsbFgsIGopKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgYWRkNE11dGF0ZV8xLmFkZDRNdXRhdGUoY29sb3VyLCBzY2FsZTRNdXRhdGVfMS5zY2FsZTRNdXRhdGUobGVmdENvbG91ciwgbGVmdERpZmYpKTtcclxuICAgIH1cclxuICAgIGlmIChib3R0b21EaWZmKSB7XHJcbiAgICAgICAgY29uc3QgYm90dG9tQ29sb3VyID0gWzAsIDAsIDAsIDBdO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSBpbm5lckNlbGxYOyBpIDwgaW5uZXJDZWxsWDI7IGkrKykge1xyXG4gICAgICAgICAgICBhZGQ0TXV0YXRlXzEuYWRkNE11dGF0ZShib3R0b21Db2xvdXIsIGNhbnZhc18xLmdldFBpeGVsKGltYWdlRGF0YSwgaSwgZW5kQ2VsbFkpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgYWRkNE11dGF0ZV8xLmFkZDRNdXRhdGUoY29sb3VyLCBzY2FsZTRNdXRhdGVfMS5zY2FsZTRNdXRhdGUoYm90dG9tQ29sb3VyLCBib3R0b21EaWZmKSk7XHJcbiAgICB9XHJcbiAgICBpZiAocmlnaHREaWZmKSB7XHJcbiAgICAgICAgY29uc3QgcmlnaHRDb2xvdXIgPSBbMCwgMCwgMCwgMF07XHJcbiAgICAgICAgZm9yIChsZXQgaiA9IGlubmVyQ2VsbFk7IGogPCBpbm5lckNlbGxZMjsgaisrKSB7XHJcbiAgICAgICAgICAgIGFkZDRNdXRhdGVfMS5hZGQ0TXV0YXRlKHJpZ2h0Q29sb3VyLCBjYW52YXNfMS5nZXRQaXhlbChpbWFnZURhdGEsIGVuZENlbGxYLCBqKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGFkZDRNdXRhdGVfMS5hZGQ0TXV0YXRlKGNvbG91ciwgc2NhbGU0TXV0YXRlXzEuc2NhbGU0TXV0YXRlKHJpZ2h0Q29sb3VyLCByaWdodERpZmYpKTtcclxuICAgIH1cclxuICAgIC8vaW5uZXIgcGFydHNcclxuICAgIGZvciAobGV0IGkgPSBpbm5lckNlbGxYOyBpIDwgaW5uZXJDZWxsWDI7IGkrKykge1xyXG4gICAgICAgIGZvciAobGV0IGogPSBpbm5lckNlbGxZOyBqIDwgaW5uZXJDZWxsWTI7IGorKykge1xyXG4gICAgICAgICAgICBhZGQ0TXV0YXRlXzEuYWRkNE11dGF0ZShjb2xvdXIsIGNhbnZhc18xLmdldFBpeGVsKGltYWdlRGF0YSwgaSwgaikpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8vbm93IHdlIGhhdmUgYW4gYWNjdW11bGF0aXZlIHBpeGVsIHZhbHVlIHRoYXQgY292ZXJzIHRoZSB3aG9sZSBhcmVhIHNvIGp1c3QgYXZlcmFnZSBpdFxyXG4gICAgcmV0dXJuIGZsb29yNE11dGF0ZV8xLmZsb29yNE11dGF0ZShzY2FsZTRNdXRhdGVfMS5zY2FsZTRNdXRhdGUoY29sb3VyLCBjb2xvdXJOb3JtYWxpc2VyKSk7XHJcbn07XHJcbmV4cG9ydHMuYXZlcmFnZU5haXZlID0gYXZlcmFnZU5haXZlO1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLmF2ZXJhZ2VTdW1tZWQgPSB2b2lkIDA7XHJcbmNvbnN0IGFkZDRNdXRhdGVfMSA9IHJlcXVpcmUoXCIuLi91dGlscy9hZGQ0TXV0YXRlXCIpO1xyXG5jb25zdCBmbG9vcjRNdXRhdGVfMSA9IHJlcXVpcmUoXCIuLi91dGlscy9mbG9vcjRNdXRhdGVcIik7XHJcbmNvbnN0IHNjYWxlNE11dGF0ZV8xID0gcmVxdWlyZShcIi4uL3V0aWxzL3NjYWxlNE11dGF0ZVwiKTtcclxuY29uc3Qgc3VidHJhY3Q0TXV0YXRlXzEgPSByZXF1aXJlKFwiLi4vdXRpbHMvc3VidHJhY3Q0TXV0YXRlXCIpO1xyXG5jb25zdCBjYW52YXNfMSA9IHJlcXVpcmUoXCIuL2NhbnZhc1wiKTtcclxuY29uc3QgZ2V0U3VtbWVkVGV4dHVyZVZhbCA9IChzdW1tZWRUZXh0dXJlLCB4LCB5KSA9PiB7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHggPj0gMCAmJiB5ID49IDAgPyBzdW1tZWRUZXh0dXJlW3ldW3hdIDogWzAsIDAsIDAsIDBdO1xyXG4gICAgICAgIGlmIChyZXN1bHQgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aHJvdyBFcnJvcignTm8gc3VtbWVkIHRleHR1cmUgdmFsdWUnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxuICAgIGNhdGNoIChlcnIpIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKHgsIHkpO1xyXG4gICAgICAgIHRocm93IGVycjtcclxuICAgIH1cclxufTtcclxuY29uc3QgZ2V0U3VtbWVkQXJlYSA9IChzdW1tZWRUZXh0dXJlLCB4LCB5LCB4MiwgeTIpID0+IHtcclxuICAgIGNvbnN0IHJlc3VsdCA9IFswLCAwLCAwLCAwXTtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgYWRkNE11dGF0ZV8xLmFkZDRNdXRhdGUocmVzdWx0LCBnZXRTdW1tZWRUZXh0dXJlVmFsKHN1bW1lZFRleHR1cmUsIHgyLCB5MikpO1xyXG4gICAgICAgIHN1YnRyYWN0NE11dGF0ZV8xLnN1YnRyYWN0NE11dGF0ZShyZXN1bHQsIGdldFN1bW1lZFRleHR1cmVWYWwoc3VtbWVkVGV4dHVyZSwgeCwgeTIpKTtcclxuICAgICAgICBzdWJ0cmFjdDRNdXRhdGVfMS5zdWJ0cmFjdDRNdXRhdGUocmVzdWx0LCBnZXRTdW1tZWRUZXh0dXJlVmFsKHN1bW1lZFRleHR1cmUsIHgyLCB5KSk7XHJcbiAgICAgICAgYWRkNE11dGF0ZV8xLmFkZDRNdXRhdGUocmVzdWx0LCBnZXRTdW1tZWRUZXh0dXJlVmFsKHN1bW1lZFRleHR1cmUsIHgsIHkpKTtcclxuICAgIH1cclxuICAgIGNhdGNoIChlcnIpIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKFtcclxuICAgICAgICAgICAgcmVzdWx0LFxyXG4gICAgICAgICAgICBnZXRTdW1tZWRUZXh0dXJlVmFsKHN1bW1lZFRleHR1cmUsIHgyLCB5MiksXHJcbiAgICAgICAgICAgIGdldFN1bW1lZFRleHR1cmVWYWwoc3VtbWVkVGV4dHVyZSwgeCwgeTIpLFxyXG4gICAgICAgICAgICBnZXRTdW1tZWRUZXh0dXJlVmFsKHN1bW1lZFRleHR1cmUsIHgyLCB5KSxcclxuICAgICAgICAgICAgZ2V0U3VtbWVkVGV4dHVyZVZhbChzdW1tZWRUZXh0dXJlLCB4LCB5KVxyXG4gICAgICAgIF0pO1xyXG4gICAgICAgIHRocm93IGVycjtcclxuICAgIH1cclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn07XHJcbi8vcmVzdWx0cyBpbiB1cCB0byAyNCB0ZXh0dXJlIGxvb2t1cHMgYmFzZWQgb24gY29tcGxleGl0eSBvZiByYW5nZSwgd2hhdGV2ZXIgc2l6ZSB0aGUgaW1hZ2UgaXNcclxuY29uc3QgYXZlcmFnZVN1bW1lZCA9IChzdW1tZWRUZXh0dXJlLCBpbWFnZURhdGEsIHgsIHksIHgyLCB5MikgPT4ge1xyXG4gICAgY29uc3Qgc3RhcnRDZWxsWCA9IE1hdGguZmxvb3IoeCk7XHJcbiAgICBjb25zdCBzdGFydENlbGxZID0gTWF0aC5mbG9vcih5KTtcclxuICAgIGNvbnN0IGVuZENlbGxYID0gTWF0aC5mbG9vcih4Mik7XHJcbiAgICBjb25zdCBlbmRDZWxsWSA9IE1hdGguZmxvb3IoeTIpO1xyXG4gICAgLy9yYW5nZSBjb250YWluZWQgaW4gb25lIHBpeGVsXHJcbiAgICBpZiAoc3RhcnRDZWxsWCA9PSBlbmRDZWxsWCAmJiBzdGFydENlbGxZID09IGVuZENlbGxZKSB7XHJcbiAgICAgICAgcmV0dXJuIGZsb29yNE11dGF0ZV8xLmZsb29yNE11dGF0ZShjYW52YXNfMS5nZXRQaXhlbChpbWFnZURhdGEsIHN0YXJ0Q2VsbFgsIHN0YXJ0Q2VsbFkpKTtcclxuICAgIH1cclxuICAgIGNvbnN0IHdpZHRoID0geDIgLSB4O1xyXG4gICAgY29uc3QgaGVpZ2h0ID0geTIgLSB5O1xyXG4gICAgY29uc3QgcGl4ZWxBcmVhID0gd2lkdGggKiBoZWlnaHQ7XHJcbiAgICBjb25zdCBjb2xvdXJOb3JtYWxpc2VyID0gMSAvIHBpeGVsQXJlYTtcclxuICAgIGNvbnN0IGlubmVyQ2VsbFggPSBNYXRoLmNlaWwoeCk7XHJcbiAgICBjb25zdCBpbm5lckNlbGxZID0gTWF0aC5jZWlsKHkpO1xyXG4gICAgY29uc3QgaW5uZXJDZWxsWDIgPSBNYXRoLmZsb29yKHgyKTtcclxuICAgIGNvbnN0IGlubmVyQ2VsbFkyID0gTWF0aC5mbG9vcih5Mik7XHJcbiAgICBjb25zdCBsZWZ0RGlmZiA9IGlubmVyQ2VsbFggLSB4O1xyXG4gICAgY29uc3QgdG9wRGlmZiA9IGlubmVyQ2VsbFkgLSB5O1xyXG4gICAgY29uc3QgcmlnaHREaWZmID0geDIgLSBpbm5lckNlbGxYMjtcclxuICAgIGNvbnN0IGJvdHRvbURpZmYgPSB5MiAtIGlubmVyQ2VsbFkyO1xyXG4gICAgY29uc3QgY29sb3VyID0gWzAsIDAsIDAsIDBdO1xyXG4gICAgLy9zaW5nbGUgaG9yaXpvbnRhbCBzdHJpcFxyXG4gICAgaWYgKHN0YXJ0Q2VsbFggPT0gZW5kQ2VsbFgpIHtcclxuICAgICAgICBpZiAodG9wRGlmZikge1xyXG4gICAgICAgICAgICBhZGQ0TXV0YXRlXzEuYWRkNE11dGF0ZShjb2xvdXIsIHNjYWxlNE11dGF0ZV8xLnNjYWxlNE11dGF0ZShjYW52YXNfMS5nZXRQaXhlbChpbWFnZURhdGEsIHN0YXJ0Q2VsbFgsIHN0YXJ0Q2VsbFkpLCB3aWR0aCAqIHRvcERpZmYpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGJvdHRvbURpZmYpIHtcclxuICAgICAgICAgICAgYWRkNE11dGF0ZV8xLmFkZDRNdXRhdGUoY29sb3VyLCBzY2FsZTRNdXRhdGVfMS5zY2FsZTRNdXRhdGUoY2FudmFzXzEuZ2V0UGl4ZWwoaW1hZ2VEYXRhLCBlbmRDZWxsWCwgZW5kQ2VsbFkpLCB3aWR0aCAqIGJvdHRvbURpZmYpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgYWRkNE11dGF0ZV8xLmFkZDRNdXRhdGUoY29sb3VyLCBzY2FsZTRNdXRhdGVfMS5zY2FsZTRNdXRhdGUoZ2V0U3VtbWVkQXJlYShzdW1tZWRUZXh0dXJlLCBzdGFydENlbGxYIC0gMSwgaW5uZXJDZWxsWSAtIDEsIHN0YXJ0Q2VsbFgsIGlubmVyQ2VsbFkyIC0gMSksIHdpZHRoKSk7XHJcbiAgICAgICAgcmV0dXJuIGZsb29yNE11dGF0ZV8xLmZsb29yNE11dGF0ZShzY2FsZTRNdXRhdGVfMS5zY2FsZTRNdXRhdGUoY29sb3VyLCBjb2xvdXJOb3JtYWxpc2VyKSk7XHJcbiAgICB9XHJcbiAgICAvL3NpbmdsZSB2ZXJ0aWNhbCBzdHJpcFxyXG4gICAgaWYgKHN0YXJ0Q2VsbFkgPT0gZW5kQ2VsbFkpIHtcclxuICAgICAgICBpZiAobGVmdERpZmYpIHtcclxuICAgICAgICAgICAgYWRkNE11dGF0ZV8xLmFkZDRNdXRhdGUoY29sb3VyLCBzY2FsZTRNdXRhdGVfMS5zY2FsZTRNdXRhdGUoY2FudmFzXzEuZ2V0UGl4ZWwoaW1hZ2VEYXRhLCBzdGFydENlbGxYLCBzdGFydENlbGxZKSwgaGVpZ2h0ICogbGVmdERpZmYpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHJpZ2h0RGlmZikge1xyXG4gICAgICAgICAgICBhZGQ0TXV0YXRlXzEuYWRkNE11dGF0ZShjb2xvdXIsIHNjYWxlNE11dGF0ZV8xLnNjYWxlNE11dGF0ZShjYW52YXNfMS5nZXRQaXhlbChpbWFnZURhdGEsIGVuZENlbGxYLCBlbmRDZWxsWSksIGhlaWdodCAqIHJpZ2h0RGlmZikpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBhZGQ0TXV0YXRlXzEuYWRkNE11dGF0ZShjb2xvdXIsIHNjYWxlNE11dGF0ZV8xLnNjYWxlNE11dGF0ZShnZXRTdW1tZWRBcmVhKHN1bW1lZFRleHR1cmUsIGlubmVyQ2VsbFggLSAxLCBzdGFydENlbGxZIC0gMSwgaW5uZXJDZWxsWDIgLSAxLCBzdGFydENlbGxZKSwgaGVpZ2h0KSk7XHJcbiAgICAgICAgcmV0dXJuIGZsb29yNE11dGF0ZV8xLmZsb29yNE11dGF0ZShzY2FsZTRNdXRhdGVfMS5zY2FsZTRNdXRhdGUoY29sb3VyLCBjb2xvdXJOb3JtYWxpc2VyKSk7XHJcbiAgICB9XHJcbiAgICAvL2Nvcm5lciBjZWxsc1xyXG4gICAgaWYgKHRvcERpZmYpIHtcclxuICAgICAgICBpZiAobGVmdERpZmYpIHtcclxuICAgICAgICAgICAgYWRkNE11dGF0ZV8xLmFkZDRNdXRhdGUoY29sb3VyLCBzY2FsZTRNdXRhdGVfMS5zY2FsZTRNdXRhdGUoY2FudmFzXzEuZ2V0UGl4ZWwoaW1hZ2VEYXRhLCBzdGFydENlbGxYLCBzdGFydENlbGxZKSwgbGVmdERpZmYgKiB0b3BEaWZmKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChyaWdodERpZmYpIHtcclxuICAgICAgICAgICAgYWRkNE11dGF0ZV8xLmFkZDRNdXRhdGUoY29sb3VyLCBzY2FsZTRNdXRhdGVfMS5zY2FsZTRNdXRhdGUoY2FudmFzXzEuZ2V0UGl4ZWwoaW1hZ2VEYXRhLCBlbmRDZWxsWCwgc3RhcnRDZWxsWSksIHJpZ2h0RGlmZiAqIHRvcERpZmYpKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAoYm90dG9tRGlmZikge1xyXG4gICAgICAgIGlmIChsZWZ0RGlmZikge1xyXG4gICAgICAgICAgICBhZGQ0TXV0YXRlXzEuYWRkNE11dGF0ZShjb2xvdXIsIHNjYWxlNE11dGF0ZV8xLnNjYWxlNE11dGF0ZShjYW52YXNfMS5nZXRQaXhlbChpbWFnZURhdGEsIHN0YXJ0Q2VsbFgsIGVuZENlbGxZKSwgbGVmdERpZmYgKiBib3R0b21EaWZmKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChyaWdodERpZmYpIHtcclxuICAgICAgICAgICAgYWRkNE11dGF0ZV8xLmFkZDRNdXRhdGUoY29sb3VyLCBzY2FsZTRNdXRhdGVfMS5zY2FsZTRNdXRhdGUoY2FudmFzXzEuZ2V0UGl4ZWwoaW1hZ2VEYXRhLCBlbmRDZWxsWCwgZW5kQ2VsbFkpLCByaWdodERpZmYgKiBib3R0b21EaWZmKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy9mcmFjdGlvbmFsIHN0cmlwc1xyXG4gICAgaWYgKHRvcERpZmYpIHtcclxuICAgICAgICBhZGQ0TXV0YXRlXzEuYWRkNE11dGF0ZShjb2xvdXIsIHNjYWxlNE11dGF0ZV8xLnNjYWxlNE11dGF0ZShnZXRTdW1tZWRBcmVhKHN1bW1lZFRleHR1cmUsIGlubmVyQ2VsbFggLSAxLCBzdGFydENlbGxZIC0gMSwgaW5uZXJDZWxsWDIgLSAxLCBzdGFydENlbGxZKSwgdG9wRGlmZikpO1xyXG4gICAgfVxyXG4gICAgaWYgKGxlZnREaWZmKSB7XHJcbiAgICAgICAgYWRkNE11dGF0ZV8xLmFkZDRNdXRhdGUoY29sb3VyLCBzY2FsZTRNdXRhdGVfMS5zY2FsZTRNdXRhdGUoZ2V0U3VtbWVkQXJlYShzdW1tZWRUZXh0dXJlLCBzdGFydENlbGxYIC0gMSwgaW5uZXJDZWxsWSAtIDEsIHN0YXJ0Q2VsbFgsIGlubmVyQ2VsbFkyIC0gMSksIGxlZnREaWZmKSk7XHJcbiAgICB9XHJcbiAgICBpZiAoYm90dG9tRGlmZikge1xyXG4gICAgICAgIGFkZDRNdXRhdGVfMS5hZGQ0TXV0YXRlKGNvbG91ciwgc2NhbGU0TXV0YXRlXzEuc2NhbGU0TXV0YXRlKGdldFN1bW1lZEFyZWEoc3VtbWVkVGV4dHVyZSwgaW5uZXJDZWxsWCAtIDEsIGVuZENlbGxZIC0gMSwgaW5uZXJDZWxsWDIgLSAxLCBlbmRDZWxsWSksIGJvdHRvbURpZmYpKTtcclxuICAgIH1cclxuICAgIGlmIChyaWdodERpZmYpIHtcclxuICAgICAgICBhZGQ0TXV0YXRlXzEuYWRkNE11dGF0ZShjb2xvdXIsIHNjYWxlNE11dGF0ZV8xLnNjYWxlNE11dGF0ZShnZXRTdW1tZWRBcmVhKHN1bW1lZFRleHR1cmUsIGVuZENlbGxYIC0gMSwgaW5uZXJDZWxsWSAtIDEsIGVuZENlbGxYLCBpbm5lckNlbGxZMiAtIDEpLCByaWdodERpZmYpKTtcclxuICAgIH1cclxuICAgIC8vaW5uZXIgcGFydHNcclxuICAgIGFkZDRNdXRhdGVfMS5hZGQ0TXV0YXRlKGNvbG91ciwgZ2V0U3VtbWVkQXJlYShzdW1tZWRUZXh0dXJlLCBpbm5lckNlbGxYIC0gMSwgaW5uZXJDZWxsWSAtIDEsIGlubmVyQ2VsbFgyIC0gMSwgaW5uZXJDZWxsWTIgLSAxKSk7XHJcbiAgICAvL25vdyB3ZSBoYXZlIGFuIGFjY3VtdWxhdGl2ZSBwaXhlbCB2YWx1ZSB0aGF0IGNvdmVycyB0aGUgd2hvbGUgYXJlYSBzbyBqdXN0IGF2ZXJhZ2UgaXRcclxuICAgIHJldHVybiBmbG9vcjRNdXRhdGVfMS5mbG9vcjRNdXRhdGUoc2NhbGU0TXV0YXRlXzEuc2NhbGU0TXV0YXRlKGNvbG91ciwgY29sb3VyTm9ybWFsaXNlcikpO1xyXG59O1xyXG5leHBvcnRzLmF2ZXJhZ2VTdW1tZWQgPSBhdmVyYWdlU3VtbWVkO1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLnNldFBpeGVsID0gZXhwb3J0cy5nZXRQaXhlbCA9IHZvaWQgMDtcclxuY29uc3QgZ2V0UGl4ZWwgPSAoaW1hZ2VEYXRhLCB4LCB5KSA9PiB7XHJcbiAgICBjb25zdCBzYW1wbGVJbmRleCA9IChpbWFnZURhdGEud2lkdGggKiBNYXRoLmZsb29yKHkpICsgTWF0aC5mbG9vcih4KSkgKiA0O1xyXG4gICAgcmV0dXJuIGltYWdlRGF0YS5kYXRhLnNsaWNlKHNhbXBsZUluZGV4LCBzYW1wbGVJbmRleCArIDQpO1xyXG59O1xyXG5leHBvcnRzLmdldFBpeGVsID0gZ2V0UGl4ZWw7XHJcbmNvbnN0IHNldFBpeGVsID0gKGltYWdlRGF0YSwgeCwgeSwgcmdiYSkgPT4ge1xyXG4gICAgaW1hZ2VEYXRhLmRhdGEuc2V0KHJnYmEsIChNYXRoLmZsb29yKHkpICogaW1hZ2VEYXRhLndpZHRoICsgTWF0aC5mbG9vcih4KSkgKiA0KTtcclxufTtcclxuZXhwb3J0cy5zZXRQaXhlbCA9IHNldFBpeGVsO1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLmNyZWF0ZVJlbmRlcmVyID0gdm9pZCAwO1xyXG5jb25zdCBjcmVhdGVSZW5kZXJlciA9IChyZW5kZXJGdW5jLCBhZnRlclJlbmRlckZ1bmMpID0+IHtcclxuICAgIGxldCBkcmF3aW5nID0gZmFsc2U7XHJcbiAgICByZXR1cm4gKCkgPT4ge1xyXG4gICAgICAgIGlmICghZHJhd2luZykge1xyXG4gICAgICAgICAgICBkcmF3aW5nID0gdHJ1ZTtcclxuICAgICAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcclxuICAgICAgICAgICAgICAgIHJlbmRlckZ1bmMoKTtcclxuICAgICAgICAgICAgICAgIGRyYXdpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIGFmdGVyUmVuZGVyRnVuYyA9PT0gbnVsbCB8fCBhZnRlclJlbmRlckZ1bmMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGFmdGVyUmVuZGVyRnVuYygpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG59O1xyXG5leHBvcnRzLmNyZWF0ZVJlbmRlcmVyID0gY3JlYXRlUmVuZGVyZXI7XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuY3JlYXRlU3VtbWVkVGV4dHVyZSA9IHZvaWQgMDtcclxuY29uc3QgYWRkNE11dGF0ZV8xID0gcmVxdWlyZShcIi4uL3V0aWxzL2FkZDRNdXRhdGVcIik7XHJcbmNvbnN0IHN1YnRyYWN0NE11dGF0ZV8xID0gcmVxdWlyZShcIi4uL3V0aWxzL3N1YnRyYWN0NE11dGF0ZVwiKTtcclxuY29uc3QgY3JlYXRlU3VtbWVkVGV4dHVyZSA9IChpbWFnZURhdGEpID0+IHtcclxuICAgIGNvbnN0IHN1bW1lZFRleHR1cmUgPSBuZXcgQXJyYXkoaW1hZ2VEYXRhLmhlaWdodCk7XHJcbiAgICBmb3IgKGxldCBpID0gMCwgeSA9IDA7IHkgPCBpbWFnZURhdGEuaGVpZ2h0OyB5KyspIHtcclxuICAgICAgICBzdW1tZWRUZXh0dXJlW3ldID0gbmV3IEFycmF5KGltYWdlRGF0YS53aWR0aCk7XHJcbiAgICAgICAgZm9yIChsZXQgeCA9IDA7IHggPCBpbWFnZURhdGEud2lkdGg7IHgrKywgaSArPSA0KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHBpeCA9IG5ldyBVaW50MzJBcnJheShpbWFnZURhdGEuZGF0YS5zbGljZShpLCBpICsgNCkpO1xyXG4gICAgICAgICAgICBpZiAoeCA+IDApIHtcclxuICAgICAgICAgICAgICAgIGFkZDRNdXRhdGVfMS5hZGQ0TXV0YXRlKHBpeCwgc3VtbWVkVGV4dHVyZVt5XVt4IC0gMV0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh5ID4gMCkge1xyXG4gICAgICAgICAgICAgICAgYWRkNE11dGF0ZV8xLmFkZDRNdXRhdGUocGl4LCBzdW1tZWRUZXh0dXJlW3kgLSAxXVt4XSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHggPiAwICYmIHkgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICBzdWJ0cmFjdDRNdXRhdGVfMS5zdWJ0cmFjdDRNdXRhdGUocGl4LCBzdW1tZWRUZXh0dXJlW3kgLSAxXVt4IC0gMV0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHN1bW1lZFRleHR1cmVbeV1beF0gPSBwaXg7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHN1bW1lZFRleHR1cmU7XHJcbn07XHJcbmV4cG9ydHMuY3JlYXRlU3VtbWVkVGV4dHVyZSA9IGNyZWF0ZVN1bW1lZFRleHR1cmU7XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuYWRkNE11dGF0ZSA9IHZvaWQgMDtcclxuY29uc3QgYWRkNE11dGF0ZSA9IChhLCBiKSA9PiB7XHJcbiAgICBhWzBdICs9IGJbMF07XHJcbiAgICBhWzFdICs9IGJbMV07XHJcbiAgICBhWzJdICs9IGJbMl07XHJcbiAgICBhWzNdICs9IGJbM107XHJcbiAgICByZXR1cm4gYTtcclxufTtcclxuZXhwb3J0cy5hZGQ0TXV0YXRlID0gYWRkNE11dGF0ZTtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5jbGFtcCA9IHZvaWQgMDtcclxuY29uc3QgY2xhbXAgPSAodmFsLCBtaW4sIG1heCkgPT4ge1xyXG4gICAgcmV0dXJuIE1hdGgubWF4KE1hdGgubWluKHZhbCwgbWF4KSwgbWluKTtcclxufTtcclxuZXhwb3J0cy5jbGFtcCA9IGNsYW1wO1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLmZsb29yNE11dGF0ZSA9IHZvaWQgMDtcclxuY29uc3QgZmxvb3I0TXV0YXRlID0gKGEpID0+IHtcclxuICAgIGFbMF0gPSBNYXRoLmZsb29yKGFbMF0pO1xyXG4gICAgYVsxXSA9IE1hdGguZmxvb3IoYVsxXSk7XHJcbiAgICBhWzJdID0gTWF0aC5mbG9vcihhWzJdKTtcclxuICAgIGFbM10gPSBNYXRoLmZsb29yKGFbM10pO1xyXG4gICAgcmV0dXJuIGE7XHJcbn07XHJcbmV4cG9ydHMuZmxvb3I0TXV0YXRlID0gZmxvb3I0TXV0YXRlO1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLmdldEltYWdlRGF0YSA9IHZvaWQgMDtcclxuY29uc3QgZ2V0SW1hZ2VEYXRhID0gKGltYWdlKSA9PiB7XHJcbiAgICBjb25zdCBpbWFnZUNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xyXG4gICAgaW1hZ2VDYW52YXMud2lkdGggPSBpbWFnZS53aWR0aDtcclxuICAgIGltYWdlQ2FudmFzLmhlaWdodCA9IGltYWdlLmhlaWdodDtcclxuICAgIGNvbnN0IGltYWdlR3JhcGhpY3MgPSBpbWFnZUNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xyXG4gICAgaWYgKCFpbWFnZUdyYXBoaWNzKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDb3VsZCBub3QgY3JlYXRlIGNhbnZhcyB0byBleHRyYWN0IGltYWdlIGRhdGEnKTtcclxuICAgIH1cclxuICAgIGltYWdlR3JhcGhpY3MuY2xlYXJSZWN0KDAsIDAsIGltYWdlQ2FudmFzLndpZHRoLCBpbWFnZUNhbnZhcy5oZWlnaHQpO1xyXG4gICAgaW1hZ2VHcmFwaGljcy5kcmF3SW1hZ2UoaW1hZ2UsIDAsIDApO1xyXG4gICAgcmV0dXJuIGltYWdlR3JhcGhpY3MuZ2V0SW1hZ2VEYXRhKDAsIDAsIGltYWdlQ2FudmFzLndpZHRoLCBpbWFnZUNhbnZhcy5oZWlnaHQpO1xyXG59O1xyXG5leHBvcnRzLmdldEltYWdlRGF0YSA9IGdldEltYWdlRGF0YTtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5zY2FsZTRNdXRhdGUgPSB2b2lkIDA7XHJcbmNvbnN0IHNjYWxlNE11dGF0ZSA9IChhLCBtYWcpID0+IHtcclxuICAgIGFbMF0gKj0gbWFnO1xyXG4gICAgYVsxXSAqPSBtYWc7XHJcbiAgICBhWzJdICo9IG1hZztcclxuICAgIGFbM10gKj0gbWFnO1xyXG4gICAgcmV0dXJuIGE7XHJcbn07XHJcbmV4cG9ydHMuc2NhbGU0TXV0YXRlID0gc2NhbGU0TXV0YXRlO1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLnN1YnRyYWN0NE11dGF0ZSA9IHZvaWQgMDtcclxuY29uc3Qgc3VidHJhY3Q0TXV0YXRlID0gKGEsIGIpID0+IHtcclxuICAgIGFbMF0gLT0gYlswXTtcclxuICAgIGFbMV0gLT0gYlsxXTtcclxuICAgIGFbMl0gLT0gYlsyXTtcclxuICAgIGFbM10gLT0gYlszXTtcclxuICAgIHJldHVybiBhO1xyXG59O1xyXG5leHBvcnRzLnN1YnRyYWN0NE11dGF0ZSA9IHN1YnRyYWN0NE11dGF0ZTtcclxuIl0sIm5hbWVzIjpbImF2ZXJhZ2VOYWl2ZV8xIiwiYXZlcmFnZVN1bW1lZF8xIiwiY2FudmFzXzEiLCJjcmVhdGVSZW5kZXJlcl8xIiwiY3JlYXRlU3VtbWVkVGV4dHVyZV8xIiwiY2xhbXBfMSIsImdldEltYWdlRGF0YV8xIiwiZ2FtZSIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJpbWFnZSIsIm1ldGhvZCIsImltYWdlSW5wdXQiLCJzY2FsZUlucHV0IiwieG9mZnNldElucHV0IiwieW9mZnNldElucHV0Iiwic2NhbGVWYWx1ZUlucHV0IiwieG9mZnNldFZhbHVlSW5wdXQiLCJ5b2Zmc2V0VmFsdWVJbnB1dCIsInRpbWV0YWtlbiIsImciLCJnZXRDb250ZXh0Iiwic2NhbGUiLCJ4b2Zmc2V0IiwieW9mZnNldCIsInN0YXJ0IiwiaW1hZ2VEYXRhIiwiZ2V0SW1hZ2VEYXRhIiwic3VtbWVkVGV4dHVyZSIsImNyZWF0ZVN1bW1lZFRleHR1cmUiLCJkcmF3IiwiY3JlYXRlUmVuZGVyZXIiLCJ2YWx1ZSIsInRvU3RyaW5nIiwiY2xlYXJSZWN0Iiwid2lkdGgiLCJoZWlnaHQiLCJjYW52YXNJbWFnZSIsInBpeGVsRnVuYyIsIngiLCJ5IiwieDIiLCJ5MiIsImF2ZXJhZ2VTdW1tZWQiLCJhdmVyYWdlTmFpdmUiLCJnZXRQaXhlbCIsIkVycm9yIiwic3RhcnRUaW1lIiwiRGF0ZSIsIm5vdyIsIm1heFkiLCJtYXhYIiwiTWF0aCIsIm1heCIsIm1pbiIsInBsb3RYIiwiY2xhbXAiLCJwbG90WSIsInBsb3RYMiIsInBsb3RZMiIsInNldFBpeGVsIiwicHV0SW1hZ2VEYXRhIiwiaW5uZXJUZXh0IiwiZHJhd0ltYWdlIiwib25pbnB1dCIsInBhcnNlRmxvYXQiLCJvbmNoYW5nZSIsImxvYWRJbWFnZSIsInNyYyIsImNvbXBsZXRlIiwib25sb2FkIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwiYWRkNE11dGF0ZV8xIiwiZmxvb3I0TXV0YXRlXzEiLCJzY2FsZTRNdXRhdGVfMSIsInN0YXJ0Q2VsbFgiLCJmbG9vciIsInN0YXJ0Q2VsbFkiLCJlbmRDZWxsWCIsImVuZENlbGxZIiwiZmxvb3I0TXV0YXRlIiwiY29sb3VyTm9ybWFsaXNlciIsImlubmVyQ2VsbFgiLCJjZWlsIiwiaW5uZXJDZWxsWSIsImlubmVyQ2VsbFgyIiwiaW5uZXJDZWxsWTIiLCJsZWZ0RGlmZiIsInRvcERpZmYiLCJyaWdodERpZmYiLCJib3R0b21EaWZmIiwiY29sb3VyIiwiYWRkNE11dGF0ZSIsInNjYWxlNE11dGF0ZSIsIm1pZENvbG91ciIsImoiLCJpIiwidG9wQ29sb3VyIiwibGVmdENvbG91ciIsImJvdHRvbUNvbG91ciIsInJpZ2h0Q29sb3VyIiwic3VidHJhY3Q0TXV0YXRlXzEiLCJnZXRTdW1tZWRUZXh0dXJlVmFsIiwicmVzdWx0IiwidW5kZWZpbmVkIiwiZXJyIiwiY29uc29sZSIsImVycm9yIiwiZ2V0U3VtbWVkQXJlYSIsInN1YnRyYWN0NE11dGF0ZSIsInNhbXBsZUluZGV4IiwiZGF0YSIsInNsaWNlIiwicmdiYSIsInNldCIsInJlbmRlckZ1bmMiLCJhZnRlclJlbmRlckZ1bmMiLCJkcmF3aW5nIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiQXJyYXkiLCJwaXgiLCJVaW50MzJBcnJheSIsImEiLCJiIiwidmFsIiwiaW1hZ2VDYW52YXMiLCJjcmVhdGVFbGVtZW50IiwiaW1hZ2VHcmFwaGljcyIsIm1hZyJdLCJzb3VyY2VSb290IjoiIn0=