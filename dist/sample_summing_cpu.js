"use strict";(self.webpackChunksampling_coverage=self.webpackChunksampling_coverage||[]).push([[110],{3776:(e,t,a)=>{const o=a(2086),l=a(5676),u=a(975),d=a(7787),r=a(6374),c=a(8372),M=a(3345),n=document.getElementById("game"),i=document.getElementById("image"),s=document.getElementById("method"),g=document.getElementById("chooseimage"),h=document.getElementById("scale"),f=document.getElementById("xoffset"),m=document.getElementById("yoffset"),v=document.getElementById("scalevalue"),P=document.getElementById("xoffsetvalue"),x=document.getElementById("yoffsetvalue"),p=document.getElementById("timetaken"),w=n.getContext("2d");let y=.33,_=0,b=0;const I=()=>{const e=(0,c.getImageData)(i),t=(0,r.createSummedTexture)(e),a=(0,d.createRenderer)((()=>{h.value=v.value=y.toString(),f.value=P.value=_.toString(),m.value=x.value=b.toString(),((e,t)=>{w.clearRect(0,0,n.width,n.height);const a=w.getImageData(0,0,n.width,n.height);let d;switch(s.value){case"summed":d=(a,o,u,d)=>(0,l.averageSummed)(e,t,a,o,u,d);break;case"naive":d=(e,a,l,u)=>(0,o.averageNaive)(t,e,a,l,u);break;case"none":d=(e,a)=>(0,u.getPixel)(t,e,a);break;default:throw new Error("Unknown method")}const r=Date.now(),c=n.height-1,i=n.width-1;for(let e=Math.max(0,b);e<Math.min(n.height*y+b,n.height);e++)for(let t=Math.max(0,_);t<Math.min(n.width*y+_,n.width);t++){const o=(0,M.clamp)((t-_)/y,0,i),l=(0,M.clamp)((e-b)/y,0,c),r=(0,M.clamp)((t+1-_)/y,0,i),n=(0,M.clamp)((e+1-b)/y,0,c);(0,u.setPixel)(a,t,e,d(o,l,r,n))}w.putImageData(a,0,0),p.innerText=Date.now()-r+" ms"})(t,e)}));h.oninput=()=>{y=parseFloat(h.value),a()},f.oninput=()=>{_=parseFloat(f.value),a()},m.oninput=()=>{b=parseFloat(m.value),a()},v.onchange=()=>{y=parseFloat(v.value),a()},P.onchange=()=>{_=parseFloat(P.value),a()},x.onchange=()=>{b=parseFloat(x.value),a()},s.oninput=a,a()},E=()=>{i.src=g.value,i.complete?I():i.onload=I};g.onchange=()=>{E()},E()},2086:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.averageNaive=void 0;const o=a(9078),l=a(5062),u=a(8027),d=a(975);t.averageNaive=(e,t,a,r,c)=>{const M=Math.floor(t),n=Math.floor(a),i=Math.floor(r),s=Math.floor(c);if(M==i&&n==s)return(0,l.floor4Mutate)((0,d.getPixel)(e,M,n));const g=r-t,h=c-a,f=1/(g*h),m=Math.ceil(t),v=Math.ceil(a),P=Math.floor(r),x=Math.floor(c),p=m-t,w=v-a,y=r-P,_=c-x,b=[0,0,0,0];if(M==i){w&&(0,o.add4Mutate)(b,(0,u.scale4Mutate)((0,d.getPixel)(e,M,n),g*w)),_&&(0,o.add4Mutate)(b,(0,u.scale4Mutate)((0,d.getPixel)(e,i,s),g*_));const t=[0,0,0,0];for(let a=v;a<x;a++)(0,o.add4Mutate)(t,(0,d.getPixel)(e,M,a));return(0,o.add4Mutate)(b,(0,u.scale4Mutate)(t,g)),(0,l.floor4Mutate)((0,u.scale4Mutate)(b,f))}if(n==s){p&&(0,o.add4Mutate)(b,(0,u.scale4Mutate)((0,d.getPixel)(e,M,n),h*p)),y&&(0,o.add4Mutate)(b,(0,u.scale4Mutate)((0,d.getPixel)(e,i,s),h*y));const t=[0,0,0,0];for(let a=m;a<P;a++)(0,o.add4Mutate)(t,(0,d.getPixel)(e,a,n));return(0,o.add4Mutate)(b,(0,u.scale4Mutate)(t,h)),(0,l.floor4Mutate)((0,u.scale4Mutate)(b,f))}if(w&&(p&&(0,o.add4Mutate)(b,(0,u.scale4Mutate)((0,d.getPixel)(e,M,n),p*w)),y&&(0,o.add4Mutate)(b,(0,u.scale4Mutate)((0,d.getPixel)(e,i,n),y*w))),_&&(p&&(0,o.add4Mutate)(b,(0,u.scale4Mutate)((0,d.getPixel)(e,M,s),p*_)),y&&(0,o.add4Mutate)(b,(0,u.scale4Mutate)((0,d.getPixel)(e,i,s),y*_))),w){const t=[0,0,0,0];for(let a=m;a<P;a++)(0,o.add4Mutate)(t,(0,d.getPixel)(e,a,n));(0,o.add4Mutate)(b,(0,u.scale4Mutate)(t,w))}if(p){const t=[0,0,0,0];for(let a=v;a<x;a++)(0,o.add4Mutate)(t,(0,d.getPixel)(e,M,a));(0,o.add4Mutate)(b,(0,u.scale4Mutate)(t,p))}if(_){const t=[0,0,0,0];for(let a=m;a<P;a++)(0,o.add4Mutate)(t,(0,d.getPixel)(e,a,s));(0,o.add4Mutate)(b,(0,u.scale4Mutate)(t,_))}if(y){const t=[0,0,0,0];for(let a=v;a<x;a++)(0,o.add4Mutate)(t,(0,d.getPixel)(e,i,a));(0,o.add4Mutate)(b,(0,u.scale4Mutate)(t,y))}for(let t=m;t<P;t++)for(let a=v;a<x;a++)(0,o.add4Mutate)(b,(0,d.getPixel)(e,t,a));return(0,l.floor4Mutate)((0,u.scale4Mutate)(b,f))}},5676:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.averageSummed=void 0;const o=a(9078),l=a(5062),u=a(8027),d=a(6196),r=a(975),c=(e,t,a)=>{try{const o=t>=0&&a>=0?e[a][t]:[0,0,0,0];if(void 0===o)throw Error("No summed texture value");return o}catch(e){throw console.error(t,a),e}},M=(e,t,a,l,u)=>{const r=[0,0,0,0];try{(0,o.add4Mutate)(r,c(e,l,u)),(0,d.subtract4Mutate)(r,c(e,t,u)),(0,d.subtract4Mutate)(r,c(e,l,a)),(0,o.add4Mutate)(r,c(e,t,a))}catch(o){throw console.error([r,c(e,l,u),c(e,t,u),c(e,l,a),c(e,t,a)]),o}return r};t.averageSummed=(e,t,a,d,c,n)=>{const i=Math.floor(a),s=Math.floor(d),g=Math.floor(c),h=Math.floor(n);if(i==g&&s==h)return(0,l.floor4Mutate)((0,r.getPixel)(t,i,s));const f=c-a,m=n-d,v=1/(f*m),P=Math.ceil(a),x=Math.ceil(d),p=Math.floor(c),w=Math.floor(n),y=P-a,_=x-d,b=c-p,I=n-w,E=[0,0,0,0];return i==g?(_&&(0,o.add4Mutate)(E,(0,u.scale4Mutate)((0,r.getPixel)(t,i,s),f*_)),I&&(0,o.add4Mutate)(E,(0,u.scale4Mutate)((0,r.getPixel)(t,g,h),f*I)),(0,o.add4Mutate)(E,(0,u.scale4Mutate)(M(e,i-1,x-1,i,w-1),f)),(0,l.floor4Mutate)((0,u.scale4Mutate)(E,v))):s==h?(y&&(0,o.add4Mutate)(E,(0,u.scale4Mutate)((0,r.getPixel)(t,i,s),m*y)),b&&(0,o.add4Mutate)(E,(0,u.scale4Mutate)((0,r.getPixel)(t,g,h),m*b)),(0,o.add4Mutate)(E,(0,u.scale4Mutate)(M(e,P-1,s-1,p-1,s),m)),(0,l.floor4Mutate)((0,u.scale4Mutate)(E,v))):(_&&(y&&(0,o.add4Mutate)(E,(0,u.scale4Mutate)((0,r.getPixel)(t,i,s),y*_)),b&&(0,o.add4Mutate)(E,(0,u.scale4Mutate)((0,r.getPixel)(t,g,s),b*_))),I&&(y&&(0,o.add4Mutate)(E,(0,u.scale4Mutate)((0,r.getPixel)(t,i,h),y*I)),b&&(0,o.add4Mutate)(E,(0,u.scale4Mutate)((0,r.getPixel)(t,g,h),b*I))),_&&(0,o.add4Mutate)(E,(0,u.scale4Mutate)(M(e,P-1,s-1,p-1,s),_)),y&&(0,o.add4Mutate)(E,(0,u.scale4Mutate)(M(e,i-1,x-1,i,w-1),y)),I&&(0,o.add4Mutate)(E,(0,u.scale4Mutate)(M(e,P-1,h-1,p-1,h),I)),b&&(0,o.add4Mutate)(E,(0,u.scale4Mutate)(M(e,g-1,x-1,g,w-1),b)),(0,o.add4Mutate)(E,M(e,P-1,x-1,p-1,w-1)),(0,l.floor4Mutate)((0,u.scale4Mutate)(E,v)))}},975:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setPixel=t.getPixel=void 0,t.getPixel=(e,t,a)=>{const o=4*(e.width*Math.floor(a)+Math.floor(t));return e.data.slice(o,o+4)},t.setPixel=(e,t,a,o)=>{e.data.set(o,4*(Math.floor(a)*e.width+Math.floor(t)))}},7787:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.createRenderer=void 0,t.createRenderer=(e,t)=>{let a=!1;return()=>{a||(a=!0,requestAnimationFrame((()=>{e(),a=!1,null==t||t()})))}}},6374:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.createSummedTexture=void 0;const o=a(9078),l=a(6196);t.createSummedTexture=e=>{const t=new Array(e.height);for(let a=0,u=0;u<e.height;u++){t[u]=new Array(e.width);for(let d=0;d<e.width;d++,a+=4){const r=new Uint32Array(e.data.slice(a,a+4));d>0&&(0,o.add4Mutate)(r,t[u][d-1]),u>0&&(0,o.add4Mutate)(r,t[u-1][d]),d>0&&u>0&&(0,l.subtract4Mutate)(r,t[u-1][d-1]),t[u][d]=r}}return t}},3345:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.lerp=t.timeAtPos=t.clamp=t.fract=t.negFract=t.EPSILON=void 0,t.EPSILON=1e-6,t.negFract=e=>1-e+Math.floor(e),t.fract=e=>e-Math.floor(e),t.clamp=(e,t,a)=>Math.max(Math.min(e,a),t),t.timeAtPos=(e,a,o)=>a?(0,t.clamp)((o-e)/a,0,1):0,t.lerp=(e,t,a)=>e*(1-a)+t*a},9078:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.add4Mutate=void 0,t.add4Mutate=(e,t)=>(e[0]+=t[0],e[1]+=t[1],e[2]+=t[2],e[3]+=t[3],e)},5062:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.floor4Mutate=void 0,t.floor4Mutate=e=>(e[0]=Math.floor(e[0]),e[1]=Math.floor(e[1]),e[2]=Math.floor(e[2]),e[3]=Math.floor(e[3]),e)},8372:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.getImageData=void 0,t.getImageData=e=>{const t=document.createElement("canvas");t.width=e.width,t.height=e.height;const a=t.getContext("2d");if(!a)throw new Error("Could not create canvas to extract image data");return a.clearRect(0,0,t.width,t.height),a.drawImage(e,0,0),a.getImageData(0,0,t.width,t.height)}},8027:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.scale4Mutate=void 0,t.scale4Mutate=(e,t)=>(e[0]*=t,e[1]*=t,e[2]*=t,e[3]*=t,e)},6196:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.subtract4Mutate=void 0,t.subtract4Mutate=(e,t)=>(e[0]-=t[0],e[1]-=t[1],e[2]-=t[2],e[3]-=t[3],e)}},e=>{e(e.s=3776)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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aW5nQ3B1LnRzIiwid2VicGFjazovL3NhbXBsaW5nLWNvdmVyYWdlLy4vc3JjL2RyYXcvYXZlcmFnZU5haXZlLnRzIiwid2VicGFjazovL3NhbXBsaW5nLWNvdmVyYWdlLy4vc3JjL2RyYXcvYXZlcmFnZVN1bW1lZC50cyIsIndlYnBhY2s6Ly9zYW1wbGluZy1jb3ZlcmFnZS8uL3NyYy9kcmF3L2NhbnZhcy50cyIsIndlYnBhY2s6Ly9zYW1wbGluZy1jb3ZlcmFnZS8uL3NyYy9kcmF3L2NyZWF0ZVJlbmRlcmVyLnRzIiwid2VicGFjazovL3NhbXBsaW5nLWNvdmVyYWdlLy4vc3JjL2RyYXcvY3JlYXRlU3VtbWVkVGV4dHVyZS50cyIsIndlYnBhY2s6Ly9zYW1wbGluZy1jb3ZlcmFnZS8uL3NyYy9tYXRocy9jb21tb24udHMiLCJ3ZWJwYWNrOi8vc2FtcGxpbmctY292ZXJhZ2UvLi9zcmMvdXRpbHMvYWRkNE11dGF0ZS50cyIsIndlYnBhY2s6Ly9zYW1wbGluZy1jb3ZlcmFnZS8uL3NyYy91dGlscy9mbG9vcjRNdXRhdGUudHMiLCJ3ZWJwYWNrOi8vc2FtcGxpbmctY292ZXJhZ2UvLi9zcmMvdXRpbHMvZ2V0SW1hZ2VEYXRhLnRzIiwid2VicGFjazovL3NhbXBsaW5nLWNvdmVyYWdlLy4vc3JjL3V0aWxzL3NjYWxlNE11dGF0ZS50cyIsIndlYnBhY2s6Ly9zYW1wbGluZy1jb3ZlcmFnZS8uL3NyYy91dGlscy9zdWJ0cmFjdDRNdXRhdGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgYXZlcmFnZU5haXZlXzEgPSByZXF1aXJlKFwiLi4vZHJhdy9hdmVyYWdlTmFpdmVcIik7XHJcbmNvbnN0IGF2ZXJhZ2VTdW1tZWRfMSA9IHJlcXVpcmUoXCIuLi9kcmF3L2F2ZXJhZ2VTdW1tZWRcIik7XHJcbmNvbnN0IGNhbnZhc18xID0gcmVxdWlyZShcIi4uL2RyYXcvY2FudmFzXCIpO1xyXG5jb25zdCBjcmVhdGVSZW5kZXJlcl8xID0gcmVxdWlyZShcIi4uL2RyYXcvY3JlYXRlUmVuZGVyZXJcIik7XHJcbmNvbnN0IGNyZWF0ZVN1bW1lZFRleHR1cmVfMSA9IHJlcXVpcmUoXCIuLi9kcmF3L2NyZWF0ZVN1bW1lZFRleHR1cmVcIik7XHJcbmNvbnN0IGdldEltYWdlRGF0YV8xID0gcmVxdWlyZShcIi4uL3V0aWxzL2dldEltYWdlRGF0YVwiKTtcclxuY29uc3QgY29tbW9uXzEgPSByZXF1aXJlKFwiLi4vbWF0aHMvY29tbW9uXCIpO1xyXG5jb25zdCBnYW1lID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2dhbWUnKTtcclxuY29uc3QgaW1hZ2UgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaW1hZ2UnKTtcclxuY29uc3QgbWV0aG9kID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21ldGhvZCcpO1xyXG5jb25zdCBpbWFnZUlucHV0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2Nob29zZWltYWdlJyk7XHJcbmNvbnN0IHNjYWxlSW5wdXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2NhbGUnKTtcclxuY29uc3QgeG9mZnNldElucHV0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3hvZmZzZXQnKTtcclxuY29uc3QgeW9mZnNldElucHV0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3lvZmZzZXQnKTtcclxuY29uc3Qgc2NhbGVWYWx1ZUlucHV0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3NjYWxldmFsdWUnKTtcclxuY29uc3QgeG9mZnNldFZhbHVlSW5wdXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgneG9mZnNldHZhbHVlJyk7XHJcbmNvbnN0IHlvZmZzZXRWYWx1ZUlucHV0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3lvZmZzZXR2YWx1ZScpO1xyXG5jb25zdCB0aW1ldGFrZW4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndGltZXRha2VuJyk7XHJcbmNvbnN0IGcgPSBnYW1lLmdldENvbnRleHQoJzJkJyk7XHJcbmxldCBzY2FsZSA9IDAuMzM7XHJcbmxldCB4b2Zmc2V0ID0gMDtcclxubGV0IHlvZmZzZXQgPSAwO1xyXG5jb25zdCBkcmF3SW1hZ2UgPSAoc3VtbWVkVGV4dHVyZSwgaW1hZ2VEYXRhKSA9PiB7XHJcbiAgICAvL25vdyByZW5kZXIgYSBzY2FsZWQgZG93biBzaXplIG9mIHRoZSB0ZXh0dXJlIG9uIHRoZSBjYW52YXMgKHBlci1waXhlbCkgdXNpbmcgdGhlIHNhbXBsZSBzdW1taW5nIGFwcHJvYWNoXHJcbiAgICBnLmNsZWFyUmVjdCgwLCAwLCBnYW1lLndpZHRoLCBnYW1lLmhlaWdodCk7XHJcbiAgICBjb25zdCBjYW52YXNJbWFnZSA9IGcuZ2V0SW1hZ2VEYXRhKDAsIDAsIGdhbWUud2lkdGgsIGdhbWUuaGVpZ2h0KTtcclxuICAgIGxldCBwaXhlbEZ1bmM7XHJcbiAgICBzd2l0Y2ggKG1ldGhvZC52YWx1ZSkge1xyXG4gICAgICAgIGNhc2UgJ3N1bW1lZCc6XHJcbiAgICAgICAgICAgIHBpeGVsRnVuYyA9ICh4LCB5LCB4MiwgeTIpID0+ICgwLCBhdmVyYWdlU3VtbWVkXzEuYXZlcmFnZVN1bW1lZCkoc3VtbWVkVGV4dHVyZSwgaW1hZ2VEYXRhLCB4LCB5LCB4MiwgeTIpO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlICduYWl2ZSc6XHJcbiAgICAgICAgICAgIHBpeGVsRnVuYyA9ICh4LCB5LCB4MiwgeTIpID0+ICgwLCBhdmVyYWdlTmFpdmVfMS5hdmVyYWdlTmFpdmUpKGltYWdlRGF0YSwgeCwgeSwgeDIsIHkyKTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAnbm9uZSc6XHJcbiAgICAgICAgICAgIHBpeGVsRnVuYyA9ICh4LCB5KSA9PiAoMCwgY2FudmFzXzEuZ2V0UGl4ZWwpKGltYWdlRGF0YSwgeCwgeSk7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVW5rbm93biBtZXRob2QnKTtcclxuICAgIH1cclxuICAgIGNvbnN0IHN0YXJ0VGltZSA9IERhdGUubm93KCk7XHJcbiAgICBjb25zdCBtYXhZID0gZ2FtZS5oZWlnaHQgLSAxO1xyXG4gICAgY29uc3QgbWF4WCA9IGdhbWUud2lkdGggLSAxO1xyXG4gICAgZm9yIChsZXQgeSA9IE1hdGgubWF4KDAsIHlvZmZzZXQpOyB5IDwgTWF0aC5taW4oZ2FtZS5oZWlnaHQgKiBzY2FsZSArIHlvZmZzZXQsIGdhbWUuaGVpZ2h0KTsgeSsrKSB7XHJcbiAgICAgICAgZm9yIChsZXQgeCA9IE1hdGgubWF4KDAsIHhvZmZzZXQpOyB4IDwgTWF0aC5taW4oZ2FtZS53aWR0aCAqIHNjYWxlICsgeG9mZnNldCwgZ2FtZS53aWR0aCk7IHgrKykge1xyXG4gICAgICAgICAgICBjb25zdCBwbG90WCA9ICgwLCBjb21tb25fMS5jbGFtcCkoKHggLSB4b2Zmc2V0KSAvIHNjYWxlLCAwLCBtYXhYKTtcclxuICAgICAgICAgICAgY29uc3QgcGxvdFkgPSAoMCwgY29tbW9uXzEuY2xhbXApKCh5IC0geW9mZnNldCkgLyBzY2FsZSwgMCwgbWF4WSk7XHJcbiAgICAgICAgICAgIGNvbnN0IHBsb3RYMiA9ICgwLCBjb21tb25fMS5jbGFtcCkoKHggKyAxIC0geG9mZnNldCkgLyBzY2FsZSwgMCwgbWF4WCk7XHJcbiAgICAgICAgICAgIGNvbnN0IHBsb3RZMiA9ICgwLCBjb21tb25fMS5jbGFtcCkoKHkgKyAxIC0geW9mZnNldCkgLyBzY2FsZSwgMCwgbWF4WSk7XHJcbiAgICAgICAgICAgICgwLCBjYW52YXNfMS5zZXRQaXhlbCkoY2FudmFzSW1hZ2UsIHgsIHksIHBpeGVsRnVuYyhwbG90WCwgcGxvdFksIHBsb3RYMiwgcGxvdFkyKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZy5wdXRJbWFnZURhdGEoY2FudmFzSW1hZ2UsIDAsIDApO1xyXG4gICAgdGltZXRha2VuLmlubmVyVGV4dCA9IGAke0RhdGUubm93KCkgLSBzdGFydFRpbWV9IG1zYDtcclxufTtcclxuY29uc3Qgc3RhcnQgPSAoKSA9PiB7XHJcbiAgICBjb25zdCBpbWFnZURhdGEgPSAoMCwgZ2V0SW1hZ2VEYXRhXzEuZ2V0SW1hZ2VEYXRhKShpbWFnZSk7XHJcbiAgICBjb25zdCBzdW1tZWRUZXh0dXJlID0gKDAsIGNyZWF0ZVN1bW1lZFRleHR1cmVfMS5jcmVhdGVTdW1tZWRUZXh0dXJlKShpbWFnZURhdGEpO1xyXG4gICAgY29uc3QgZHJhdyA9ICgwLCBjcmVhdGVSZW5kZXJlcl8xLmNyZWF0ZVJlbmRlcmVyKSgoKSA9PiB7XHJcbiAgICAgICAgc2NhbGVJbnB1dC52YWx1ZSA9IHNjYWxlVmFsdWVJbnB1dC52YWx1ZSA9IHNjYWxlLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgeG9mZnNldElucHV0LnZhbHVlID0geG9mZnNldFZhbHVlSW5wdXQudmFsdWUgPSB4b2Zmc2V0LnRvU3RyaW5nKCk7XHJcbiAgICAgICAgeW9mZnNldElucHV0LnZhbHVlID0geW9mZnNldFZhbHVlSW5wdXQudmFsdWUgPSB5b2Zmc2V0LnRvU3RyaW5nKCk7XHJcbiAgICAgICAgZHJhd0ltYWdlKHN1bW1lZFRleHR1cmUsIGltYWdlRGF0YSk7XHJcbiAgICB9KTtcclxuICAgIHNjYWxlSW5wdXQub25pbnB1dCA9ICgpID0+IHtcclxuICAgICAgICBzY2FsZSA9IHBhcnNlRmxvYXQoc2NhbGVJbnB1dC52YWx1ZSk7XHJcbiAgICAgICAgZHJhdygpO1xyXG4gICAgfTtcclxuICAgIHhvZmZzZXRJbnB1dC5vbmlucHV0ID0gKCkgPT4ge1xyXG4gICAgICAgIHhvZmZzZXQgPSBwYXJzZUZsb2F0KHhvZmZzZXRJbnB1dC52YWx1ZSk7XHJcbiAgICAgICAgZHJhdygpO1xyXG4gICAgfTtcclxuICAgIHlvZmZzZXRJbnB1dC5vbmlucHV0ID0gKCkgPT4ge1xyXG4gICAgICAgIHlvZmZzZXQgPSBwYXJzZUZsb2F0KHlvZmZzZXRJbnB1dC52YWx1ZSk7XHJcbiAgICAgICAgZHJhdygpO1xyXG4gICAgfTtcclxuICAgIHNjYWxlVmFsdWVJbnB1dC5vbmNoYW5nZSA9ICgpID0+IHtcclxuICAgICAgICBzY2FsZSA9IHBhcnNlRmxvYXQoc2NhbGVWYWx1ZUlucHV0LnZhbHVlKTtcclxuICAgICAgICBkcmF3KCk7XHJcbiAgICB9O1xyXG4gICAgeG9mZnNldFZhbHVlSW5wdXQub25jaGFuZ2UgPSAoKSA9PiB7XHJcbiAgICAgICAgeG9mZnNldCA9IHBhcnNlRmxvYXQoeG9mZnNldFZhbHVlSW5wdXQudmFsdWUpO1xyXG4gICAgICAgIGRyYXcoKTtcclxuICAgIH07XHJcbiAgICB5b2Zmc2V0VmFsdWVJbnB1dC5vbmNoYW5nZSA9ICgpID0+IHtcclxuICAgICAgICB5b2Zmc2V0ID0gcGFyc2VGbG9hdCh5b2Zmc2V0VmFsdWVJbnB1dC52YWx1ZSk7XHJcbiAgICAgICAgZHJhdygpO1xyXG4gICAgfTtcclxuICAgIG1ldGhvZC5vbmlucHV0ID0gZHJhdztcclxuICAgIGRyYXcoKTtcclxufTtcclxuY29uc3QgbG9hZEltYWdlID0gKCkgPT4ge1xyXG4gICAgaW1hZ2Uuc3JjID0gaW1hZ2VJbnB1dC52YWx1ZTtcclxuICAgIGlmIChpbWFnZS5jb21wbGV0ZSkge1xyXG4gICAgICAgIHN0YXJ0KCk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBpbWFnZS5vbmxvYWQgPSBzdGFydDtcclxuICAgIH1cclxufTtcclxuaW1hZ2VJbnB1dC5vbmNoYW5nZSA9ICgpID0+IHtcclxuICAgIGxvYWRJbWFnZSgpO1xyXG59O1xyXG5sb2FkSW1hZ2UoKTtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5hdmVyYWdlTmFpdmUgPSB2b2lkIDA7XHJcbmNvbnN0IGFkZDRNdXRhdGVfMSA9IHJlcXVpcmUoXCIuLi91dGlscy9hZGQ0TXV0YXRlXCIpO1xyXG5jb25zdCBmbG9vcjRNdXRhdGVfMSA9IHJlcXVpcmUoXCIuLi91dGlscy9mbG9vcjRNdXRhdGVcIik7XHJcbmNvbnN0IHNjYWxlNE11dGF0ZV8xID0gcmVxdWlyZShcIi4uL3V0aWxzL3NjYWxlNE11dGF0ZVwiKTtcclxuY29uc3QgY2FudmFzXzEgPSByZXF1aXJlKFwiLi9jYW52YXNcIik7XHJcbmNvbnN0IGF2ZXJhZ2VOYWl2ZSA9IChpbWFnZURhdGEsIHgsIHksIHgyLCB5MikgPT4ge1xyXG4gICAgY29uc3Qgc3RhcnRDZWxsWCA9IE1hdGguZmxvb3IoeCk7XHJcbiAgICBjb25zdCBzdGFydENlbGxZID0gTWF0aC5mbG9vcih5KTtcclxuICAgIGNvbnN0IGVuZENlbGxYID0gTWF0aC5mbG9vcih4Mik7XHJcbiAgICBjb25zdCBlbmRDZWxsWSA9IE1hdGguZmxvb3IoeTIpO1xyXG4gICAgLy9yYW5nZSBjb250YWluZWQgaW4gb25lIHBpeGVsXHJcbiAgICBpZiAoc3RhcnRDZWxsWCA9PSBlbmRDZWxsWCAmJiBzdGFydENlbGxZID09IGVuZENlbGxZKSB7XHJcbiAgICAgICAgcmV0dXJuICgwLCBmbG9vcjRNdXRhdGVfMS5mbG9vcjRNdXRhdGUpKCgwLCBjYW52YXNfMS5nZXRQaXhlbCkoaW1hZ2VEYXRhLCBzdGFydENlbGxYLCBzdGFydENlbGxZKSk7XHJcbiAgICB9XHJcbiAgICBjb25zdCB3aWR0aCA9IHgyIC0geDtcclxuICAgIGNvbnN0IGhlaWdodCA9IHkyIC0geTtcclxuICAgIGNvbnN0IHBpeGVsQXJlYSA9IHdpZHRoICogaGVpZ2h0O1xyXG4gICAgY29uc3QgY29sb3VyTm9ybWFsaXNlciA9IDEgLyBwaXhlbEFyZWE7XHJcbiAgICBjb25zdCBpbm5lckNlbGxYID0gTWF0aC5jZWlsKHgpO1xyXG4gICAgY29uc3QgaW5uZXJDZWxsWSA9IE1hdGguY2VpbCh5KTtcclxuICAgIGNvbnN0IGlubmVyQ2VsbFgyID0gTWF0aC5mbG9vcih4Mik7XHJcbiAgICBjb25zdCBpbm5lckNlbGxZMiA9IE1hdGguZmxvb3IoeTIpO1xyXG4gICAgY29uc3QgbGVmdERpZmYgPSBpbm5lckNlbGxYIC0geDtcclxuICAgIGNvbnN0IHRvcERpZmYgPSBpbm5lckNlbGxZIC0geTtcclxuICAgIGNvbnN0IHJpZ2h0RGlmZiA9IHgyIC0gaW5uZXJDZWxsWDI7XHJcbiAgICBjb25zdCBib3R0b21EaWZmID0geTIgLSBpbm5lckNlbGxZMjtcclxuICAgIGNvbnN0IGNvbG91ciA9IFswLCAwLCAwLCAwXTtcclxuICAgIC8vcGVyaGFwcyB3ZSBzaG91bGQgYmUgYmxlbmRpbmcgYW5vdGhlciB3YXkgKGFscGhhKSBpbnN0ZWFkIG9mIGFkZGluZz9cclxuICAgIC8vc2luZ2xlIGhvcml6b250YWwgc3RyaXBcclxuICAgIGlmIChzdGFydENlbGxYID09IGVuZENlbGxYKSB7XHJcbiAgICAgICAgaWYgKHRvcERpZmYpIHtcclxuICAgICAgICAgICAgKDAsIGFkZDRNdXRhdGVfMS5hZGQ0TXV0YXRlKShjb2xvdXIsICgwLCBzY2FsZTRNdXRhdGVfMS5zY2FsZTRNdXRhdGUpKCgwLCBjYW52YXNfMS5nZXRQaXhlbCkoaW1hZ2VEYXRhLCBzdGFydENlbGxYLCBzdGFydENlbGxZKSwgd2lkdGggKiB0b3BEaWZmKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChib3R0b21EaWZmKSB7XHJcbiAgICAgICAgICAgICgwLCBhZGQ0TXV0YXRlXzEuYWRkNE11dGF0ZSkoY29sb3VyLCAoMCwgc2NhbGU0TXV0YXRlXzEuc2NhbGU0TXV0YXRlKSgoMCwgY2FudmFzXzEuZ2V0UGl4ZWwpKGltYWdlRGF0YSwgZW5kQ2VsbFgsIGVuZENlbGxZKSwgd2lkdGggKiBib3R0b21EaWZmKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IG1pZENvbG91ciA9IFswLCAwLCAwLCAwXTtcclxuICAgICAgICBmb3IgKGxldCBqID0gaW5uZXJDZWxsWTsgaiA8IGlubmVyQ2VsbFkyOyBqKyspIHtcclxuICAgICAgICAgICAgKDAsIGFkZDRNdXRhdGVfMS5hZGQ0TXV0YXRlKShtaWRDb2xvdXIsICgwLCBjYW52YXNfMS5nZXRQaXhlbCkoaW1hZ2VEYXRhLCBzdGFydENlbGxYLCBqKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgICgwLCBhZGQ0TXV0YXRlXzEuYWRkNE11dGF0ZSkoY29sb3VyLCAoMCwgc2NhbGU0TXV0YXRlXzEuc2NhbGU0TXV0YXRlKShtaWRDb2xvdXIsIHdpZHRoKSk7XHJcbiAgICAgICAgcmV0dXJuICgwLCBmbG9vcjRNdXRhdGVfMS5mbG9vcjRNdXRhdGUpKCgwLCBzY2FsZTRNdXRhdGVfMS5zY2FsZTRNdXRhdGUpKGNvbG91ciwgY29sb3VyTm9ybWFsaXNlcikpO1xyXG4gICAgfVxyXG4gICAgLy9zaW5nbGUgdmVydGljYWwgc3RyaXBcclxuICAgIGlmIChzdGFydENlbGxZID09IGVuZENlbGxZKSB7XHJcbiAgICAgICAgaWYgKGxlZnREaWZmKSB7XHJcbiAgICAgICAgICAgICgwLCBhZGQ0TXV0YXRlXzEuYWRkNE11dGF0ZSkoY29sb3VyLCAoMCwgc2NhbGU0TXV0YXRlXzEuc2NhbGU0TXV0YXRlKSgoMCwgY2FudmFzXzEuZ2V0UGl4ZWwpKGltYWdlRGF0YSwgc3RhcnRDZWxsWCwgc3RhcnRDZWxsWSksIGhlaWdodCAqIGxlZnREaWZmKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChyaWdodERpZmYpIHtcclxuICAgICAgICAgICAgKDAsIGFkZDRNdXRhdGVfMS5hZGQ0TXV0YXRlKShjb2xvdXIsICgwLCBzY2FsZTRNdXRhdGVfMS5zY2FsZTRNdXRhdGUpKCgwLCBjYW52YXNfMS5nZXRQaXhlbCkoaW1hZ2VEYXRhLCBlbmRDZWxsWCwgZW5kQ2VsbFkpLCBoZWlnaHQgKiByaWdodERpZmYpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgbWlkQ29sb3VyID0gWzAsIDAsIDAsIDBdO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSBpbm5lckNlbGxYOyBpIDwgaW5uZXJDZWxsWDI7IGkrKykge1xyXG4gICAgICAgICAgICAoMCwgYWRkNE11dGF0ZV8xLmFkZDRNdXRhdGUpKG1pZENvbG91ciwgKDAsIGNhbnZhc18xLmdldFBpeGVsKShpbWFnZURhdGEsIGksIHN0YXJ0Q2VsbFkpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgKDAsIGFkZDRNdXRhdGVfMS5hZGQ0TXV0YXRlKShjb2xvdXIsICgwLCBzY2FsZTRNdXRhdGVfMS5zY2FsZTRNdXRhdGUpKG1pZENvbG91ciwgaGVpZ2h0KSk7XHJcbiAgICAgICAgcmV0dXJuICgwLCBmbG9vcjRNdXRhdGVfMS5mbG9vcjRNdXRhdGUpKCgwLCBzY2FsZTRNdXRhdGVfMS5zY2FsZTRNdXRhdGUpKGNvbG91ciwgY29sb3VyTm9ybWFsaXNlcikpO1xyXG4gICAgfVxyXG4gICAgLy9jb3JuZXIgY2VsbHNcclxuICAgIGlmICh0b3BEaWZmKSB7XHJcbiAgICAgICAgaWYgKGxlZnREaWZmKSB7XHJcbiAgICAgICAgICAgICgwLCBhZGQ0TXV0YXRlXzEuYWRkNE11dGF0ZSkoY29sb3VyLCAoMCwgc2NhbGU0TXV0YXRlXzEuc2NhbGU0TXV0YXRlKSgoMCwgY2FudmFzXzEuZ2V0UGl4ZWwpKGltYWdlRGF0YSwgc3RhcnRDZWxsWCwgc3RhcnRDZWxsWSksIGxlZnREaWZmICogdG9wRGlmZikpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAocmlnaHREaWZmKSB7XHJcbiAgICAgICAgICAgICgwLCBhZGQ0TXV0YXRlXzEuYWRkNE11dGF0ZSkoY29sb3VyLCAoMCwgc2NhbGU0TXV0YXRlXzEuc2NhbGU0TXV0YXRlKSgoMCwgY2FudmFzXzEuZ2V0UGl4ZWwpKGltYWdlRGF0YSwgZW5kQ2VsbFgsIHN0YXJ0Q2VsbFkpLCByaWdodERpZmYgKiB0b3BEaWZmKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYgKGJvdHRvbURpZmYpIHtcclxuICAgICAgICBpZiAobGVmdERpZmYpIHtcclxuICAgICAgICAgICAgKDAsIGFkZDRNdXRhdGVfMS5hZGQ0TXV0YXRlKShjb2xvdXIsICgwLCBzY2FsZTRNdXRhdGVfMS5zY2FsZTRNdXRhdGUpKCgwLCBjYW52YXNfMS5nZXRQaXhlbCkoaW1hZ2VEYXRhLCBzdGFydENlbGxYLCBlbmRDZWxsWSksIGxlZnREaWZmICogYm90dG9tRGlmZikpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAocmlnaHREaWZmKSB7XHJcbiAgICAgICAgICAgICgwLCBhZGQ0TXV0YXRlXzEuYWRkNE11dGF0ZSkoY29sb3VyLCAoMCwgc2NhbGU0TXV0YXRlXzEuc2NhbGU0TXV0YXRlKSgoMCwgY2FudmFzXzEuZ2V0UGl4ZWwpKGltYWdlRGF0YSwgZW5kQ2VsbFgsIGVuZENlbGxZKSwgcmlnaHREaWZmICogYm90dG9tRGlmZikpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8vZnJhY3Rpb25hbCBzdHJpcHNcclxuICAgIGlmICh0b3BEaWZmKSB7XHJcbiAgICAgICAgY29uc3QgdG9wQ29sb3VyID0gWzAsIDAsIDAsIDBdO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSBpbm5lckNlbGxYOyBpIDwgaW5uZXJDZWxsWDI7IGkrKykge1xyXG4gICAgICAgICAgICAoMCwgYWRkNE11dGF0ZV8xLmFkZDRNdXRhdGUpKHRvcENvbG91ciwgKDAsIGNhbnZhc18xLmdldFBpeGVsKShpbWFnZURhdGEsIGksIHN0YXJ0Q2VsbFkpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgKDAsIGFkZDRNdXRhdGVfMS5hZGQ0TXV0YXRlKShjb2xvdXIsICgwLCBzY2FsZTRNdXRhdGVfMS5zY2FsZTRNdXRhdGUpKHRvcENvbG91ciwgdG9wRGlmZikpO1xyXG4gICAgfVxyXG4gICAgaWYgKGxlZnREaWZmKSB7XHJcbiAgICAgICAgY29uc3QgbGVmdENvbG91ciA9IFswLCAwLCAwLCAwXTtcclxuICAgICAgICBmb3IgKGxldCBqID0gaW5uZXJDZWxsWTsgaiA8IGlubmVyQ2VsbFkyOyBqKyspIHtcclxuICAgICAgICAgICAgKDAsIGFkZDRNdXRhdGVfMS5hZGQ0TXV0YXRlKShsZWZ0Q29sb3VyLCAoMCwgY2FudmFzXzEuZ2V0UGl4ZWwpKGltYWdlRGF0YSwgc3RhcnRDZWxsWCwgaikpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAoMCwgYWRkNE11dGF0ZV8xLmFkZDRNdXRhdGUpKGNvbG91ciwgKDAsIHNjYWxlNE11dGF0ZV8xLnNjYWxlNE11dGF0ZSkobGVmdENvbG91ciwgbGVmdERpZmYpKTtcclxuICAgIH1cclxuICAgIGlmIChib3R0b21EaWZmKSB7XHJcbiAgICAgICAgY29uc3QgYm90dG9tQ29sb3VyID0gWzAsIDAsIDAsIDBdO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSBpbm5lckNlbGxYOyBpIDwgaW5uZXJDZWxsWDI7IGkrKykge1xyXG4gICAgICAgICAgICAoMCwgYWRkNE11dGF0ZV8xLmFkZDRNdXRhdGUpKGJvdHRvbUNvbG91ciwgKDAsIGNhbnZhc18xLmdldFBpeGVsKShpbWFnZURhdGEsIGksIGVuZENlbGxZKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgICgwLCBhZGQ0TXV0YXRlXzEuYWRkNE11dGF0ZSkoY29sb3VyLCAoMCwgc2NhbGU0TXV0YXRlXzEuc2NhbGU0TXV0YXRlKShib3R0b21Db2xvdXIsIGJvdHRvbURpZmYpKTtcclxuICAgIH1cclxuICAgIGlmIChyaWdodERpZmYpIHtcclxuICAgICAgICBjb25zdCByaWdodENvbG91ciA9IFswLCAwLCAwLCAwXTtcclxuICAgICAgICBmb3IgKGxldCBqID0gaW5uZXJDZWxsWTsgaiA8IGlubmVyQ2VsbFkyOyBqKyspIHtcclxuICAgICAgICAgICAgKDAsIGFkZDRNdXRhdGVfMS5hZGQ0TXV0YXRlKShyaWdodENvbG91ciwgKDAsIGNhbnZhc18xLmdldFBpeGVsKShpbWFnZURhdGEsIGVuZENlbGxYLCBqKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgICgwLCBhZGQ0TXV0YXRlXzEuYWRkNE11dGF0ZSkoY29sb3VyLCAoMCwgc2NhbGU0TXV0YXRlXzEuc2NhbGU0TXV0YXRlKShyaWdodENvbG91ciwgcmlnaHREaWZmKSk7XHJcbiAgICB9XHJcbiAgICAvL2lubmVyIHBhcnRzXHJcbiAgICBmb3IgKGxldCBpID0gaW5uZXJDZWxsWDsgaSA8IGlubmVyQ2VsbFgyOyBpKyspIHtcclxuICAgICAgICBmb3IgKGxldCBqID0gaW5uZXJDZWxsWTsgaiA8IGlubmVyQ2VsbFkyOyBqKyspIHtcclxuICAgICAgICAgICAgKDAsIGFkZDRNdXRhdGVfMS5hZGQ0TXV0YXRlKShjb2xvdXIsICgwLCBjYW52YXNfMS5nZXRQaXhlbCkoaW1hZ2VEYXRhLCBpLCBqKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy9ub3cgd2UgaGF2ZSBhbiBhY2N1bXVsYXRpdmUgcGl4ZWwgdmFsdWUgdGhhdCBjb3ZlcnMgdGhlIHdob2xlIGFyZWEgc28ganVzdCBhdmVyYWdlIGl0XHJcbiAgICByZXR1cm4gKDAsIGZsb29yNE11dGF0ZV8xLmZsb29yNE11dGF0ZSkoKDAsIHNjYWxlNE11dGF0ZV8xLnNjYWxlNE11dGF0ZSkoY29sb3VyLCBjb2xvdXJOb3JtYWxpc2VyKSk7XHJcbn07XHJcbmV4cG9ydHMuYXZlcmFnZU5haXZlID0gYXZlcmFnZU5haXZlO1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLmF2ZXJhZ2VTdW1tZWQgPSB2b2lkIDA7XHJcbmNvbnN0IGFkZDRNdXRhdGVfMSA9IHJlcXVpcmUoXCIuLi91dGlscy9hZGQ0TXV0YXRlXCIpO1xyXG5jb25zdCBmbG9vcjRNdXRhdGVfMSA9IHJlcXVpcmUoXCIuLi91dGlscy9mbG9vcjRNdXRhdGVcIik7XHJcbmNvbnN0IHNjYWxlNE11dGF0ZV8xID0gcmVxdWlyZShcIi4uL3V0aWxzL3NjYWxlNE11dGF0ZVwiKTtcclxuY29uc3Qgc3VidHJhY3Q0TXV0YXRlXzEgPSByZXF1aXJlKFwiLi4vdXRpbHMvc3VidHJhY3Q0TXV0YXRlXCIpO1xyXG5jb25zdCBjYW52YXNfMSA9IHJlcXVpcmUoXCIuL2NhbnZhc1wiKTtcclxuY29uc3QgZ2V0U3VtbWVkVGV4dHVyZVZhbCA9IChzdW1tZWRUZXh0dXJlLCB4LCB5KSA9PiB7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHggPj0gMCAmJiB5ID49IDAgPyBzdW1tZWRUZXh0dXJlW3ldW3hdIDogWzAsIDAsIDAsIDBdO1xyXG4gICAgICAgIGlmIChyZXN1bHQgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aHJvdyBFcnJvcignTm8gc3VtbWVkIHRleHR1cmUgdmFsdWUnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxuICAgIGNhdGNoIChlcnIpIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKHgsIHkpO1xyXG4gICAgICAgIHRocm93IGVycjtcclxuICAgIH1cclxufTtcclxuY29uc3QgZ2V0U3VtbWVkQXJlYSA9IChzdW1tZWRUZXh0dXJlLCB4LCB5LCB4MiwgeTIpID0+IHtcclxuICAgIGNvbnN0IHJlc3VsdCA9IFswLCAwLCAwLCAwXTtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgKDAsIGFkZDRNdXRhdGVfMS5hZGQ0TXV0YXRlKShyZXN1bHQsIGdldFN1bW1lZFRleHR1cmVWYWwoc3VtbWVkVGV4dHVyZSwgeDIsIHkyKSk7XHJcbiAgICAgICAgKDAsIHN1YnRyYWN0NE11dGF0ZV8xLnN1YnRyYWN0NE11dGF0ZSkocmVzdWx0LCBnZXRTdW1tZWRUZXh0dXJlVmFsKHN1bW1lZFRleHR1cmUsIHgsIHkyKSk7XHJcbiAgICAgICAgKDAsIHN1YnRyYWN0NE11dGF0ZV8xLnN1YnRyYWN0NE11dGF0ZSkocmVzdWx0LCBnZXRTdW1tZWRUZXh0dXJlVmFsKHN1bW1lZFRleHR1cmUsIHgyLCB5KSk7XHJcbiAgICAgICAgKDAsIGFkZDRNdXRhdGVfMS5hZGQ0TXV0YXRlKShyZXN1bHQsIGdldFN1bW1lZFRleHR1cmVWYWwoc3VtbWVkVGV4dHVyZSwgeCwgeSkpO1xyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGVycikge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoW1xyXG4gICAgICAgICAgICByZXN1bHQsXHJcbiAgICAgICAgICAgIGdldFN1bW1lZFRleHR1cmVWYWwoc3VtbWVkVGV4dHVyZSwgeDIsIHkyKSxcclxuICAgICAgICAgICAgZ2V0U3VtbWVkVGV4dHVyZVZhbChzdW1tZWRUZXh0dXJlLCB4LCB5MiksXHJcbiAgICAgICAgICAgIGdldFN1bW1lZFRleHR1cmVWYWwoc3VtbWVkVGV4dHVyZSwgeDIsIHkpLFxyXG4gICAgICAgICAgICBnZXRTdW1tZWRUZXh0dXJlVmFsKHN1bW1lZFRleHR1cmUsIHgsIHkpXHJcbiAgICAgICAgXSk7XHJcbiAgICAgICAgdGhyb3cgZXJyO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxufTtcclxuLy9yZXN1bHRzIGluIHVwIHRvIDI0IHRleHR1cmUgbG9va3VwcyBiYXNlZCBvbiBjb21wbGV4aXR5IG9mIHJhbmdlLCB3aGF0ZXZlciBzaXplIHRoZSBpbWFnZSBpc1xyXG5jb25zdCBhdmVyYWdlU3VtbWVkID0gKHN1bW1lZFRleHR1cmUsIGltYWdlRGF0YSwgeCwgeSwgeDIsIHkyKSA9PiB7XHJcbiAgICBjb25zdCBzdGFydENlbGxYID0gTWF0aC5mbG9vcih4KTtcclxuICAgIGNvbnN0IHN0YXJ0Q2VsbFkgPSBNYXRoLmZsb29yKHkpO1xyXG4gICAgY29uc3QgZW5kQ2VsbFggPSBNYXRoLmZsb29yKHgyKTtcclxuICAgIGNvbnN0IGVuZENlbGxZID0gTWF0aC5mbG9vcih5Mik7XHJcbiAgICAvL3JhbmdlIGNvbnRhaW5lZCBpbiBvbmUgcGl4ZWxcclxuICAgIGlmIChzdGFydENlbGxYID09IGVuZENlbGxYICYmIHN0YXJ0Q2VsbFkgPT0gZW5kQ2VsbFkpIHtcclxuICAgICAgICByZXR1cm4gKDAsIGZsb29yNE11dGF0ZV8xLmZsb29yNE11dGF0ZSkoKDAsIGNhbnZhc18xLmdldFBpeGVsKShpbWFnZURhdGEsIHN0YXJ0Q2VsbFgsIHN0YXJ0Q2VsbFkpKTtcclxuICAgIH1cclxuICAgIGNvbnN0IHdpZHRoID0geDIgLSB4O1xyXG4gICAgY29uc3QgaGVpZ2h0ID0geTIgLSB5O1xyXG4gICAgY29uc3QgcGl4ZWxBcmVhID0gd2lkdGggKiBoZWlnaHQ7XHJcbiAgICBjb25zdCBjb2xvdXJOb3JtYWxpc2VyID0gMSAvIHBpeGVsQXJlYTtcclxuICAgIGNvbnN0IGlubmVyQ2VsbFggPSBNYXRoLmNlaWwoeCk7XHJcbiAgICBjb25zdCBpbm5lckNlbGxZID0gTWF0aC5jZWlsKHkpO1xyXG4gICAgY29uc3QgaW5uZXJDZWxsWDIgPSBNYXRoLmZsb29yKHgyKTtcclxuICAgIGNvbnN0IGlubmVyQ2VsbFkyID0gTWF0aC5mbG9vcih5Mik7XHJcbiAgICBjb25zdCBsZWZ0RGlmZiA9IGlubmVyQ2VsbFggLSB4O1xyXG4gICAgY29uc3QgdG9wRGlmZiA9IGlubmVyQ2VsbFkgLSB5O1xyXG4gICAgY29uc3QgcmlnaHREaWZmID0geDIgLSBpbm5lckNlbGxYMjtcclxuICAgIGNvbnN0IGJvdHRvbURpZmYgPSB5MiAtIGlubmVyQ2VsbFkyO1xyXG4gICAgY29uc3QgY29sb3VyID0gWzAsIDAsIDAsIDBdO1xyXG4gICAgLy9zaW5nbGUgaG9yaXpvbnRhbCBzdHJpcFxyXG4gICAgaWYgKHN0YXJ0Q2VsbFggPT0gZW5kQ2VsbFgpIHtcclxuICAgICAgICBpZiAodG9wRGlmZikge1xyXG4gICAgICAgICAgICAoMCwgYWRkNE11dGF0ZV8xLmFkZDRNdXRhdGUpKGNvbG91ciwgKDAsIHNjYWxlNE11dGF0ZV8xLnNjYWxlNE11dGF0ZSkoKDAsIGNhbnZhc18xLmdldFBpeGVsKShpbWFnZURhdGEsIHN0YXJ0Q2VsbFgsIHN0YXJ0Q2VsbFkpLCB3aWR0aCAqIHRvcERpZmYpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGJvdHRvbURpZmYpIHtcclxuICAgICAgICAgICAgKDAsIGFkZDRNdXRhdGVfMS5hZGQ0TXV0YXRlKShjb2xvdXIsICgwLCBzY2FsZTRNdXRhdGVfMS5zY2FsZTRNdXRhdGUpKCgwLCBjYW52YXNfMS5nZXRQaXhlbCkoaW1hZ2VEYXRhLCBlbmRDZWxsWCwgZW5kQ2VsbFkpLCB3aWR0aCAqIGJvdHRvbURpZmYpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgKDAsIGFkZDRNdXRhdGVfMS5hZGQ0TXV0YXRlKShjb2xvdXIsICgwLCBzY2FsZTRNdXRhdGVfMS5zY2FsZTRNdXRhdGUpKGdldFN1bW1lZEFyZWEoc3VtbWVkVGV4dHVyZSwgc3RhcnRDZWxsWCAtIDEsIGlubmVyQ2VsbFkgLSAxLCBzdGFydENlbGxYLCBpbm5lckNlbGxZMiAtIDEpLCB3aWR0aCkpO1xyXG4gICAgICAgIHJldHVybiAoMCwgZmxvb3I0TXV0YXRlXzEuZmxvb3I0TXV0YXRlKSgoMCwgc2NhbGU0TXV0YXRlXzEuc2NhbGU0TXV0YXRlKShjb2xvdXIsIGNvbG91ck5vcm1hbGlzZXIpKTtcclxuICAgIH1cclxuICAgIC8vc2luZ2xlIHZlcnRpY2FsIHN0cmlwXHJcbiAgICBpZiAoc3RhcnRDZWxsWSA9PSBlbmRDZWxsWSkge1xyXG4gICAgICAgIGlmIChsZWZ0RGlmZikge1xyXG4gICAgICAgICAgICAoMCwgYWRkNE11dGF0ZV8xLmFkZDRNdXRhdGUpKGNvbG91ciwgKDAsIHNjYWxlNE11dGF0ZV8xLnNjYWxlNE11dGF0ZSkoKDAsIGNhbnZhc18xLmdldFBpeGVsKShpbWFnZURhdGEsIHN0YXJ0Q2VsbFgsIHN0YXJ0Q2VsbFkpLCBoZWlnaHQgKiBsZWZ0RGlmZikpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAocmlnaHREaWZmKSB7XHJcbiAgICAgICAgICAgICgwLCBhZGQ0TXV0YXRlXzEuYWRkNE11dGF0ZSkoY29sb3VyLCAoMCwgc2NhbGU0TXV0YXRlXzEuc2NhbGU0TXV0YXRlKSgoMCwgY2FudmFzXzEuZ2V0UGl4ZWwpKGltYWdlRGF0YSwgZW5kQ2VsbFgsIGVuZENlbGxZKSwgaGVpZ2h0ICogcmlnaHREaWZmKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgICgwLCBhZGQ0TXV0YXRlXzEuYWRkNE11dGF0ZSkoY29sb3VyLCAoMCwgc2NhbGU0TXV0YXRlXzEuc2NhbGU0TXV0YXRlKShnZXRTdW1tZWRBcmVhKHN1bW1lZFRleHR1cmUsIGlubmVyQ2VsbFggLSAxLCBzdGFydENlbGxZIC0gMSwgaW5uZXJDZWxsWDIgLSAxLCBzdGFydENlbGxZKSwgaGVpZ2h0KSk7XHJcbiAgICAgICAgcmV0dXJuICgwLCBmbG9vcjRNdXRhdGVfMS5mbG9vcjRNdXRhdGUpKCgwLCBzY2FsZTRNdXRhdGVfMS5zY2FsZTRNdXRhdGUpKGNvbG91ciwgY29sb3VyTm9ybWFsaXNlcikpO1xyXG4gICAgfVxyXG4gICAgLy9jb3JuZXIgY2VsbHNcclxuICAgIGlmICh0b3BEaWZmKSB7XHJcbiAgICAgICAgaWYgKGxlZnREaWZmKSB7XHJcbiAgICAgICAgICAgICgwLCBhZGQ0TXV0YXRlXzEuYWRkNE11dGF0ZSkoY29sb3VyLCAoMCwgc2NhbGU0TXV0YXRlXzEuc2NhbGU0TXV0YXRlKSgoMCwgY2FudmFzXzEuZ2V0UGl4ZWwpKGltYWdlRGF0YSwgc3RhcnRDZWxsWCwgc3RhcnRDZWxsWSksIGxlZnREaWZmICogdG9wRGlmZikpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAocmlnaHREaWZmKSB7XHJcbiAgICAgICAgICAgICgwLCBhZGQ0TXV0YXRlXzEuYWRkNE11dGF0ZSkoY29sb3VyLCAoMCwgc2NhbGU0TXV0YXRlXzEuc2NhbGU0TXV0YXRlKSgoMCwgY2FudmFzXzEuZ2V0UGl4ZWwpKGltYWdlRGF0YSwgZW5kQ2VsbFgsIHN0YXJ0Q2VsbFkpLCByaWdodERpZmYgKiB0b3BEaWZmKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYgKGJvdHRvbURpZmYpIHtcclxuICAgICAgICBpZiAobGVmdERpZmYpIHtcclxuICAgICAgICAgICAgKDAsIGFkZDRNdXRhdGVfMS5hZGQ0TXV0YXRlKShjb2xvdXIsICgwLCBzY2FsZTRNdXRhdGVfMS5zY2FsZTRNdXRhdGUpKCgwLCBjYW52YXNfMS5nZXRQaXhlbCkoaW1hZ2VEYXRhLCBzdGFydENlbGxYLCBlbmRDZWxsWSksIGxlZnREaWZmICogYm90dG9tRGlmZikpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAocmlnaHREaWZmKSB7XHJcbiAgICAgICAgICAgICgwLCBhZGQ0TXV0YXRlXzEuYWRkNE11dGF0ZSkoY29sb3VyLCAoMCwgc2NhbGU0TXV0YXRlXzEuc2NhbGU0TXV0YXRlKSgoMCwgY2FudmFzXzEuZ2V0UGl4ZWwpKGltYWdlRGF0YSwgZW5kQ2VsbFgsIGVuZENlbGxZKSwgcmlnaHREaWZmICogYm90dG9tRGlmZikpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8vZnJhY3Rpb25hbCBzdHJpcHNcclxuICAgIGlmICh0b3BEaWZmKSB7XHJcbiAgICAgICAgKDAsIGFkZDRNdXRhdGVfMS5hZGQ0TXV0YXRlKShjb2xvdXIsICgwLCBzY2FsZTRNdXRhdGVfMS5zY2FsZTRNdXRhdGUpKGdldFN1bW1lZEFyZWEoc3VtbWVkVGV4dHVyZSwgaW5uZXJDZWxsWCAtIDEsIHN0YXJ0Q2VsbFkgLSAxLCBpbm5lckNlbGxYMiAtIDEsIHN0YXJ0Q2VsbFkpLCB0b3BEaWZmKSk7XHJcbiAgICB9XHJcbiAgICBpZiAobGVmdERpZmYpIHtcclxuICAgICAgICAoMCwgYWRkNE11dGF0ZV8xLmFkZDRNdXRhdGUpKGNvbG91ciwgKDAsIHNjYWxlNE11dGF0ZV8xLnNjYWxlNE11dGF0ZSkoZ2V0U3VtbWVkQXJlYShzdW1tZWRUZXh0dXJlLCBzdGFydENlbGxYIC0gMSwgaW5uZXJDZWxsWSAtIDEsIHN0YXJ0Q2VsbFgsIGlubmVyQ2VsbFkyIC0gMSksIGxlZnREaWZmKSk7XHJcbiAgICB9XHJcbiAgICBpZiAoYm90dG9tRGlmZikge1xyXG4gICAgICAgICgwLCBhZGQ0TXV0YXRlXzEuYWRkNE11dGF0ZSkoY29sb3VyLCAoMCwgc2NhbGU0TXV0YXRlXzEuc2NhbGU0TXV0YXRlKShnZXRTdW1tZWRBcmVhKHN1bW1lZFRleHR1cmUsIGlubmVyQ2VsbFggLSAxLCBlbmRDZWxsWSAtIDEsIGlubmVyQ2VsbFgyIC0gMSwgZW5kQ2VsbFkpLCBib3R0b21EaWZmKSk7XHJcbiAgICB9XHJcbiAgICBpZiAocmlnaHREaWZmKSB7XHJcbiAgICAgICAgKDAsIGFkZDRNdXRhdGVfMS5hZGQ0TXV0YXRlKShjb2xvdXIsICgwLCBzY2FsZTRNdXRhdGVfMS5zY2FsZTRNdXRhdGUpKGdldFN1bW1lZEFyZWEoc3VtbWVkVGV4dHVyZSwgZW5kQ2VsbFggLSAxLCBpbm5lckNlbGxZIC0gMSwgZW5kQ2VsbFgsIGlubmVyQ2VsbFkyIC0gMSksIHJpZ2h0RGlmZikpO1xyXG4gICAgfVxyXG4gICAgLy9pbm5lciBwYXJ0c1xyXG4gICAgKDAsIGFkZDRNdXRhdGVfMS5hZGQ0TXV0YXRlKShjb2xvdXIsIGdldFN1bW1lZEFyZWEoc3VtbWVkVGV4dHVyZSwgaW5uZXJDZWxsWCAtIDEsIGlubmVyQ2VsbFkgLSAxLCBpbm5lckNlbGxYMiAtIDEsIGlubmVyQ2VsbFkyIC0gMSkpO1xyXG4gICAgLy9ub3cgd2UgaGF2ZSBhbiBhY2N1bXVsYXRpdmUgcGl4ZWwgdmFsdWUgdGhhdCBjb3ZlcnMgdGhlIHdob2xlIGFyZWEgc28ganVzdCBhdmVyYWdlIGl0XHJcbiAgICByZXR1cm4gKDAsIGZsb29yNE11dGF0ZV8xLmZsb29yNE11dGF0ZSkoKDAsIHNjYWxlNE11dGF0ZV8xLnNjYWxlNE11dGF0ZSkoY29sb3VyLCBjb2xvdXJOb3JtYWxpc2VyKSk7XHJcbn07XHJcbmV4cG9ydHMuYXZlcmFnZVN1bW1lZCA9IGF2ZXJhZ2VTdW1tZWQ7XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuc2V0UGl4ZWwgPSBleHBvcnRzLmdldFBpeGVsID0gdm9pZCAwO1xyXG5jb25zdCBnZXRQaXhlbCA9IChpbWFnZURhdGEsIHgsIHkpID0+IHtcclxuICAgIGNvbnN0IHNhbXBsZUluZGV4ID0gKGltYWdlRGF0YS53aWR0aCAqIE1hdGguZmxvb3IoeSkgKyBNYXRoLmZsb29yKHgpKSAqIDQ7XHJcbiAgICByZXR1cm4gaW1hZ2VEYXRhLmRhdGEuc2xpY2Uoc2FtcGxlSW5kZXgsIHNhbXBsZUluZGV4ICsgNCk7XHJcbn07XHJcbmV4cG9ydHMuZ2V0UGl4ZWwgPSBnZXRQaXhlbDtcclxuY29uc3Qgc2V0UGl4ZWwgPSAoaW1hZ2VEYXRhLCB4LCB5LCByZ2JhKSA9PiB7XHJcbiAgICBpbWFnZURhdGEuZGF0YS5zZXQocmdiYSwgKE1hdGguZmxvb3IoeSkgKiBpbWFnZURhdGEud2lkdGggKyBNYXRoLmZsb29yKHgpKSAqIDQpO1xyXG59O1xyXG5leHBvcnRzLnNldFBpeGVsID0gc2V0UGl4ZWw7XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuY3JlYXRlUmVuZGVyZXIgPSB2b2lkIDA7XHJcbmNvbnN0IGNyZWF0ZVJlbmRlcmVyID0gKHJlbmRlckZ1bmMsIGFmdGVyUmVuZGVyRnVuYykgPT4ge1xyXG4gICAgbGV0IGRyYXdpbmcgPSBmYWxzZTtcclxuICAgIHJldHVybiAoKSA9PiB7XHJcbiAgICAgICAgaWYgKCFkcmF3aW5nKSB7XHJcbiAgICAgICAgICAgIGRyYXdpbmcgPSB0cnVlO1xyXG4gICAgICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmVuZGVyRnVuYygpO1xyXG4gICAgICAgICAgICAgICAgZHJhd2luZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgYWZ0ZXJSZW5kZXJGdW5jID09PSBudWxsIHx8IGFmdGVyUmVuZGVyRnVuYyA9PT0gdm9pZCAwID8gdm9pZCAwIDogYWZ0ZXJSZW5kZXJGdW5jKCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbn07XHJcbmV4cG9ydHMuY3JlYXRlUmVuZGVyZXIgPSBjcmVhdGVSZW5kZXJlcjtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5jcmVhdGVTdW1tZWRUZXh0dXJlID0gdm9pZCAwO1xyXG5jb25zdCBhZGQ0TXV0YXRlXzEgPSByZXF1aXJlKFwiLi4vdXRpbHMvYWRkNE11dGF0ZVwiKTtcclxuY29uc3Qgc3VidHJhY3Q0TXV0YXRlXzEgPSByZXF1aXJlKFwiLi4vdXRpbHMvc3VidHJhY3Q0TXV0YXRlXCIpO1xyXG5jb25zdCBjcmVhdGVTdW1tZWRUZXh0dXJlID0gKGltYWdlRGF0YSkgPT4ge1xyXG4gICAgY29uc3Qgc3VtbWVkVGV4dHVyZSA9IG5ldyBBcnJheShpbWFnZURhdGEuaGVpZ2h0KTtcclxuICAgIGZvciAobGV0IGkgPSAwLCB5ID0gMDsgeSA8IGltYWdlRGF0YS5oZWlnaHQ7IHkrKykge1xyXG4gICAgICAgIHN1bW1lZFRleHR1cmVbeV0gPSBuZXcgQXJyYXkoaW1hZ2VEYXRhLndpZHRoKTtcclxuICAgICAgICBmb3IgKGxldCB4ID0gMDsgeCA8IGltYWdlRGF0YS53aWR0aDsgeCsrLCBpICs9IDQpIHtcclxuICAgICAgICAgICAgY29uc3QgcGl4ID0gbmV3IFVpbnQzMkFycmF5KGltYWdlRGF0YS5kYXRhLnNsaWNlKGksIGkgKyA0KSk7XHJcbiAgICAgICAgICAgIGlmICh4ID4gMCkge1xyXG4gICAgICAgICAgICAgICAgKDAsIGFkZDRNdXRhdGVfMS5hZGQ0TXV0YXRlKShwaXgsIHN1bW1lZFRleHR1cmVbeV1beCAtIDFdKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoeSA+IDApIHtcclxuICAgICAgICAgICAgICAgICgwLCBhZGQ0TXV0YXRlXzEuYWRkNE11dGF0ZSkocGl4LCBzdW1tZWRUZXh0dXJlW3kgLSAxXVt4XSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHggPiAwICYmIHkgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAoMCwgc3VidHJhY3Q0TXV0YXRlXzEuc3VidHJhY3Q0TXV0YXRlKShwaXgsIHN1bW1lZFRleHR1cmVbeSAtIDFdW3ggLSAxXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgc3VtbWVkVGV4dHVyZVt5XVt4XSA9IHBpeDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gc3VtbWVkVGV4dHVyZTtcclxufTtcclxuZXhwb3J0cy5jcmVhdGVTdW1tZWRUZXh0dXJlID0gY3JlYXRlU3VtbWVkVGV4dHVyZTtcclxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5sZXJwID0gZXhwb3J0cy50aW1lQXRQb3MgPSBleHBvcnRzLmNsYW1wID0gZXhwb3J0cy5mcmFjdCA9IGV4cG9ydHMubmVnRnJhY3QgPSBleHBvcnRzLkVQU0lMT04gPSB2b2lkIDA7XHJcbmV4cG9ydHMuRVBTSUxPTiA9IDAuMDAwMDAxO1xyXG5jb25zdCBuZWdGcmFjdCA9ICh4KSA9PiAxLjAgLSB4ICsgTWF0aC5mbG9vcih4KTtcclxuZXhwb3J0cy5uZWdGcmFjdCA9IG5lZ0ZyYWN0O1xyXG5jb25zdCBmcmFjdCA9ICh4KSA9PiB4IC0gTWF0aC5mbG9vcih4KTtcclxuZXhwb3J0cy5mcmFjdCA9IGZyYWN0O1xyXG5jb25zdCBjbGFtcCA9IChhLCBtaW4sIG1heCkgPT4gTWF0aC5tYXgoTWF0aC5taW4oYSwgbWF4KSwgbWluKTtcclxuZXhwb3J0cy5jbGFtcCA9IGNsYW1wO1xyXG5jb25zdCB0aW1lQXRQb3MgPSAoc3RhcnRQb3MsIGRpciwgbmV3UG9zKSA9PiBkaXIgPyAoMCwgZXhwb3J0cy5jbGFtcCkoKG5ld1BvcyAtIHN0YXJ0UG9zKSAvIGRpciwgMCwgMSkgOiAwO1xyXG5leHBvcnRzLnRpbWVBdFBvcyA9IHRpbWVBdFBvcztcclxuY29uc3QgbGVycCA9IChhLCBiLCB0KSA9PiBhICogKDEgLSB0KSArIGIgKiB0O1xyXG5leHBvcnRzLmxlcnAgPSBsZXJwO1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLmFkZDRNdXRhdGUgPSB2b2lkIDA7XHJcbmNvbnN0IGFkZDRNdXRhdGUgPSAoYSwgYikgPT4ge1xyXG4gICAgYVswXSArPSBiWzBdO1xyXG4gICAgYVsxXSArPSBiWzFdO1xyXG4gICAgYVsyXSArPSBiWzJdO1xyXG4gICAgYVszXSArPSBiWzNdO1xyXG4gICAgcmV0dXJuIGE7XHJcbn07XHJcbmV4cG9ydHMuYWRkNE11dGF0ZSA9IGFkZDRNdXRhdGU7XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuZmxvb3I0TXV0YXRlID0gdm9pZCAwO1xyXG5jb25zdCBmbG9vcjRNdXRhdGUgPSAoYSkgPT4ge1xyXG4gICAgYVswXSA9IE1hdGguZmxvb3IoYVswXSk7XHJcbiAgICBhWzFdID0gTWF0aC5mbG9vcihhWzFdKTtcclxuICAgIGFbMl0gPSBNYXRoLmZsb29yKGFbMl0pO1xyXG4gICAgYVszXSA9IE1hdGguZmxvb3IoYVszXSk7XHJcbiAgICByZXR1cm4gYTtcclxufTtcclxuZXhwb3J0cy5mbG9vcjRNdXRhdGUgPSBmbG9vcjRNdXRhdGU7XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuZ2V0SW1hZ2VEYXRhID0gdm9pZCAwO1xyXG5jb25zdCBnZXRJbWFnZURhdGEgPSAoaW1hZ2UpID0+IHtcclxuICAgIGNvbnN0IGltYWdlQ2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XHJcbiAgICBpbWFnZUNhbnZhcy53aWR0aCA9IGltYWdlLndpZHRoO1xyXG4gICAgaW1hZ2VDYW52YXMuaGVpZ2h0ID0gaW1hZ2UuaGVpZ2h0O1xyXG4gICAgY29uc3QgaW1hZ2VHcmFwaGljcyA9IGltYWdlQ2FudmFzLmdldENvbnRleHQoJzJkJyk7XHJcbiAgICBpZiAoIWltYWdlR3JhcGhpY3MpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NvdWxkIG5vdCBjcmVhdGUgY2FudmFzIHRvIGV4dHJhY3QgaW1hZ2UgZGF0YScpO1xyXG4gICAgfVxyXG4gICAgaW1hZ2VHcmFwaGljcy5jbGVhclJlY3QoMCwgMCwgaW1hZ2VDYW52YXMud2lkdGgsIGltYWdlQ2FudmFzLmhlaWdodCk7XHJcbiAgICBpbWFnZUdyYXBoaWNzLmRyYXdJbWFnZShpbWFnZSwgMCwgMCk7XHJcbiAgICByZXR1cm4gaW1hZ2VHcmFwaGljcy5nZXRJbWFnZURhdGEoMCwgMCwgaW1hZ2VDYW52YXMud2lkdGgsIGltYWdlQ2FudmFzLmhlaWdodCk7XHJcbn07XHJcbmV4cG9ydHMuZ2V0SW1hZ2VEYXRhID0gZ2V0SW1hZ2VEYXRhO1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLnNjYWxlNE11dGF0ZSA9IHZvaWQgMDtcclxuY29uc3Qgc2NhbGU0TXV0YXRlID0gKGEsIG1hZykgPT4ge1xyXG4gICAgYVswXSAqPSBtYWc7XHJcbiAgICBhWzFdICo9IG1hZztcclxuICAgIGFbMl0gKj0gbWFnO1xyXG4gICAgYVszXSAqPSBtYWc7XHJcbiAgICByZXR1cm4gYTtcclxufTtcclxuZXhwb3J0cy5zY2FsZTRNdXRhdGUgPSBzY2FsZTRNdXRhdGU7XHJcbiIsIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuc3VidHJhY3Q0TXV0YXRlID0gdm9pZCAwO1xyXG5jb25zdCBzdWJ0cmFjdDRNdXRhdGUgPSAoYSwgYikgPT4ge1xyXG4gICAgYVswXSAtPSBiWzBdO1xyXG4gICAgYVsxXSAtPSBiWzFdO1xyXG4gICAgYVsyXSAtPSBiWzJdO1xyXG4gICAgYVszXSAtPSBiWzNdO1xyXG4gICAgcmV0dXJuIGE7XHJcbn07XHJcbmV4cG9ydHMuc3VidHJhY3Q0TXV0YXRlID0gc3VidHJhY3Q0TXV0YXRlO1xyXG4iXSwibmFtZXMiOlsiYXZlcmFnZU5haXZlXzEiLCJhdmVyYWdlU3VtbWVkXzEiLCJjYW52YXNfMSIsImNyZWF0ZVJlbmRlcmVyXzEiLCJjcmVhdGVTdW1tZWRUZXh0dXJlXzEiLCJnZXRJbWFnZURhdGFfMSIsImNvbW1vbl8xIiwiZ2FtZSIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJpbWFnZSIsIm1ldGhvZCIsImltYWdlSW5wdXQiLCJzY2FsZUlucHV0IiwieG9mZnNldElucHV0IiwieW9mZnNldElucHV0Iiwic2NhbGVWYWx1ZUlucHV0IiwieG9mZnNldFZhbHVlSW5wdXQiLCJ5b2Zmc2V0VmFsdWVJbnB1dCIsInRpbWV0YWtlbiIsImciLCJnZXRDb250ZXh0Iiwic2NhbGUiLCJ4b2Zmc2V0IiwieW9mZnNldCIsInN0YXJ0IiwiaW1hZ2VEYXRhIiwiZ2V0SW1hZ2VEYXRhIiwic3VtbWVkVGV4dHVyZSIsImNyZWF0ZVN1bW1lZFRleHR1cmUiLCJkcmF3IiwiY3JlYXRlUmVuZGVyZXIiLCJ2YWx1ZSIsInRvU3RyaW5nIiwiY2xlYXJSZWN0Iiwid2lkdGgiLCJoZWlnaHQiLCJjYW52YXNJbWFnZSIsInBpeGVsRnVuYyIsIngiLCJ5IiwieDIiLCJ5MiIsImF2ZXJhZ2VTdW1tZWQiLCJhdmVyYWdlTmFpdmUiLCJnZXRQaXhlbCIsIkVycm9yIiwic3RhcnRUaW1lIiwiRGF0ZSIsIm5vdyIsIm1heFkiLCJtYXhYIiwiTWF0aCIsIm1heCIsIm1pbiIsInBsb3RYIiwiY2xhbXAiLCJwbG90WSIsInBsb3RYMiIsInBsb3RZMiIsInNldFBpeGVsIiwicHV0SW1hZ2VEYXRhIiwiaW5uZXJUZXh0IiwiZHJhd0ltYWdlIiwib25pbnB1dCIsInBhcnNlRmxvYXQiLCJvbmNoYW5nZSIsImxvYWRJbWFnZSIsInNyYyIsImNvbXBsZXRlIiwib25sb2FkIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwiYWRkNE11dGF0ZV8xIiwiZmxvb3I0TXV0YXRlXzEiLCJzY2FsZTRNdXRhdGVfMSIsInN0YXJ0Q2VsbFgiLCJmbG9vciIsInN0YXJ0Q2VsbFkiLCJlbmRDZWxsWCIsImVuZENlbGxZIiwiZmxvb3I0TXV0YXRlIiwiY29sb3VyTm9ybWFsaXNlciIsImlubmVyQ2VsbFgiLCJjZWlsIiwiaW5uZXJDZWxsWSIsImlubmVyQ2VsbFgyIiwiaW5uZXJDZWxsWTIiLCJsZWZ0RGlmZiIsInRvcERpZmYiLCJyaWdodERpZmYiLCJib3R0b21EaWZmIiwiY29sb3VyIiwiYWRkNE11dGF0ZSIsInNjYWxlNE11dGF0ZSIsIm1pZENvbG91ciIsImoiLCJpIiwidG9wQ29sb3VyIiwibGVmdENvbG91ciIsImJvdHRvbUNvbG91ciIsInJpZ2h0Q29sb3VyIiwic3VidHJhY3Q0TXV0YXRlXzEiLCJnZXRTdW1tZWRUZXh0dXJlVmFsIiwicmVzdWx0IiwidW5kZWZpbmVkIiwiZXJyIiwiY29uc29sZSIsImVycm9yIiwiZ2V0U3VtbWVkQXJlYSIsInN1YnRyYWN0NE11dGF0ZSIsInNhbXBsZUluZGV4IiwiZGF0YSIsInNsaWNlIiwicmdiYSIsInNldCIsInJlbmRlckZ1bmMiLCJhZnRlclJlbmRlckZ1bmMiLCJkcmF3aW5nIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiQXJyYXkiLCJwaXgiLCJVaW50MzJBcnJheSIsImxlcnAiLCJ0aW1lQXRQb3MiLCJmcmFjdCIsIm5lZ0ZyYWN0IiwiRVBTSUxPTiIsImEiLCJzdGFydFBvcyIsImRpciIsIm5ld1BvcyIsImIiLCJ0IiwiaW1hZ2VDYW52YXMiLCJjcmVhdGVFbGVtZW50IiwiaW1hZ2VHcmFwaGljcyIsIm1hZyJdLCJzb3VyY2VSb290IjoiIn0=