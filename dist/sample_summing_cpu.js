"use strict";(self.webpackChunksampling_coverage=self.webpackChunksampling_coverage||[]).push([[110],{3776:(e,t,a)=>{const o=a(2086),l=a(5676),u=a(975),d=a(7787),r=a(6374),c=a(8372),M=a(3345),n=document.getElementById("game"),i=document.getElementById("image"),s=document.getElementById("method"),g=document.getElementById("chooseimage"),h=document.getElementById("scale"),f=document.getElementById("xoffset"),m=document.getElementById("yoffset"),v=document.getElementById("scalevalue"),P=document.getElementById("xoffsetvalue"),x=document.getElementById("yoffsetvalue"),p=document.getElementById("timetaken"),w=n.getContext("2d");let y=.33,_=0,b=0;const I=()=>{const e=c.getImageData(i),t=r.createSummedTexture(e),a=d.createRenderer((()=>{h.value=v.value=y.toString(),f.value=P.value=_.toString(),m.value=x.value=b.toString(),((e,t)=>{w.clearRect(0,0,n.width,n.height);const a=w.getImageData(0,0,n.width,n.height);let d;switch(s.value){case"summed":d=(a,o,u,d)=>l.averageSummed(e,t,a,o,u,d);break;case"naive":d=(e,a,l,u)=>o.averageNaive(t,e,a,l,u);break;case"none":d=(e,a)=>u.getPixel(t,e,a);break;default:throw new Error("Unknown method")}const r=Date.now(),c=n.height-1,i=n.width-1;for(let e=Math.max(0,b);e<Math.min(n.height*y+b,n.height);e++)for(let t=Math.max(0,_);t<Math.min(n.width*y+_,n.width);t++){const o=M.clamp((t-_)/y,0,i),l=M.clamp((e-b)/y,0,c),r=M.clamp((t+1-_)/y,0,i),n=M.clamp((e+1-b)/y,0,c);u.setPixel(a,t,e,d(o,l,r,n))}w.putImageData(a,0,0),p.innerText=Date.now()-r+" ms"})(t,e)}));h.oninput=()=>{y=parseFloat(h.value),a()},f.oninput=()=>{_=parseFloat(f.value),a()},m.oninput=()=>{b=parseFloat(m.value),a()},v.onchange=()=>{y=parseFloat(v.value),a()},P.onchange=()=>{_=parseFloat(P.value),a()},x.onchange=()=>{b=parseFloat(x.value),a()},s.oninput=a,a()},E=()=>{i.src=g.value,i.complete?I():i.onload=I};g.onchange=()=>{E()},E()},2086:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.averageNaive=void 0;const o=a(9078),l=a(5062),u=a(8027),d=a(975);t.averageNaive=(e,t,a,r,c)=>{const M=Math.floor(t),n=Math.floor(a),i=Math.floor(r),s=Math.floor(c);if(M==i&&n==s)return l.floor4Mutate(d.getPixel(e,M,n));const g=r-t,h=c-a,f=1/(g*h),m=Math.ceil(t),v=Math.ceil(a),P=Math.floor(r),x=Math.floor(c),p=m-t,w=v-a,y=r-P,_=c-x,b=[0,0,0,0];if(M==i){w&&o.add4Mutate(b,u.scale4Mutate(d.getPixel(e,M,n),g*w)),_&&o.add4Mutate(b,u.scale4Mutate(d.getPixel(e,i,s),g*_));const t=[0,0,0,0];for(let a=v;a<x;a++)o.add4Mutate(t,d.getPixel(e,M,a));return o.add4Mutate(b,u.scale4Mutate(t,g)),l.floor4Mutate(u.scale4Mutate(b,f))}if(n==s){p&&o.add4Mutate(b,u.scale4Mutate(d.getPixel(e,M,n),h*p)),y&&o.add4Mutate(b,u.scale4Mutate(d.getPixel(e,i,s),h*y));const t=[0,0,0,0];for(let a=m;a<P;a++)o.add4Mutate(t,d.getPixel(e,a,n));return o.add4Mutate(b,u.scale4Mutate(t,h)),l.floor4Mutate(u.scale4Mutate(b,f))}if(w&&(p&&o.add4Mutate(b,u.scale4Mutate(d.getPixel(e,M,n),p*w)),y&&o.add4Mutate(b,u.scale4Mutate(d.getPixel(e,i,n),y*w))),_&&(p&&o.add4Mutate(b,u.scale4Mutate(d.getPixel(e,M,s),p*_)),y&&o.add4Mutate(b,u.scale4Mutate(d.getPixel(e,i,s),y*_))),w){const t=[0,0,0,0];for(let a=m;a<P;a++)o.add4Mutate(t,d.getPixel(e,a,n));o.add4Mutate(b,u.scale4Mutate(t,w))}if(p){const t=[0,0,0,0];for(let a=v;a<x;a++)o.add4Mutate(t,d.getPixel(e,M,a));o.add4Mutate(b,u.scale4Mutate(t,p))}if(_){const t=[0,0,0,0];for(let a=m;a<P;a++)o.add4Mutate(t,d.getPixel(e,a,s));o.add4Mutate(b,u.scale4Mutate(t,_))}if(y){const t=[0,0,0,0];for(let a=v;a<x;a++)o.add4Mutate(t,d.getPixel(e,i,a));o.add4Mutate(b,u.scale4Mutate(t,y))}for(let t=m;t<P;t++)for(let a=v;a<x;a++)o.add4Mutate(b,d.getPixel(e,t,a));return l.floor4Mutate(u.scale4Mutate(b,f))}},5676:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.averageSummed=void 0;const o=a(9078),l=a(5062),u=a(8027),d=a(6196),r=a(975),c=(e,t,a)=>{try{const o=t>=0&&a>=0?e[a][t]:[0,0,0,0];if(void 0===o)throw Error("No summed texture value");return o}catch(e){throw console.error(t,a),e}},M=(e,t,a,l,u)=>{const r=[0,0,0,0];try{o.add4Mutate(r,c(e,l,u)),d.subtract4Mutate(r,c(e,t,u)),d.subtract4Mutate(r,c(e,l,a)),o.add4Mutate(r,c(e,t,a))}catch(o){throw console.error([r,c(e,l,u),c(e,t,u),c(e,l,a),c(e,t,a)]),o}return r};t.averageSummed=(e,t,a,d,c,n)=>{const i=Math.floor(a),s=Math.floor(d),g=Math.floor(c),h=Math.floor(n);if(i==g&&s==h)return l.floor4Mutate(r.getPixel(t,i,s));const f=c-a,m=n-d,v=1/(f*m),P=Math.ceil(a),x=Math.ceil(d),p=Math.floor(c),w=Math.floor(n),y=P-a,_=x-d,b=c-p,I=n-w,E=[0,0,0,0];return i==g?(_&&o.add4Mutate(E,u.scale4Mutate(r.getPixel(t,i,s),f*_)),I&&o.add4Mutate(E,u.scale4Mutate(r.getPixel(t,g,h),f*I)),o.add4Mutate(E,u.scale4Mutate(M(e,i-1,x-1,i,w-1),f)),l.floor4Mutate(u.scale4Mutate(E,v))):s==h?(y&&o.add4Mutate(E,u.scale4Mutate(r.getPixel(t,i,s),m*y)),b&&o.add4Mutate(E,u.scale4Mutate(r.getPixel(t,g,h),m*b)),o.add4Mutate(E,u.scale4Mutate(M(e,P-1,s-1,p-1,s),m)),l.floor4Mutate(u.scale4Mutate(E,v))):(_&&(y&&o.add4Mutate(E,u.scale4Mutate(r.getPixel(t,i,s),y*_)),b&&o.add4Mutate(E,u.scale4Mutate(r.getPixel(t,g,s),b*_))),I&&(y&&o.add4Mutate(E,u.scale4Mutate(r.getPixel(t,i,h),y*I)),b&&o.add4Mutate(E,u.scale4Mutate(r.getPixel(t,g,h),b*I))),_&&o.add4Mutate(E,u.scale4Mutate(M(e,P-1,s-1,p-1,s),_)),y&&o.add4Mutate(E,u.scale4Mutate(M(e,i-1,x-1,i,w-1),y)),I&&o.add4Mutate(E,u.scale4Mutate(M(e,P-1,h-1,p-1,h),I)),b&&o.add4Mutate(E,u.scale4Mutate(M(e,g-1,x-1,g,w-1),b)),o.add4Mutate(E,M(e,P-1,x-1,p-1,w-1)),l.floor4Mutate(u.scale4Mutate(E,v)))}},975:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setPixel=t.getPixel=void 0,t.getPixel=(e,t,a)=>{const o=4*(e.width*Math.floor(a)+Math.floor(t));return e.data.slice(o,o+4)},t.setPixel=(e,t,a,o)=>{e.data.set(o,4*(Math.floor(a)*e.width+Math.floor(t)))}},7787:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.createRenderer=void 0,t.createRenderer=(e,t)=>{let a=!1;return()=>{a||(a=!0,requestAnimationFrame((()=>{e(),a=!1,null==t||t()})))}}},6374:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.createSummedTexture=void 0;const o=a(9078),l=a(6196);t.createSummedTexture=e=>{const t=new Array(e.height);for(let a=0,u=0;u<e.height;u++){t[u]=new Array(e.width);for(let d=0;d<e.width;d++,a+=4){const r=new Uint32Array(e.data.slice(a,a+4));d>0&&o.add4Mutate(r,t[u][d-1]),u>0&&o.add4Mutate(r,t[u-1][d]),d>0&&u>0&&l.subtract4Mutate(r,t[u-1][d-1]),t[u][d]=r}}return t}},3345:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.lerp=t.timeAtPos=t.clamp=t.fract=t.negFract=t.EPSILON=void 0,t.EPSILON=1e-6,t.negFract=e=>1-e+Math.floor(e),t.fract=e=>e-Math.floor(e),t.clamp=(e,t,a)=>Math.max(Math.min(e,a),t),t.timeAtPos=(e,a,o)=>a?t.clamp((o-e)/a,0,1):0,t.lerp=(e,t,a)=>e*(1-a)+t*a},9078:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.add4Mutate=void 0,t.add4Mutate=(e,t)=>(e[0]+=t[0],e[1]+=t[1],e[2]+=t[2],e[3]+=t[3],e)},5062:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.floor4Mutate=void 0,t.floor4Mutate=e=>(e[0]=Math.floor(e[0]),e[1]=Math.floor(e[1]),e[2]=Math.floor(e[2]),e[3]=Math.floor(e[3]),e)},8372:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.getImageData=void 0,t.getImageData=e=>{const t=document.createElement("canvas");t.width=e.width,t.height=e.height;const a=t.getContext("2d");if(!a)throw new Error("Could not create canvas to extract image data");return a.clearRect(0,0,t.width,t.height),a.drawImage(e,0,0),a.getImageData(0,0,t.width,t.height)}},8027:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.scale4Mutate=void 0,t.scale4Mutate=(e,t)=>(e[0]*=t,e[1]*=t,e[2]*=t,e[3]*=t,e)},6196:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.subtract4Mutate=void 0,t.subtract4Mutate=(e,t)=>(e[0]-=t[0],e[1]-=t[1],e[2]-=t[2],e[3]-=t[3],e)}},e=>{e(e.s=3776)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,