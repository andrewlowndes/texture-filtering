(()=>{"use strict";var e={86:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.averageNaive=void 0;const o=a(78),l=a(62),u=a(27),d=a(975);t.averageNaive=(e,t,a,r,c)=>{const M=Math.floor(t),n=Math.floor(a),i=Math.floor(r),s=Math.floor(c);if(M==i&&n==s)return l.floor4Mutate(d.getPixel(e,M,n));const g=r-t,h=c-a,f=1/(g*h),m=Math.ceil(t),v=Math.ceil(a),x=Math.floor(r),P=Math.floor(c),p=m-t,y=v-a,w=r-x,_=c-P,b=[0,0,0,0];if(M==i){y&&o.add4Mutate(b,u.scale4Mutate(d.getPixel(e,M,n),g*y)),_&&o.add4Mutate(b,u.scale4Mutate(d.getPixel(e,i,s),g*_));const t=[0,0,0,0];for(let a=v;a<P;a++)o.add4Mutate(t,d.getPixel(e,M,a));return o.add4Mutate(b,u.scale4Mutate(t,g)),l.floor4Mutate(u.scale4Mutate(b,f))}if(n==s){p&&o.add4Mutate(b,u.scale4Mutate(d.getPixel(e,M,n),h*p)),w&&o.add4Mutate(b,u.scale4Mutate(d.getPixel(e,i,s),h*w));const t=[0,0,0,0];for(let a=m;a<x;a++)o.add4Mutate(t,d.getPixel(e,a,n));return o.add4Mutate(b,u.scale4Mutate(t,h)),l.floor4Mutate(u.scale4Mutate(b,f))}if(y&&(p&&o.add4Mutate(b,u.scale4Mutate(d.getPixel(e,M,n),p*y)),w&&o.add4Mutate(b,u.scale4Mutate(d.getPixel(e,i,n),w*y))),_&&(p&&o.add4Mutate(b,u.scale4Mutate(d.getPixel(e,M,s),p*_)),w&&o.add4Mutate(b,u.scale4Mutate(d.getPixel(e,i,s),w*_))),y){const t=[0,0,0,0];for(let a=m;a<x;a++)o.add4Mutate(t,d.getPixel(e,a,n));o.add4Mutate(b,u.scale4Mutate(t,y))}if(p){const t=[0,0,0,0];for(let a=v;a<P;a++)o.add4Mutate(t,d.getPixel(e,M,a));o.add4Mutate(b,u.scale4Mutate(t,p))}if(_){const t=[0,0,0,0];for(let a=m;a<x;a++)o.add4Mutate(t,d.getPixel(e,a,s));o.add4Mutate(b,u.scale4Mutate(t,_))}if(w){const t=[0,0,0,0];for(let a=v;a<P;a++)o.add4Mutate(t,d.getPixel(e,i,a));o.add4Mutate(b,u.scale4Mutate(t,w))}for(let t=m;t<x;t++)for(let a=v;a<P;a++)o.add4Mutate(b,d.getPixel(e,t,a));return l.floor4Mutate(u.scale4Mutate(b,f))}},676:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.averageSummed=void 0;const o=a(78),l=a(62),u=a(27),d=a(196),r=a(975),c=(e,t,a)=>{try{const o=t>=0&&a>=0?e[a][t]:[0,0,0,0];if(void 0===o)throw Error("No summed texture value");return o}catch(e){throw console.error(t,a),e}},M=(e,t,a,l,u)=>{const r=[0,0,0,0];try{o.add4Mutate(r,c(e,l,u)),d.subtract4Mutate(r,c(e,t,u)),d.subtract4Mutate(r,c(e,l,a)),o.add4Mutate(r,c(e,t,a))}catch(o){throw console.error([r,c(e,l,u),c(e,t,u),c(e,l,a),c(e,t,a)]),o}return r};t.averageSummed=(e,t,a,d,c,n)=>{const i=Math.floor(a),s=Math.floor(d),g=Math.floor(c),h=Math.floor(n);if(i==g&&s==h)return l.floor4Mutate(r.getPixel(t,i,s));const f=c-a,m=n-d,v=1/(f*m),x=Math.ceil(a),P=Math.ceil(d),p=Math.floor(c),y=Math.floor(n),w=x-a,_=P-d,b=c-p,I=n-y,E=[0,0,0,0];return i==g?(_&&o.add4Mutate(E,u.scale4Mutate(r.getPixel(t,i,s),f*_)),I&&o.add4Mutate(E,u.scale4Mutate(r.getPixel(t,g,h),f*I)),o.add4Mutate(E,u.scale4Mutate(M(e,i-1,P-1,i,y-1),f)),l.floor4Mutate(u.scale4Mutate(E,v))):s==h?(w&&o.add4Mutate(E,u.scale4Mutate(r.getPixel(t,i,s),m*w)),b&&o.add4Mutate(E,u.scale4Mutate(r.getPixel(t,g,h),m*b)),o.add4Mutate(E,u.scale4Mutate(M(e,x-1,s-1,p-1,s),m)),l.floor4Mutate(u.scale4Mutate(E,v))):(_&&(w&&o.add4Mutate(E,u.scale4Mutate(r.getPixel(t,i,s),w*_)),b&&o.add4Mutate(E,u.scale4Mutate(r.getPixel(t,g,s),b*_))),I&&(w&&o.add4Mutate(E,u.scale4Mutate(r.getPixel(t,i,h),w*I)),b&&o.add4Mutate(E,u.scale4Mutate(r.getPixel(t,g,h),b*I))),_&&o.add4Mutate(E,u.scale4Mutate(M(e,x-1,s-1,p-1,s),_)),w&&o.add4Mutate(E,u.scale4Mutate(M(e,i-1,P-1,i,y-1),w)),I&&o.add4Mutate(E,u.scale4Mutate(M(e,x-1,h-1,p-1,h),I)),b&&o.add4Mutate(E,u.scale4Mutate(M(e,g-1,P-1,g,y-1),b)),o.add4Mutate(E,M(e,x-1,P-1,p-1,y-1)),l.floor4Mutate(u.scale4Mutate(E,v)))}},975:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.setPixel=t.getPixel=void 0,t.getPixel=(e,t,a)=>{const o=4*(e.width*Math.floor(a)+Math.floor(t));return e.data.slice(o,o+4)},t.setPixel=(e,t,a,o)=>{e.data.set(o,4*(Math.floor(a)*e.width+Math.floor(t)))}},787:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.createRenderer=void 0,t.createRenderer=(e,t)=>{let a=!1;return()=>{a||(a=!0,requestAnimationFrame((()=>{e(),a=!1,null==t||t()})))}}},374:(e,t,a)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.createSummedTexture=void 0;const o=a(78),l=a(196);t.createSummedTexture=e=>{const t=new Array(e.height);for(let a=0,u=0;u<e.height;u++){t[u]=new Array(e.width);for(let d=0;d<e.width;d++,a+=4){const r=new Uint32Array(e.data.slice(a,a+4));d>0&&o.add4Mutate(r,t[u][d-1]),u>0&&o.add4Mutate(r,t[u-1][d]),d>0&&u>0&&l.subtract4Mutate(r,t[u-1][d-1]),t[u][d]=r}}return t}},78:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.add4Mutate=void 0,t.add4Mutate=(e,t)=>(e[0]+=t[0],e[1]+=t[1],e[2]+=t[2],e[3]+=t[3],e)},586:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.clamp=void 0,t.clamp=(e,t,a)=>Math.max(Math.min(e,a),t)},62:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.floor4Mutate=void 0,t.floor4Mutate=e=>(e[0]=Math.floor(e[0]),e[1]=Math.floor(e[1]),e[2]=Math.floor(e[2]),e[3]=Math.floor(e[3]),e)},372:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.getImageData=void 0,t.getImageData=e=>{const t=document.createElement("canvas");t.width=e.width,t.height=e.height;const a=t.getContext("2d");if(!a)throw new Error("Could not create canvas to extract image data");return a.clearRect(0,0,t.width,t.height),a.drawImage(e,0,0),a.getImageData(0,0,t.width,t.height)}},27:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.scale4Mutate=void 0,t.scale4Mutate=(e,t)=>(e[0]*=t,e[1]*=t,e[2]*=t,e[3]*=t,e)},196:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.subtract4Mutate=void 0,t.subtract4Mutate=(e,t)=>(e[0]-=t[0],e[1]-=t[1],e[2]-=t[2],e[3]-=t[3],e)}},t={};function a(o){var l=t[o];if(void 0!==l)return l.exports;var u=t[o]={exports:{}};return e[o](u,u.exports,a),u.exports}(()=>{const e=a(86),t=a(676),o=a(975),l=a(787),u=a(374),d=a(586),r=a(372),c=document.getElementById("game"),M=document.getElementById("image"),n=document.getElementById("method"),i=document.getElementById("chooseimage"),s=document.getElementById("scale"),g=document.getElementById("xoffset"),h=document.getElementById("yoffset"),f=document.getElementById("scalevalue"),m=document.getElementById("xoffsetvalue"),v=document.getElementById("yoffsetvalue"),x=document.getElementById("timetaken"),P=c.getContext("2d");let p=.33,y=0,w=0;const _=()=>{const a=r.getImageData(M),i=u.createSummedTexture(a),_=l.createRenderer((()=>{s.value=f.value=p.toString(),g.value=m.value=y.toString(),h.value=v.value=w.toString(),((a,l)=>{P.clearRect(0,0,c.width,c.height);const u=P.getImageData(0,0,c.width,c.height);let r;switch(n.value){case"summed":r=(e,o,u,d)=>t.averageSummed(a,l,e,o,u,d);break;case"naive":r=(t,a,o,u)=>e.averageNaive(l,t,a,o,u);break;case"none":r=(e,t)=>o.getPixel(l,e,t);break;default:throw new Error("Unknown method")}const M=Date.now(),i=c.height-1,s=c.width-1;for(let e=Math.max(0,w);e<Math.min(c.height*p+w,c.height);e++)for(let t=Math.max(0,y);t<Math.min(c.width*p+y,c.width);t++){const a=d.clamp((t-y)/p,0,s),l=d.clamp((e-w)/p,0,i),c=d.clamp((t+1-y)/p,0,s),M=d.clamp((e+1-w)/p,0,i);o.setPixel(u,t,e,r(a,l,c,M))}P.putImageData(u,0,0),x.innerText=Date.now()-M+" ms"})(i,a)}));s.oninput=()=>{p=parseFloat(s.value),_()},g.oninput=()=>{y=parseFloat(g.value),_()},h.oninput=()=>{w=parseFloat(h.value),_()},f.onchange=()=>{p=parseFloat(f.value),_()},m.onchange=()=>{y=parseFloat(m.value),_()},v.onchange=()=>{w=parseFloat(v.value),_()},n.oninput=_,_()},b=()=>{M.src=i.value,M.complete?_():M.onload=_};i.onchange=()=>{b()},b()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,